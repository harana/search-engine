name: Generate Rust Clients from OpenAPI Specs

on:
  # Run manually
  workflow_dispatch:
  
  # Run on a schedule (daily at midnight UTC)
  schedule:
    - cron: '0 0 * * *'

env:
  OPENAPI_VERSION: '7.12.0'
  SWAGGER_VERSION: '3.0.65'
  GITHUB_ORG: 'harana'

jobs:
  generate-clients:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        client:
          - name: github-api-client
            spec_url: https://raw.githubusercontent.com/github/rest-api-description/main/descriptions/api.github.com/api.github.com.json
            generator: openapi
          # Add more clients as needed:
          # - name: another-api-client
          #   spec_url: https://example.com/api-spec.json
          #   generator: swagger
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
      
      - name: Fetch OpenAPI spec
        run: |
          mkdir -p tmp
          curl -o tmp/openapi-spec.json "${{ matrix.client.spec_url }}"
      
      - name: Download Generator CLIs
        run: |
          # Download OpenAPI Generator CLI
          wget https://repo1.maven.org/maven2/org/openapitools/openapi-generator-cli/${{ env.OPENAPI_VERSION }}/openapi-generator-cli-${{ env.OPENAPI_VERSION }}.jar -O openapi-generator-cli.jar
          
          # Download Swagger Codegen CLI
          wget https://repo1.maven.org/maven2/io/swagger/codegen/v3/swagger-codegen-cli/${{ env.SWAGGER_VERSION }}/swagger-codegen-cli-${{ env.SWAGGER_VERSION }}.jar -O swagger-codegen-cli.jar
      
      - name: Generate Rust client
        run: |
          CLIENT_NAME="${{ matrix.client.name }}"
          OUTPUT_DIR="tmp/$CLIENT_NAME"
          GENERATOR="${{ matrix.client.generator }}"
          
          # Create the output directory if it doesn't exist
          mkdir -p "$OUTPUT_DIR"
          echo "Creating client in directory: $OUTPUT_DIR"
          
          # Store output directory for later steps
          echo "OUTPUT_DIR=$OUTPUT_DIR" >> $GITHUB_ENV
          
          if [ "$GENERATOR" == "openapi" ]; then
            echo "Using OpenAPI Generator for $CLIENT_NAME"
            # Run the OpenAPI Generator
            java -jar openapi-generator-cli.jar generate \
              -i tmp/openapi-spec.json \
              -g rust \
              -o "$OUTPUT_DIR" \
              --additional-properties packageName=$CLIENT_NAME
          elif [ "$GENERATOR" == "swagger" ]; then
            echo "Using Swagger Codegen for $CLIENT_NAME"
            # Run the Swagger Codegen
            java -jar swagger-codegen-cli.jar generate \
              -i tmp/openapi-spec.json \
              -l rust \
              -o "$OUTPUT_DIR" \
              -D packageName=$CLIENT_NAME
          else
            echo "Error: Unknown generator type: $GENERATOR"
            exit 1
          fi
          
          # Verify files were generated
          echo "Files generated in $OUTPUT_DIR:"
          ls -la "$OUTPUT_DIR"
          if [ "$(ls -A $OUTPUT_DIR)" ]; then
            echo "Files were successfully generated"
          else
            echo "Error: No files were generated in $OUTPUT_DIR"
            exit 1
          fi
      
      - name: Setup GitHub CLI
        run: |
          gh --version || (
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt update
            sudo apt install gh -y
          )

      - name: Check if repository exists and create if needed
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
          CLIENT_NAME: ${{ matrix.client.name }}
        run: |
          # Use organization name from environment variable
          ORG_NAME="${{ env.GITHUB_ORG }}"
          # Create repository name based on client name
          REPO_NAME="$ORG_NAME/client-$CLIENT_NAME-rs"
          echo "Repository name will be: $REPO_NAME"
          
          # Store repo name for later steps
          echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV
          
          REPO_EXISTS=$(gh repo view $REPO_NAME --json name 2>/dev/null || echo "false")
          
          if [ "$REPO_EXISTS" == "false" ]; then
            echo "Repository $REPO_NAME does not exist. Creating it..."
            # Create the repository
            gh repo create $REPO_NAME --public --description "Rust client for $CLIENT_NAME API generated from OpenAPI spec" -y
            echo "Repository $REPO_NAME created successfully."
          else
            echo "Repository $REPO_NAME already exists."
          fi
      
      - name: Publish generated code to repository
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          # Create a temporary directory for the repo
          TEMP_DIR=$(mktemp -d)
          cd $TEMP_DIR
          
          # Create README file
          echo "# ${{ matrix.client.name }}" > README.md
          echo "" >> README.md
          echo "Rust client for ${{ matrix.client.name }} API generated from OpenAPI spec." >> README.md
          echo "" >> README.md
          echo "Generated from: ${{ matrix.client.spec_url }}" >> README.md
          echo "Generated using: ${{ matrix.client.generator == 'openapi' && 'OpenAPI Generator' || 'Swagger Codegen' }}" >> README.md
          echo "Generator version: ${{ matrix.client.generator == 'openapi' && env.OPENAPI_VERSION || env.SWAGGER_VERSION }}" >> README.md
          echo "Generated on: $(date +'%Y-%m-%d')" >> README.md
          
          # Check if repository is empty (newly created)
          IS_EMPTY_REPO=$(gh repo view $REPO_NAME --json isEmpty -q '.isEmpty // false')
          
          if [ "$IS_EMPTY_REPO" = "true" ]; then
            echo "Repository is empty. Initializing with first commit..."
            
            # Initialize git
            git init
            git config user.name "GitHub Actions"
            git config user.email "actions@github.com"
            
            # Copy generated code to the repository
            cp -r "$GITHUB_WORKSPACE/$OUTPUT_DIR"/* .
            
            # Add all files
            git add .
            
            # Create initial commit
            git commit -m "Initial commit: Add Rust client for ${{ matrix.client.name }}"
            
            # Set remote and push
            git remote add origin https://x-access-token:${GH_TOKEN}@github.com/${REPO_NAME}.git
            git branch -M main
            git push -u origin main
          else
            echo "Repository already has commits. Updating content..."
            
            # Clone the repository
            gh repo clone $REPO_NAME .
            
            # Remove all existing files except .git directory
            find . -mindepth 1 -not -path "./.git*" -delete
            
            # Copy generated code to the repository
            cp -r "$GITHUB_WORKSPACE/$OUTPUT_DIR"/* .
            
            # Configure Git
            git config user.name "GitHub Actions"
            git config user.email "actions@github.com"
            
            # Commit and push changes
            git add .
            git commit -m "Update Rust client for ${{ matrix.client.name }}" || echo "No changes to commit"
            git push
          fi

      - name: Cleanup
        run: |
          rm -f *.jar
          rm -rf tmp