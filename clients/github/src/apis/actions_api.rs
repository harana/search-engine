/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`actions_slash_add_custom_labels_to_self_hosted_runner_for_org`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashAddCustomLabelsToSelfHostedRunnerForOrgError {
    Status404(models::BasicError),
    Status422(models::ValidationErrorSimple),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_add_custom_labels_to_self_hosted_runner_for_repo`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashAddCustomLabelsToSelfHostedRunnerForRepoError {
    Status404(models::BasicError),
    Status422(models::ValidationErrorSimple),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_add_repo_access_to_self_hosted_runner_group_in_org`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashAddRepoAccessToSelfHostedRunnerGroupInOrgError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_add_selected_repo_to_org_secret`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashAddSelectedRepoToOrgSecretError {
    Status409(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_add_selected_repo_to_org_variable`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashAddSelectedRepoToOrgVariableError {
    Status409(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_add_self_hosted_runner_to_group_for_org`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashAddSelfHostedRunnerToGroupForOrgError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_approve_workflow_run`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashApproveWorkflowRunError {
    Status404(models::BasicError),
    Status403(models::BasicError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_cancel_workflow_run`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashCancelWorkflowRunError {
    Status409(models::BasicError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_create_environment_variable`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashCreateEnvironmentVariableError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_create_hosted_runner_for_org`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashCreateHostedRunnerForOrgError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_create_or_update_environment_secret`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashCreateOrUpdateEnvironmentSecretError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_create_or_update_org_secret`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashCreateOrUpdateOrgSecretError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_create_or_update_repo_secret`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashCreateOrUpdateRepoSecretError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_create_org_variable`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashCreateOrgVariableError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_create_registration_token_for_org`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashCreateRegistrationTokenForOrgError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_create_registration_token_for_repo`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashCreateRegistrationTokenForRepoError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_create_remove_token_for_org`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashCreateRemoveTokenForOrgError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_create_remove_token_for_repo`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashCreateRemoveTokenForRepoError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_create_repo_variable`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashCreateRepoVariableError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_create_self_hosted_runner_group_for_org`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashCreateSelfHostedRunnerGroupForOrgError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_create_workflow_dispatch`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashCreateWorkflowDispatchError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_delete_actions_cache_by_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashDeleteActionsCacheByIdError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_delete_actions_cache_by_key`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashDeleteActionsCacheByKeyError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_delete_artifact`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashDeleteArtifactError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_delete_environment_secret`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashDeleteEnvironmentSecretError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_delete_environment_variable`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashDeleteEnvironmentVariableError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_delete_hosted_runner_for_org`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashDeleteHostedRunnerForOrgError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_delete_org_secret`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashDeleteOrgSecretError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_delete_org_variable`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashDeleteOrgVariableError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_delete_repo_secret`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashDeleteRepoSecretError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_delete_repo_variable`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashDeleteRepoVariableError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_delete_self_hosted_runner_from_org`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashDeleteSelfHostedRunnerFromOrgError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_delete_self_hosted_runner_from_repo`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashDeleteSelfHostedRunnerFromRepoError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_delete_self_hosted_runner_group_from_org`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashDeleteSelfHostedRunnerGroupFromOrgError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_delete_workflow_run`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashDeleteWorkflowRunError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_delete_workflow_run_logs`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashDeleteWorkflowRunLogsError {
    Status403(models::BasicError),
    Status500(models::BasicError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_disable_selected_repository_github_actions_organization`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashDisableSelectedRepositoryGithubActionsOrganizationError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_disable_workflow`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashDisableWorkflowError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_download_artifact`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashDownloadArtifactError {
    Status410(models::BasicError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_download_job_logs_for_workflow_run`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashDownloadJobLogsForWorkflowRunError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_download_workflow_run_attempt_logs`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashDownloadWorkflowRunAttemptLogsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_download_workflow_run_logs`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashDownloadWorkflowRunLogsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_enable_selected_repository_github_actions_organization`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashEnableSelectedRepositoryGithubActionsOrganizationError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_enable_workflow`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashEnableWorkflowError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_force_cancel_workflow_run`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashForceCancelWorkflowRunError {
    Status409(models::BasicError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_generate_runner_jitconfig_for_org`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashGenerateRunnerJitconfigForOrgError {
    Status404(models::BasicError),
    Status422(models::ValidationErrorSimple),
    Status409(models::BasicError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_generate_runner_jitconfig_for_repo`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashGenerateRunnerJitconfigForRepoError {
    Status404(models::BasicError),
    Status422(models::ValidationErrorSimple),
    Status409(models::BasicError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_get_actions_cache_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashGetActionsCacheListError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_get_actions_cache_usage`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashGetActionsCacheUsageError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_get_actions_cache_usage_by_repo_for_org`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashGetActionsCacheUsageByRepoForOrgError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_get_actions_cache_usage_for_org`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashGetActionsCacheUsageForOrgError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_get_allowed_actions_organization`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashGetAllowedActionsOrganizationError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_get_allowed_actions_repository`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashGetAllowedActionsRepositoryError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_get_artifact`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashGetArtifactError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_get_custom_oidc_sub_claim_for_repo`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashGetCustomOidcSubClaimForRepoError {
    Status400(models::BasicError),
    Status404(models::BasicError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_get_environment_public_key`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashGetEnvironmentPublicKeyError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_get_environment_secret`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashGetEnvironmentSecretError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_get_environment_variable`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashGetEnvironmentVariableError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_get_github_actions_default_workflow_permissions_organization`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashGetGithubActionsDefaultWorkflowPermissionsOrganizationError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_get_github_actions_default_workflow_permissions_repository`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashGetGithubActionsDefaultWorkflowPermissionsRepositoryError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_get_github_actions_permissions_organization`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashGetGithubActionsPermissionsOrganizationError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_get_github_actions_permissions_repository`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashGetGithubActionsPermissionsRepositoryError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_get_hosted_runner_for_org`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashGetHostedRunnerForOrgError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_get_hosted_runners_github_owned_images_for_org`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashGetHostedRunnersGithubOwnedImagesForOrgError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_get_hosted_runners_limits_for_org`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashGetHostedRunnersLimitsForOrgError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_get_hosted_runners_machine_specs_for_org`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashGetHostedRunnersMachineSpecsForOrgError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_get_hosted_runners_partner_images_for_org`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashGetHostedRunnersPartnerImagesForOrgError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_get_hosted_runners_platforms_for_org`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashGetHostedRunnersPlatformsForOrgError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_get_job_for_workflow_run`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashGetJobForWorkflowRunError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_get_org_public_key`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashGetOrgPublicKeyError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_get_org_secret`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashGetOrgSecretError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_get_org_variable`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashGetOrgVariableError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_get_pending_deployments_for_run`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashGetPendingDeploymentsForRunError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_get_repo_public_key`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashGetRepoPublicKeyError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_get_repo_secret`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashGetRepoSecretError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_get_repo_variable`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashGetRepoVariableError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_get_reviews_for_run`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashGetReviewsForRunError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_get_self_hosted_runner_for_org`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashGetSelfHostedRunnerForOrgError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_get_self_hosted_runner_for_repo`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashGetSelfHostedRunnerForRepoError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_get_self_hosted_runner_group_for_org`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashGetSelfHostedRunnerGroupForOrgError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_get_workflow`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashGetWorkflowError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_get_workflow_access_to_repository`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashGetWorkflowAccessToRepositoryError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_get_workflow_run`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashGetWorkflowRunError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_get_workflow_run_attempt`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashGetWorkflowRunAttemptError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_get_workflow_run_usage`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashGetWorkflowRunUsageError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_get_workflow_usage`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashGetWorkflowUsageError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_list_artifacts_for_repo`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashListArtifactsForRepoError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_list_environment_secrets`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashListEnvironmentSecretsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_list_environment_variables`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashListEnvironmentVariablesError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_list_github_hosted_runners_in_group_for_org`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashListGithubHostedRunnersInGroupForOrgError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_list_hosted_runners_for_org`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashListHostedRunnersForOrgError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_list_jobs_for_workflow_run`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashListJobsForWorkflowRunError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_list_jobs_for_workflow_run_attempt`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashListJobsForWorkflowRunAttemptError {
    Status404(models::BasicError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_list_labels_for_self_hosted_runner_for_org`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashListLabelsForSelfHostedRunnerForOrgError {
    Status404(models::BasicError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_list_labels_for_self_hosted_runner_for_repo`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashListLabelsForSelfHostedRunnerForRepoError {
    Status404(models::BasicError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_list_org_secrets`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashListOrgSecretsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_list_org_variables`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashListOrgVariablesError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_list_repo_access_to_self_hosted_runner_group_in_org`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashListRepoAccessToSelfHostedRunnerGroupInOrgError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_list_repo_organization_secrets`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashListRepoOrganizationSecretsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_list_repo_organization_variables`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashListRepoOrganizationVariablesError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_list_repo_secrets`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashListRepoSecretsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_list_repo_variables`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashListRepoVariablesError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_list_repo_workflows`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashListRepoWorkflowsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_list_runner_applications_for_org`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashListRunnerApplicationsForOrgError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_list_runner_applications_for_repo`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashListRunnerApplicationsForRepoError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_list_selected_repos_for_org_secret`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashListSelectedReposForOrgSecretError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_list_selected_repos_for_org_variable`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashListSelectedReposForOrgVariableError {
    Status409(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_list_selected_repositories_enabled_github_actions_organization`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashListSelectedRepositoriesEnabledGithubActionsOrganizationError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_list_self_hosted_runner_groups_for_org`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashListSelfHostedRunnerGroupsForOrgError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_list_self_hosted_runners_for_org`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashListSelfHostedRunnersForOrgError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_list_self_hosted_runners_for_repo`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashListSelfHostedRunnersForRepoError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_list_self_hosted_runners_in_group_for_org`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashListSelfHostedRunnersInGroupForOrgError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_list_workflow_run_artifacts`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashListWorkflowRunArtifactsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_list_workflow_runs`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashListWorkflowRunsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_list_workflow_runs_for_repo`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashListWorkflowRunsForRepoError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_re_run_job_for_workflow_run`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashReRunJobForWorkflowRunError {
    Status403(models::BasicError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_re_run_workflow`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashReRunWorkflowError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_re_run_workflow_failed_jobs`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashReRunWorkflowFailedJobsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_remove_all_custom_labels_from_self_hosted_runner_for_org`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashRemoveAllCustomLabelsFromSelfHostedRunnerForOrgError {
    Status404(models::BasicError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_remove_all_custom_labels_from_self_hosted_runner_for_repo`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashRemoveAllCustomLabelsFromSelfHostedRunnerForRepoError {
    Status404(models::BasicError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_remove_custom_label_from_self_hosted_runner_for_org`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashRemoveCustomLabelFromSelfHostedRunnerForOrgError {
    Status404(models::BasicError),
    Status422(models::ValidationErrorSimple),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_remove_custom_label_from_self_hosted_runner_for_repo`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashRemoveCustomLabelFromSelfHostedRunnerForRepoError {
    Status404(models::BasicError),
    Status422(models::ValidationErrorSimple),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_remove_repo_access_to_self_hosted_runner_group_in_org`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashRemoveRepoAccessToSelfHostedRunnerGroupInOrgError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_remove_selected_repo_from_org_secret`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashRemoveSelectedRepoFromOrgSecretError {
    Status409(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_remove_selected_repo_from_org_variable`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashRemoveSelectedRepoFromOrgVariableError {
    Status409(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_remove_self_hosted_runner_from_group_for_org`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashRemoveSelfHostedRunnerFromGroupForOrgError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_review_custom_gates_for_run`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashReviewCustomGatesForRunError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_review_pending_deployments_for_run`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashReviewPendingDeploymentsForRunError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_set_allowed_actions_organization`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashSetAllowedActionsOrganizationError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_set_allowed_actions_repository`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashSetAllowedActionsRepositoryError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_set_custom_labels_for_self_hosted_runner_for_org`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashSetCustomLabelsForSelfHostedRunnerForOrgError {
    Status404(models::BasicError),
    Status422(models::ValidationErrorSimple),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_set_custom_labels_for_self_hosted_runner_for_repo`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashSetCustomLabelsForSelfHostedRunnerForRepoError {
    Status404(models::BasicError),
    Status422(models::ValidationErrorSimple),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_set_custom_oidc_sub_claim_for_repo`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashSetCustomOidcSubClaimForRepoError {
    Status404(models::BasicError),
    Status400(models::BasicError),
    Status422(models::ValidationErrorSimple),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_set_github_actions_default_workflow_permissions_organization`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashSetGithubActionsDefaultWorkflowPermissionsOrganizationError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_set_github_actions_default_workflow_permissions_repository`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashSetGithubActionsDefaultWorkflowPermissionsRepositoryError {
    Status409(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_set_github_actions_permissions_organization`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashSetGithubActionsPermissionsOrganizationError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_set_github_actions_permissions_repository`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashSetGithubActionsPermissionsRepositoryError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_set_repo_access_to_self_hosted_runner_group_in_org`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashSetRepoAccessToSelfHostedRunnerGroupInOrgError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_set_selected_repos_for_org_secret`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashSetSelectedReposForOrgSecretError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_set_selected_repos_for_org_variable`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashSetSelectedReposForOrgVariableError {
    Status409(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_set_selected_repositories_enabled_github_actions_organization`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashSetSelectedRepositoriesEnabledGithubActionsOrganizationError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_set_self_hosted_runners_in_group_for_org`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashSetSelfHostedRunnersInGroupForOrgError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_set_workflow_access_to_repository`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashSetWorkflowAccessToRepositoryError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_update_environment_variable`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashUpdateEnvironmentVariableError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_update_hosted_runner_for_org`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashUpdateHostedRunnerForOrgError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_update_org_variable`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashUpdateOrgVariableError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_update_repo_variable`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashUpdateRepoVariableError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`actions_slash_update_self_hosted_runner_group_for_org`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActionsSlashUpdateSelfHostedRunnerGroupForOrgError {
    UnknownValue(serde_json::Value),
}


/// Adds custom labels to a self-hosted runner configured in an organization.  Authenticated users must have admin access to the organization to use this endpoint.  OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
pub async fn actions_slash_add_custom_labels_to_self_hosted_runner_for_org(configuration: &configuration::Configuration, org: &str, runner_id: i32, actions_add_custom_labels_to_self_hosted_runner_for_org_request: models::ActionsAddCustomLabelsToSelfHostedRunnerForOrgRequest) -> Result<models::ActionsListLabelsForSelfHostedRunnerForOrg200Response, Error<ActionsSlashAddCustomLabelsToSelfHostedRunnerForOrgError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_runner_id = runner_id;
    let p_actions_add_custom_labels_to_self_hosted_runner_for_org_request = actions_add_custom_labels_to_self_hosted_runner_for_org_request;

    let uri_str = format!("{}/orgs/{org}/actions/runners/{runner_id}/labels", configuration.base_path, org=crate::apis::urlencode(p_org), runner_id=p_runner_id);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_actions_add_custom_labels_to_self_hosted_runner_for_org_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ActionsListLabelsForSelfHostedRunnerForOrg200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ActionsListLabelsForSelfHostedRunnerForOrg200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashAddCustomLabelsToSelfHostedRunnerForOrgError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Adds custom labels to a self-hosted runner configured in a repository.  Authenticated users must have admin access to the organization to use this endpoint.  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
pub async fn actions_slash_add_custom_labels_to_self_hosted_runner_for_repo(configuration: &configuration::Configuration, owner: &str, repo: &str, runner_id: i32, actions_add_custom_labels_to_self_hosted_runner_for_org_request: models::ActionsAddCustomLabelsToSelfHostedRunnerForOrgRequest) -> Result<models::ActionsListLabelsForSelfHostedRunnerForOrg200Response, Error<ActionsSlashAddCustomLabelsToSelfHostedRunnerForRepoError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;
    let p_runner_id = runner_id;
    let p_actions_add_custom_labels_to_self_hosted_runner_for_org_request = actions_add_custom_labels_to_self_hosted_runner_for_org_request;

    let uri_str = format!("{}/repos/{owner}/{repo}/actions/runners/{runner_id}/labels", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo), runner_id=p_runner_id);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_actions_add_custom_labels_to_self_hosted_runner_for_org_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ActionsListLabelsForSelfHostedRunnerForOrg200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ActionsListLabelsForSelfHostedRunnerForOrg200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashAddCustomLabelsToSelfHostedRunnerForRepoError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Adds a repository to the list of repositories that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see \"[Create a self-hosted runner group for an organization](#create-a-self-hosted-runner-group-for-an-organization).\"  OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
pub async fn actions_slash_add_repo_access_to_self_hosted_runner_group_in_org(configuration: &configuration::Configuration, org: &str, runner_group_id: i32, repository_id: i32) -> Result<(), Error<ActionsSlashAddRepoAccessToSelfHostedRunnerGroupInOrgError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_runner_group_id = runner_group_id;
    let p_repository_id = repository_id;

    let uri_str = format!("{}/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}", configuration.base_path, org=crate::apis::urlencode(p_org), runner_group_id=p_runner_group_id, repository_id=p_repository_id);
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashAddRepoAccessToSelfHostedRunnerGroupInOrgError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Adds a repository to an organization secret when the `visibility` for repository access is set to `selected`. For more information about setting the visibility, see [Create or update an organization secret](https://docs.github.com/rest/actions/secrets#create-or-update-an-organization-secret).  Authenticated users must have collaborator access to a repository to create, update, or read secrets.  OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
pub async fn actions_slash_add_selected_repo_to_org_secret(configuration: &configuration::Configuration, org: &str, secret_name: &str, repository_id: i32) -> Result<(), Error<ActionsSlashAddSelectedRepoToOrgSecretError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_secret_name = secret_name;
    let p_repository_id = repository_id;

    let uri_str = format!("{}/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}", configuration.base_path, org=crate::apis::urlencode(p_org), secret_name=crate::apis::urlencode(p_secret_name), repository_id=p_repository_id);
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashAddSelectedRepoToOrgSecretError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Adds a repository to an organization variable that is available to selected repositories. Organization variables that are available to selected repositories have their `visibility` field set to `selected`.  Authenticated users must have collaborator access to a repository to create, update, or read secrets.  OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
pub async fn actions_slash_add_selected_repo_to_org_variable(configuration: &configuration::Configuration, org: &str, name: &str, repository_id: i32) -> Result<(), Error<ActionsSlashAddSelectedRepoToOrgVariableError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_name = name;
    let p_repository_id = repository_id;

    let uri_str = format!("{}/orgs/{org}/actions/variables/{name}/repositories/{repository_id}", configuration.base_path, org=crate::apis::urlencode(p_org), name=crate::apis::urlencode(p_name), repository_id=p_repository_id);
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashAddSelectedRepoToOrgVariableError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Adds a self-hosted runner to a runner group configured in an organization.  OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
pub async fn actions_slash_add_self_hosted_runner_to_group_for_org(configuration: &configuration::Configuration, org: &str, runner_group_id: i32, runner_id: i32) -> Result<(), Error<ActionsSlashAddSelfHostedRunnerToGroupForOrgError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_runner_group_id = runner_group_id;
    let p_runner_id = runner_id;

    let uri_str = format!("{}/orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}", configuration.base_path, org=crate::apis::urlencode(p_org), runner_group_id=p_runner_group_id, runner_id=p_runner_id);
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashAddSelfHostedRunnerToGroupForOrgError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Approves a workflow run for a pull request from a public fork of a first time contributor. For more information, see [\"Approving workflow runs from public forks](https://docs.github.com/actions/managing-workflow-runs/approving-workflow-runs-from-public-forks).\"  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
pub async fn actions_slash_approve_workflow_run(configuration: &configuration::Configuration, owner: &str, repo: &str, run_id: i32) -> Result<serde_json::Value, Error<ActionsSlashApproveWorkflowRunError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;
    let p_run_id = run_id;

    let uri_str = format!("{}/repos/{owner}/{repo}/actions/runs/{run_id}/approve", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo), run_id=p_run_id);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `serde_json::Value`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `serde_json::Value`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashApproveWorkflowRunError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Cancels a workflow run using its `id`.  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
pub async fn actions_slash_cancel_workflow_run(configuration: &configuration::Configuration, owner: &str, repo: &str, run_id: i32) -> Result<serde_json::Value, Error<ActionsSlashCancelWorkflowRunError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;
    let p_run_id = run_id;

    let uri_str = format!("{}/repos/{owner}/{repo}/actions/runs/{run_id}/cancel", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo), run_id=p_run_id);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `serde_json::Value`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `serde_json::Value`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashCancelWorkflowRunError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Create an environment variable that you can reference in a GitHub Actions workflow.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
pub async fn actions_slash_create_environment_variable(configuration: &configuration::Configuration, owner: &str, repo: &str, environment_name: &str, actions_create_repo_variable_request: models::ActionsCreateRepoVariableRequest) -> Result<serde_json::Value, Error<ActionsSlashCreateEnvironmentVariableError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;
    let p_environment_name = environment_name;
    let p_actions_create_repo_variable_request = actions_create_repo_variable_request;

    let uri_str = format!("{}/repos/{owner}/{repo}/environments/{environment_name}/variables", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo), environment_name=crate::apis::urlencode(p_environment_name));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_actions_create_repo_variable_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `serde_json::Value`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `serde_json::Value`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashCreateEnvironmentVariableError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Creates a GitHub-hosted runner for an organization. OAuth tokens and personal access tokens (classic) need the `manage_runners:org` scope to use this endpoint.
pub async fn actions_slash_create_hosted_runner_for_org(configuration: &configuration::Configuration, org: &str, actions_create_hosted_runner_for_org_request: models::ActionsCreateHostedRunnerForOrgRequest) -> Result<models::ActionsHostedRunner, Error<ActionsSlashCreateHostedRunnerForOrgError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_actions_create_hosted_runner_for_org_request = actions_create_hosted_runner_for_org_request;

    let uri_str = format!("{}/orgs/{org}/actions/hosted-runners", configuration.base_path, org=crate::apis::urlencode(p_org));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_actions_create_hosted_runner_for_org_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ActionsHostedRunner`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ActionsHostedRunner`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashCreateHostedRunnerForOrgError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Creates or updates an environment secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see \"[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api).\"  Authenticated users must have collaborator access to a repository to create, update, or read secrets.  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
pub async fn actions_slash_create_or_update_environment_secret(configuration: &configuration::Configuration, owner: &str, repo: &str, environment_name: &str, secret_name: &str, actions_create_or_update_environment_secret_request: models::ActionsCreateOrUpdateEnvironmentSecretRequest) -> Result<serde_json::Value, Error<ActionsSlashCreateOrUpdateEnvironmentSecretError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;
    let p_environment_name = environment_name;
    let p_secret_name = secret_name;
    let p_actions_create_or_update_environment_secret_request = actions_create_or_update_environment_secret_request;

    let uri_str = format!("{}/repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo), environment_name=crate::apis::urlencode(p_environment_name), secret_name=crate::apis::urlencode(p_secret_name));
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_actions_create_or_update_environment_secret_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `serde_json::Value`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `serde_json::Value`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashCreateOrUpdateEnvironmentSecretError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Creates or updates an organization secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see \"[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api).\"  Authenticated users must have collaborator access to a repository to create, update, or read secrets.  OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
pub async fn actions_slash_create_or_update_org_secret(configuration: &configuration::Configuration, org: &str, secret_name: &str, actions_create_or_update_org_secret_request: models::ActionsCreateOrUpdateOrgSecretRequest) -> Result<serde_json::Value, Error<ActionsSlashCreateOrUpdateOrgSecretError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_secret_name = secret_name;
    let p_actions_create_or_update_org_secret_request = actions_create_or_update_org_secret_request;

    let uri_str = format!("{}/orgs/{org}/actions/secrets/{secret_name}", configuration.base_path, org=crate::apis::urlencode(p_org), secret_name=crate::apis::urlencode(p_secret_name));
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_actions_create_or_update_org_secret_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `serde_json::Value`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `serde_json::Value`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashCreateOrUpdateOrgSecretError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Creates or updates a repository secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see \"[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api).\"  Authenticated users must have collaborator access to a repository to create, update, or read secrets.  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
pub async fn actions_slash_create_or_update_repo_secret(configuration: &configuration::Configuration, owner: &str, repo: &str, secret_name: &str, actions_create_or_update_repo_secret_request: models::ActionsCreateOrUpdateRepoSecretRequest) -> Result<serde_json::Value, Error<ActionsSlashCreateOrUpdateRepoSecretError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;
    let p_secret_name = secret_name;
    let p_actions_create_or_update_repo_secret_request = actions_create_or_update_repo_secret_request;

    let uri_str = format!("{}/repos/{owner}/{repo}/actions/secrets/{secret_name}", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo), secret_name=crate::apis::urlencode(p_secret_name));
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_actions_create_or_update_repo_secret_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `serde_json::Value`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `serde_json::Value`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashCreateOrUpdateRepoSecretError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Creates an organization variable that you can reference in a GitHub Actions workflow.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
pub async fn actions_slash_create_org_variable(configuration: &configuration::Configuration, org: &str, actions_create_org_variable_request: models::ActionsCreateOrgVariableRequest) -> Result<serde_json::Value, Error<ActionsSlashCreateOrgVariableError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_actions_create_org_variable_request = actions_create_org_variable_request;

    let uri_str = format!("{}/orgs/{org}/actions/variables", configuration.base_path, org=crate::apis::urlencode(p_org));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_actions_create_org_variable_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `serde_json::Value`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `serde_json::Value`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashCreateOrgVariableError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Returns a token that you can pass to the `config` script. The token expires after one hour.  For example, you can replace `TOKEN` in the following example with the registration token provided by this endpoint to configure your self-hosted runner:  ``` ./config.sh --url https://github.com/octo-org --token TOKEN ```  Authenticated users must have admin access to the organization to use this endpoint.  OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
pub async fn actions_slash_create_registration_token_for_org(configuration: &configuration::Configuration, org: &str) -> Result<models::AuthenticationToken, Error<ActionsSlashCreateRegistrationTokenForOrgError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;

    let uri_str = format!("{}/orgs/{org}/actions/runners/registration-token", configuration.base_path, org=crate::apis::urlencode(p_org));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::AuthenticationToken`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::AuthenticationToken`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashCreateRegistrationTokenForOrgError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Returns a token that you can pass to the `config` script. The token expires after one hour.  For example, you can replace `TOKEN` in the following example with the registration token provided by this endpoint to configure your self-hosted runner:  ``` ./config.sh --url https://github.com/octo-org --token TOKEN ```  Authenticated users must have admin access to the repository to use this endpoint.  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
pub async fn actions_slash_create_registration_token_for_repo(configuration: &configuration::Configuration, owner: &str, repo: &str) -> Result<models::AuthenticationToken, Error<ActionsSlashCreateRegistrationTokenForRepoError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;

    let uri_str = format!("{}/repos/{owner}/{repo}/actions/runners/registration-token", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::AuthenticationToken`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::AuthenticationToken`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashCreateRegistrationTokenForRepoError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Returns a token that you can pass to the `config` script to remove a self-hosted runner from an organization. The token expires after one hour.  For example, you can replace `TOKEN` in the following example with the registration token provided by this endpoint to remove your self-hosted runner from an organization:  ``` ./config.sh remove --token TOKEN ```  Authenticated users must have admin access to the organization to use this endpoint.  OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
pub async fn actions_slash_create_remove_token_for_org(configuration: &configuration::Configuration, org: &str) -> Result<models::AuthenticationToken, Error<ActionsSlashCreateRemoveTokenForOrgError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;

    let uri_str = format!("{}/orgs/{org}/actions/runners/remove-token", configuration.base_path, org=crate::apis::urlencode(p_org));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::AuthenticationToken`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::AuthenticationToken`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashCreateRemoveTokenForOrgError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Returns a token that you can pass to the `config` script to remove a self-hosted runner from an repository. The token expires after one hour.  For example, you can replace `TOKEN` in the following example with the registration token provided by this endpoint to remove your self-hosted runner from an organization:  ``` ./config.sh remove --token TOKEN ```  Authenticated users must have admin access to the repository to use this endpoint.  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
pub async fn actions_slash_create_remove_token_for_repo(configuration: &configuration::Configuration, owner: &str, repo: &str) -> Result<models::AuthenticationToken, Error<ActionsSlashCreateRemoveTokenForRepoError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;

    let uri_str = format!("{}/repos/{owner}/{repo}/actions/runners/remove-token", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::AuthenticationToken`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::AuthenticationToken`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashCreateRemoveTokenForRepoError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Creates a repository variable that you can reference in a GitHub Actions workflow.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
pub async fn actions_slash_create_repo_variable(configuration: &configuration::Configuration, owner: &str, repo: &str, actions_create_repo_variable_request: models::ActionsCreateRepoVariableRequest) -> Result<serde_json::Value, Error<ActionsSlashCreateRepoVariableError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;
    let p_actions_create_repo_variable_request = actions_create_repo_variable_request;

    let uri_str = format!("{}/repos/{owner}/{repo}/actions/variables", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_actions_create_repo_variable_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `serde_json::Value`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `serde_json::Value`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashCreateRepoVariableError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Creates a new self-hosted runner group for an organization.  OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
pub async fn actions_slash_create_self_hosted_runner_group_for_org(configuration: &configuration::Configuration, org: &str, actions_create_self_hosted_runner_group_for_org_request: models::ActionsCreateSelfHostedRunnerGroupForOrgRequest) -> Result<models::RunnerGroupsOrg, Error<ActionsSlashCreateSelfHostedRunnerGroupForOrgError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_actions_create_self_hosted_runner_group_for_org_request = actions_create_self_hosted_runner_group_for_org_request;

    let uri_str = format!("{}/orgs/{org}/actions/runner-groups", configuration.base_path, org=crate::apis::urlencode(p_org));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_actions_create_self_hosted_runner_group_for_org_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::RunnerGroupsOrg`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::RunnerGroupsOrg`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashCreateSelfHostedRunnerGroupForOrgError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// You can use this endpoint to manually trigger a GitHub Actions workflow run. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.  You must configure your GitHub Actions workflow to run when the [`workflow_dispatch` webhook](/developers/webhooks-and-events/webhook-events-and-payloads#workflow_dispatch) event occurs. The `inputs` are configured in the workflow file. For more information about how to configure the `workflow_dispatch` event in the workflow file, see \"[Events that trigger workflows](/actions/reference/events-that-trigger-workflows#workflow_dispatch).\"  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
pub async fn actions_slash_create_workflow_dispatch(configuration: &configuration::Configuration, owner: &str, repo: &str, workflow_id: &str, actions_create_workflow_dispatch_request: models::ActionsCreateWorkflowDispatchRequest) -> Result<(), Error<ActionsSlashCreateWorkflowDispatchError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;
    let p_workflow_id = workflow_id;
    let p_actions_create_workflow_dispatch_request = actions_create_workflow_dispatch_request;

    let uri_str = format!("{}/repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo), workflow_id=p_workflow_id.to_string());
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_actions_create_workflow_dispatch_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashCreateWorkflowDispatchError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Deletes a GitHub Actions cache for a repository, using a cache ID.  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
pub async fn actions_slash_delete_actions_cache_by_id(configuration: &configuration::Configuration, owner: &str, repo: &str, cache_id: i32) -> Result<(), Error<ActionsSlashDeleteActionsCacheByIdError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;
    let p_cache_id = cache_id;

    let uri_str = format!("{}/repos/{owner}/{repo}/actions/caches/{cache_id}", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo), cache_id=p_cache_id);
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashDeleteActionsCacheByIdError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Deletes one or more GitHub Actions caches for a repository, using a complete cache key. By default, all caches that match the provided key are deleted, but you can optionally provide a Git ref to restrict deletions to caches that match both the provided key and the Git ref.  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
pub async fn actions_slash_delete_actions_cache_by_key(configuration: &configuration::Configuration, owner: &str, repo: &str, key: &str, r#ref: Option<&str>) -> Result<models::ActionsCacheList, Error<ActionsSlashDeleteActionsCacheByKeyError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;
    let p_key = key;
    let p_ref = r#ref;

    let uri_str = format!("{}/repos/{owner}/{repo}/actions/caches", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo));
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    req_builder = req_builder.query(&[("key", &p_key.to_string())]);
    if let Some(ref param_value) = p_ref {
        req_builder = req_builder.query(&[("ref", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ActionsCacheList`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ActionsCacheList`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashDeleteActionsCacheByKeyError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Deletes an artifact for a workflow run. OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
pub async fn actions_slash_delete_artifact(configuration: &configuration::Configuration, owner: &str, repo: &str, artifact_id: i32) -> Result<(), Error<ActionsSlashDeleteArtifactError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;
    let p_artifact_id = artifact_id;

    let uri_str = format!("{}/repos/{owner}/{repo}/actions/artifacts/{artifact_id}", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo), artifact_id=p_artifact_id);
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashDeleteArtifactError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Deletes a secret in an environment using the secret name.  Authenticated users must have collaborator access to a repository to create, update, or read secrets.  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
pub async fn actions_slash_delete_environment_secret(configuration: &configuration::Configuration, owner: &str, repo: &str, environment_name: &str, secret_name: &str) -> Result<(), Error<ActionsSlashDeleteEnvironmentSecretError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;
    let p_environment_name = environment_name;
    let p_secret_name = secret_name;

    let uri_str = format!("{}/repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo), environment_name=crate::apis::urlencode(p_environment_name), secret_name=crate::apis::urlencode(p_secret_name));
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashDeleteEnvironmentSecretError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Deletes an environment variable using the variable name.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
pub async fn actions_slash_delete_environment_variable(configuration: &configuration::Configuration, owner: &str, repo: &str, name: &str, environment_name: &str) -> Result<(), Error<ActionsSlashDeleteEnvironmentVariableError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;
    let p_name = name;
    let p_environment_name = environment_name;

    let uri_str = format!("{}/repos/{owner}/{repo}/environments/{environment_name}/variables/{name}", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo), name=crate::apis::urlencode(p_name), environment_name=crate::apis::urlencode(p_environment_name));
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashDeleteEnvironmentVariableError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Deletes a GitHub-hosted runner for an organization.
pub async fn actions_slash_delete_hosted_runner_for_org(configuration: &configuration::Configuration, org: &str, hosted_runner_id: i32) -> Result<models::ActionsHostedRunner, Error<ActionsSlashDeleteHostedRunnerForOrgError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_hosted_runner_id = hosted_runner_id;

    let uri_str = format!("{}/orgs/{org}/actions/hosted-runners/{hosted_runner_id}", configuration.base_path, org=crate::apis::urlencode(p_org), hosted_runner_id=p_hosted_runner_id);
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ActionsHostedRunner`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ActionsHostedRunner`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashDeleteHostedRunnerForOrgError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Deletes a secret in an organization using the secret name.  Authenticated users must have collaborator access to a repository to create, update, or read secrets.  OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
pub async fn actions_slash_delete_org_secret(configuration: &configuration::Configuration, org: &str, secret_name: &str) -> Result<(), Error<ActionsSlashDeleteOrgSecretError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_secret_name = secret_name;

    let uri_str = format!("{}/orgs/{org}/actions/secrets/{secret_name}", configuration.base_path, org=crate::apis::urlencode(p_org), secret_name=crate::apis::urlencode(p_secret_name));
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashDeleteOrgSecretError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Deletes an organization variable using the variable name.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
pub async fn actions_slash_delete_org_variable(configuration: &configuration::Configuration, org: &str, name: &str) -> Result<(), Error<ActionsSlashDeleteOrgVariableError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_name = name;

    let uri_str = format!("{}/orgs/{org}/actions/variables/{name}", configuration.base_path, org=crate::apis::urlencode(p_org), name=crate::apis::urlencode(p_name));
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashDeleteOrgVariableError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Deletes a secret in a repository using the secret name.  Authenticated users must have collaborator access to a repository to create, update, or read secrets.  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
pub async fn actions_slash_delete_repo_secret(configuration: &configuration::Configuration, owner: &str, repo: &str, secret_name: &str) -> Result<(), Error<ActionsSlashDeleteRepoSecretError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;
    let p_secret_name = secret_name;

    let uri_str = format!("{}/repos/{owner}/{repo}/actions/secrets/{secret_name}", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo), secret_name=crate::apis::urlencode(p_secret_name));
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashDeleteRepoSecretError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Deletes a repository variable using the variable name.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
pub async fn actions_slash_delete_repo_variable(configuration: &configuration::Configuration, owner: &str, repo: &str, name: &str) -> Result<(), Error<ActionsSlashDeleteRepoVariableError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;
    let p_name = name;

    let uri_str = format!("{}/repos/{owner}/{repo}/actions/variables/{name}", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo), name=crate::apis::urlencode(p_name));
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashDeleteRepoVariableError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Forces the removal of a self-hosted runner from an organization. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.  Authenticated users must have admin access to the organization to use this endpoint.  OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
pub async fn actions_slash_delete_self_hosted_runner_from_org(configuration: &configuration::Configuration, org: &str, runner_id: i32) -> Result<(), Error<ActionsSlashDeleteSelfHostedRunnerFromOrgError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_runner_id = runner_id;

    let uri_str = format!("{}/orgs/{org}/actions/runners/{runner_id}", configuration.base_path, org=crate::apis::urlencode(p_org), runner_id=p_runner_id);
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashDeleteSelfHostedRunnerFromOrgError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Forces the removal of a self-hosted runner from a repository. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.  Authenticated users must have admin access to the repository to use this endpoint.  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
pub async fn actions_slash_delete_self_hosted_runner_from_repo(configuration: &configuration::Configuration, owner: &str, repo: &str, runner_id: i32) -> Result<(), Error<ActionsSlashDeleteSelfHostedRunnerFromRepoError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;
    let p_runner_id = runner_id;

    let uri_str = format!("{}/repos/{owner}/{repo}/actions/runners/{runner_id}", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo), runner_id=p_runner_id);
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashDeleteSelfHostedRunnerFromRepoError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Deletes a self-hosted runner group for an organization.  OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
pub async fn actions_slash_delete_self_hosted_runner_group_from_org(configuration: &configuration::Configuration, org: &str, runner_group_id: i32) -> Result<(), Error<ActionsSlashDeleteSelfHostedRunnerGroupFromOrgError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_runner_group_id = runner_group_id;

    let uri_str = format!("{}/orgs/{org}/actions/runner-groups/{runner_group_id}", configuration.base_path, org=crate::apis::urlencode(p_org), runner_group_id=p_runner_group_id);
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashDeleteSelfHostedRunnerGroupFromOrgError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Deletes a specific workflow run.  Anyone with write access to the repository can use this endpoint.  If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
pub async fn actions_slash_delete_workflow_run(configuration: &configuration::Configuration, owner: &str, repo: &str, run_id: i32) -> Result<(), Error<ActionsSlashDeleteWorkflowRunError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;
    let p_run_id = run_id;

    let uri_str = format!("{}/repos/{owner}/{repo}/actions/runs/{run_id}", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo), run_id=p_run_id);
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashDeleteWorkflowRunError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Deletes all logs for a workflow run.  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
pub async fn actions_slash_delete_workflow_run_logs(configuration: &configuration::Configuration, owner: &str, repo: &str, run_id: i32) -> Result<(), Error<ActionsSlashDeleteWorkflowRunLogsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;
    let p_run_id = run_id;

    let uri_str = format!("{}/repos/{owner}/{repo}/actions/runs/{run_id}/logs", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo), run_id=p_run_id);
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashDeleteWorkflowRunLogsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Removes a repository from the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\"  OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
pub async fn actions_slash_disable_selected_repository_github_actions_organization(configuration: &configuration::Configuration, org: &str, repository_id: i32) -> Result<(), Error<ActionsSlashDisableSelectedRepositoryGithubActionsOrganizationError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_repository_id = repository_id;

    let uri_str = format!("{}/orgs/{org}/actions/permissions/repositories/{repository_id}", configuration.base_path, org=crate::apis::urlencode(p_org), repository_id=p_repository_id);
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashDisableSelectedRepositoryGithubActionsOrganizationError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Disables a workflow and sets the `state` of the workflow to `disabled_manually`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
pub async fn actions_slash_disable_workflow(configuration: &configuration::Configuration, owner: &str, repo: &str, workflow_id: &str) -> Result<(), Error<ActionsSlashDisableWorkflowError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;
    let p_workflow_id = workflow_id;

    let uri_str = format!("{}/repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo), workflow_id=p_workflow_id.to_string());
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashDisableWorkflowError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Gets a redirect URL to download an archive for a repository. This URL expires after 1 minute. Look for `Location:` in the response header to find the URL for the download. The `:archive_format` must be `zip`.  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
pub async fn actions_slash_download_artifact(configuration: &configuration::Configuration, owner: &str, repo: &str, artifact_id: i32, archive_format: &str) -> Result<(), Error<ActionsSlashDownloadArtifactError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;
    let p_artifact_id = artifact_id;
    let p_archive_format = archive_format;

    let uri_str = format!("{}/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo), artifact_id=p_artifact_id, archive_format=crate::apis::urlencode(p_archive_format));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashDownloadArtifactError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Gets a redirect URL to download a plain text file of logs for a workflow job. This link expires after 1 minute. Look for `Location:` in the response header to find the URL for the download.  Anyone with read access to the repository can use this endpoint.  If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
pub async fn actions_slash_download_job_logs_for_workflow_run(configuration: &configuration::Configuration, owner: &str, repo: &str, job_id: i32) -> Result<(), Error<ActionsSlashDownloadJobLogsForWorkflowRunError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;
    let p_job_id = job_id;

    let uri_str = format!("{}/repos/{owner}/{repo}/actions/jobs/{job_id}/logs", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo), job_id=p_job_id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashDownloadJobLogsForWorkflowRunError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Gets a redirect URL to download an archive of log files for a specific workflow run attempt. This link expires after 1 minute. Look for `Location:` in the response header to find the URL for the download.  Anyone with read access to the repository can use this endpoint.  If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
pub async fn actions_slash_download_workflow_run_attempt_logs(configuration: &configuration::Configuration, owner: &str, repo: &str, run_id: i32, attempt_number: i32) -> Result<(), Error<ActionsSlashDownloadWorkflowRunAttemptLogsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;
    let p_run_id = run_id;
    let p_attempt_number = attempt_number;

    let uri_str = format!("{}/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo), run_id=p_run_id, attempt_number=p_attempt_number);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashDownloadWorkflowRunAttemptLogsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Gets a redirect URL to download an archive of log files for a workflow run. This link expires after 1 minute. Look for `Location:` in the response header to find the URL for the download.  Anyone with read access to the repository can use this endpoint.  If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
pub async fn actions_slash_download_workflow_run_logs(configuration: &configuration::Configuration, owner: &str, repo: &str, run_id: i32) -> Result<(), Error<ActionsSlashDownloadWorkflowRunLogsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;
    let p_run_id = run_id;

    let uri_str = format!("{}/repos/{owner}/{repo}/actions/runs/{run_id}/logs", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo), run_id=p_run_id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashDownloadWorkflowRunLogsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Adds a repository to the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\"  OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
pub async fn actions_slash_enable_selected_repository_github_actions_organization(configuration: &configuration::Configuration, org: &str, repository_id: i32) -> Result<(), Error<ActionsSlashEnableSelectedRepositoryGithubActionsOrganizationError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_repository_id = repository_id;

    let uri_str = format!("{}/orgs/{org}/actions/permissions/repositories/{repository_id}", configuration.base_path, org=crate::apis::urlencode(p_org), repository_id=p_repository_id);
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashEnableSelectedRepositoryGithubActionsOrganizationError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Enables a workflow and sets the `state` of the workflow to `active`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
pub async fn actions_slash_enable_workflow(configuration: &configuration::Configuration, owner: &str, repo: &str, workflow_id: &str) -> Result<(), Error<ActionsSlashEnableWorkflowError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;
    let p_workflow_id = workflow_id;

    let uri_str = format!("{}/repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo), workflow_id=p_workflow_id.to_string());
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashEnableWorkflowError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Cancels a workflow run and bypasses conditions that would otherwise cause a workflow execution to continue, such as an `always()` condition on a job. You should only use this endpoint to cancel a workflow run when the workflow run is not responding to [`POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel`](/rest/actions/workflow-runs#cancel-a-workflow-run).  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
pub async fn actions_slash_force_cancel_workflow_run(configuration: &configuration::Configuration, owner: &str, repo: &str, run_id: i32) -> Result<serde_json::Value, Error<ActionsSlashForceCancelWorkflowRunError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;
    let p_run_id = run_id;

    let uri_str = format!("{}/repos/{owner}/{repo}/actions/runs/{run_id}/force-cancel", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo), run_id=p_run_id);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `serde_json::Value`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `serde_json::Value`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashForceCancelWorkflowRunError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Generates a configuration that can be passed to the runner application at startup.  The authenticated user must have admin access to the organization.  OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
pub async fn actions_slash_generate_runner_jitconfig_for_org(configuration: &configuration::Configuration, org: &str, actions_generate_runner_jitconfig_for_org_request: models::ActionsGenerateRunnerJitconfigForOrgRequest) -> Result<models::ActionsGenerateRunnerJitconfigForOrg201Response, Error<ActionsSlashGenerateRunnerJitconfigForOrgError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_actions_generate_runner_jitconfig_for_org_request = actions_generate_runner_jitconfig_for_org_request;

    let uri_str = format!("{}/orgs/{org}/actions/runners/generate-jitconfig", configuration.base_path, org=crate::apis::urlencode(p_org));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_actions_generate_runner_jitconfig_for_org_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ActionsGenerateRunnerJitconfigForOrg201Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ActionsGenerateRunnerJitconfigForOrg201Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashGenerateRunnerJitconfigForOrgError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Generates a configuration that can be passed to the runner application at startup.  The authenticated user must have admin access to the repository.  OAuth tokens and personal access tokens (classic) need the`repo` scope to use this endpoint.
pub async fn actions_slash_generate_runner_jitconfig_for_repo(configuration: &configuration::Configuration, owner: &str, repo: &str, actions_generate_runner_jitconfig_for_org_request: models::ActionsGenerateRunnerJitconfigForOrgRequest) -> Result<models::ActionsGenerateRunnerJitconfigForOrg201Response, Error<ActionsSlashGenerateRunnerJitconfigForRepoError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;
    let p_actions_generate_runner_jitconfig_for_org_request = actions_generate_runner_jitconfig_for_org_request;

    let uri_str = format!("{}/repos/{owner}/{repo}/actions/runners/generate-jitconfig", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_actions_generate_runner_jitconfig_for_org_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ActionsGenerateRunnerJitconfigForOrg201Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ActionsGenerateRunnerJitconfigForOrg201Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashGenerateRunnerJitconfigForRepoError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Lists the GitHub Actions caches for a repository.  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
pub async fn actions_slash_get_actions_cache_list(configuration: &configuration::Configuration, owner: &str, repo: &str, per_page: Option<i32>, page: Option<i32>, r#ref: Option<&str>, key: Option<&str>, sort: Option<&str>, direction: Option<&str>) -> Result<models::ActionsCacheList, Error<ActionsSlashGetActionsCacheListError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;
    let p_per_page = per_page;
    let p_page = page;
    let p_ref = r#ref;
    let p_key = key;
    let p_sort = sort;
    let p_direction = direction;

    let uri_str = format!("{}/repos/{owner}/{repo}/actions/caches", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_per_page {
        req_builder = req_builder.query(&[("per_page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_ref {
        req_builder = req_builder.query(&[("ref", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_key {
        req_builder = req_builder.query(&[("key", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_sort {
        req_builder = req_builder.query(&[("sort", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_direction {
        req_builder = req_builder.query(&[("direction", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ActionsCacheList`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ActionsCacheList`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashGetActionsCacheListError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Gets GitHub Actions cache usage for a repository. The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.  Anyone with read access to the repository can use this endpoint.  If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
pub async fn actions_slash_get_actions_cache_usage(configuration: &configuration::Configuration, owner: &str, repo: &str) -> Result<models::ActionsCacheUsageByRepository, Error<ActionsSlashGetActionsCacheUsageError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;

    let uri_str = format!("{}/repos/{owner}/{repo}/actions/cache/usage", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ActionsCacheUsageByRepository`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ActionsCacheUsageByRepository`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashGetActionsCacheUsageError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Lists repositories and their GitHub Actions cache usage for an organization. The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.  OAuth tokens and personal access tokens (classic) need the `read:org` scope to use this endpoint.
pub async fn actions_slash_get_actions_cache_usage_by_repo_for_org(configuration: &configuration::Configuration, org: &str, per_page: Option<i32>, page: Option<i32>) -> Result<models::ActionsGetActionsCacheUsageByRepoForOrg200Response, Error<ActionsSlashGetActionsCacheUsageByRepoForOrgError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_per_page = per_page;
    let p_page = page;

    let uri_str = format!("{}/orgs/{org}/actions/cache/usage-by-repository", configuration.base_path, org=crate::apis::urlencode(p_org));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_per_page {
        req_builder = req_builder.query(&[("per_page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ActionsGetActionsCacheUsageByRepoForOrg200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ActionsGetActionsCacheUsageByRepoForOrg200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashGetActionsCacheUsageByRepoForOrgError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Gets the total GitHub Actions cache usage for an organization. The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.  OAuth tokens and personal access tokens (classic) need the `read:org` scope to use this endpoint.
pub async fn actions_slash_get_actions_cache_usage_for_org(configuration: &configuration::Configuration, org: &str) -> Result<models::ActionsCacheUsageOrgEnterprise, Error<ActionsSlashGetActionsCacheUsageForOrgError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;

    let uri_str = format!("{}/orgs/{org}/actions/cache/usage", configuration.base_path, org=crate::apis::urlencode(p_org));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ActionsCacheUsageOrgEnterprise`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ActionsCacheUsageOrgEnterprise`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashGetActionsCacheUsageForOrgError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Gets the selected actions and reusable workflows that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\"  OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
pub async fn actions_slash_get_allowed_actions_organization(configuration: &configuration::Configuration, org: &str) -> Result<models::SelectedActions, Error<ActionsSlashGetAllowedActionsOrganizationError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;

    let uri_str = format!("{}/orgs/{org}/actions/permissions/selected-actions", configuration.base_path, org=crate::apis::urlencode(p_org));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::SelectedActions`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::SelectedActions`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashGetAllowedActionsOrganizationError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Gets the settings for selected actions and reusable workflows that are allowed in a repository. To use this endpoint, the repository policy for `allowed_actions` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository).\"  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
pub async fn actions_slash_get_allowed_actions_repository(configuration: &configuration::Configuration, owner: &str, repo: &str) -> Result<models::SelectedActions, Error<ActionsSlashGetAllowedActionsRepositoryError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;

    let uri_str = format!("{}/repos/{owner}/{repo}/actions/permissions/selected-actions", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::SelectedActions`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::SelectedActions`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashGetAllowedActionsRepositoryError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Gets a specific artifact for a workflow run.  Anyone with read access to the repository can use this endpoint.  If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
pub async fn actions_slash_get_artifact(configuration: &configuration::Configuration, owner: &str, repo: &str, artifact_id: i32) -> Result<models::Artifact, Error<ActionsSlashGetArtifactError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;
    let p_artifact_id = artifact_id;

    let uri_str = format!("{}/repos/{owner}/{repo}/actions/artifacts/{artifact_id}", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo), artifact_id=p_artifact_id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::Artifact`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::Artifact`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashGetArtifactError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Gets the customization template for an OpenID Connect (OIDC) subject claim.  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
pub async fn actions_slash_get_custom_oidc_sub_claim_for_repo(configuration: &configuration::Configuration, owner: &str, repo: &str) -> Result<models::OidcCustomSubRepo, Error<ActionsSlashGetCustomOidcSubClaimForRepoError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;

    let uri_str = format!("{}/repos/{owner}/{repo}/actions/oidc/customization/sub", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::OidcCustomSubRepo`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::OidcCustomSubRepo`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashGetCustomOidcSubClaimForRepoError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get the public key for an environment, which you need to encrypt environment secrets. You need to encrypt a secret before you can create or update secrets.  Anyone with read access to the repository can use this endpoint.  If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
pub async fn actions_slash_get_environment_public_key(configuration: &configuration::Configuration, owner: &str, repo: &str, environment_name: &str) -> Result<models::ActionsPublicKey, Error<ActionsSlashGetEnvironmentPublicKeyError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;
    let p_environment_name = environment_name;

    let uri_str = format!("{}/repos/{owner}/{repo}/environments/{environment_name}/secrets/public-key", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo), environment_name=crate::apis::urlencode(p_environment_name));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ActionsPublicKey`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ActionsPublicKey`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashGetEnvironmentPublicKeyError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Gets a single environment secret without revealing its encrypted value.  Authenticated users must have collaborator access to a repository to create, update, or read secrets.  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
pub async fn actions_slash_get_environment_secret(configuration: &configuration::Configuration, owner: &str, repo: &str, environment_name: &str, secret_name: &str) -> Result<models::ActionsSecret, Error<ActionsSlashGetEnvironmentSecretError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;
    let p_environment_name = environment_name;
    let p_secret_name = secret_name;

    let uri_str = format!("{}/repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo), environment_name=crate::apis::urlencode(p_environment_name), secret_name=crate::apis::urlencode(p_secret_name));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ActionsSecret`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ActionsSecret`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashGetEnvironmentSecretError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Gets a specific variable in an environment.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
pub async fn actions_slash_get_environment_variable(configuration: &configuration::Configuration, owner: &str, repo: &str, environment_name: &str, name: &str) -> Result<models::ActionsVariable, Error<ActionsSlashGetEnvironmentVariableError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;
    let p_environment_name = environment_name;
    let p_name = name;

    let uri_str = format!("{}/repos/{owner}/{repo}/environments/{environment_name}/variables/{name}", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo), environment_name=crate::apis::urlencode(p_environment_name), name=crate::apis::urlencode(p_name));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ActionsVariable`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ActionsVariable`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashGetEnvironmentVariableError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Gets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in an organization, as well as whether GitHub Actions can submit approving pull request reviews. For more information, see \"[Setting the permissions of the GITHUB_TOKEN for your organization](https://docs.github.com/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#setting-the-permissions-of-the-github_token-for-your-organization).\"  OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
pub async fn actions_slash_get_github_actions_default_workflow_permissions_organization(configuration: &configuration::Configuration, org: &str) -> Result<models::ActionsGetDefaultWorkflowPermissions, Error<ActionsSlashGetGithubActionsDefaultWorkflowPermissionsOrganizationError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;

    let uri_str = format!("{}/orgs/{org}/actions/permissions/workflow", configuration.base_path, org=crate::apis::urlencode(p_org));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ActionsGetDefaultWorkflowPermissions`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ActionsGetDefaultWorkflowPermissions`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashGetGithubActionsDefaultWorkflowPermissionsOrganizationError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Gets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in a repository, as well as if GitHub Actions can submit approving pull request reviews. For more information, see \"[Setting the permissions of the GITHUB_TOKEN for your repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository).\"  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
pub async fn actions_slash_get_github_actions_default_workflow_permissions_repository(configuration: &configuration::Configuration, owner: &str, repo: &str) -> Result<models::ActionsGetDefaultWorkflowPermissions, Error<ActionsSlashGetGithubActionsDefaultWorkflowPermissionsRepositoryError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;

    let uri_str = format!("{}/repos/{owner}/{repo}/actions/permissions/workflow", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ActionsGetDefaultWorkflowPermissions`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ActionsGetDefaultWorkflowPermissions`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashGetGithubActionsDefaultWorkflowPermissionsRepositoryError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Gets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an organization.  OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
pub async fn actions_slash_get_github_actions_permissions_organization(configuration: &configuration::Configuration, org: &str) -> Result<models::ActionsOrganizationPermissions, Error<ActionsSlashGetGithubActionsPermissionsOrganizationError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;

    let uri_str = format!("{}/orgs/{org}/actions/permissions", configuration.base_path, org=crate::apis::urlencode(p_org));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ActionsOrganizationPermissions`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ActionsOrganizationPermissions`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashGetGithubActionsPermissionsOrganizationError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Gets the GitHub Actions permissions policy for a repository, including whether GitHub Actions is enabled and the actions and reusable workflows allowed to run in the repository.  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
pub async fn actions_slash_get_github_actions_permissions_repository(configuration: &configuration::Configuration, owner: &str, repo: &str) -> Result<models::ActionsRepositoryPermissions, Error<ActionsSlashGetGithubActionsPermissionsRepositoryError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;

    let uri_str = format!("{}/repos/{owner}/{repo}/actions/permissions", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ActionsRepositoryPermissions`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ActionsRepositoryPermissions`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashGetGithubActionsPermissionsRepositoryError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Gets a GitHub-hosted runner configured in an organization.  OAuth app tokens and personal access tokens (classic) need the `manage_runners:org` scope to use this endpoint.
pub async fn actions_slash_get_hosted_runner_for_org(configuration: &configuration::Configuration, org: &str, hosted_runner_id: i32) -> Result<models::ActionsHostedRunner, Error<ActionsSlashGetHostedRunnerForOrgError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_hosted_runner_id = hosted_runner_id;

    let uri_str = format!("{}/orgs/{org}/actions/hosted-runners/{hosted_runner_id}", configuration.base_path, org=crate::apis::urlencode(p_org), hosted_runner_id=p_hosted_runner_id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ActionsHostedRunner`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ActionsHostedRunner`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashGetHostedRunnerForOrgError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get the list of GitHub-owned images available for GitHub-hosted runners for an organization.
pub async fn actions_slash_get_hosted_runners_github_owned_images_for_org(configuration: &configuration::Configuration, org: &str) -> Result<models::ActionsGetHostedRunnersGithubOwnedImagesForOrg200Response, Error<ActionsSlashGetHostedRunnersGithubOwnedImagesForOrgError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;

    let uri_str = format!("{}/orgs/{org}/actions/hosted-runners/images/github-owned", configuration.base_path, org=crate::apis::urlencode(p_org));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ActionsGetHostedRunnersGithubOwnedImagesForOrg200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ActionsGetHostedRunnersGithubOwnedImagesForOrg200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashGetHostedRunnersGithubOwnedImagesForOrgError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get the GitHub-hosted runners limits for an organization.
pub async fn actions_slash_get_hosted_runners_limits_for_org(configuration: &configuration::Configuration, org: &str) -> Result<models::ActionsHostedRunnerLimits, Error<ActionsSlashGetHostedRunnersLimitsForOrgError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;

    let uri_str = format!("{}/orgs/{org}/actions/hosted-runners/limits", configuration.base_path, org=crate::apis::urlencode(p_org));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ActionsHostedRunnerLimits`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ActionsHostedRunnerLimits`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashGetHostedRunnersLimitsForOrgError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get the list of machine specs available for GitHub-hosted runners for an organization.
pub async fn actions_slash_get_hosted_runners_machine_specs_for_org(configuration: &configuration::Configuration, org: &str) -> Result<models::ActionsGetHostedRunnersMachineSpecsForOrg200Response, Error<ActionsSlashGetHostedRunnersMachineSpecsForOrgError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;

    let uri_str = format!("{}/orgs/{org}/actions/hosted-runners/machine-sizes", configuration.base_path, org=crate::apis::urlencode(p_org));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ActionsGetHostedRunnersMachineSpecsForOrg200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ActionsGetHostedRunnersMachineSpecsForOrg200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashGetHostedRunnersMachineSpecsForOrgError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get the list of partner images available for GitHub-hosted runners for an organization.
pub async fn actions_slash_get_hosted_runners_partner_images_for_org(configuration: &configuration::Configuration, org: &str) -> Result<models::ActionsGetHostedRunnersGithubOwnedImagesForOrg200Response, Error<ActionsSlashGetHostedRunnersPartnerImagesForOrgError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;

    let uri_str = format!("{}/orgs/{org}/actions/hosted-runners/images/partner", configuration.base_path, org=crate::apis::urlencode(p_org));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ActionsGetHostedRunnersGithubOwnedImagesForOrg200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ActionsGetHostedRunnersGithubOwnedImagesForOrg200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashGetHostedRunnersPartnerImagesForOrgError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get the list of platforms available for GitHub-hosted runners for an organization.
pub async fn actions_slash_get_hosted_runners_platforms_for_org(configuration: &configuration::Configuration, org: &str) -> Result<models::ActionsGetHostedRunnersPlatformsForOrg200Response, Error<ActionsSlashGetHostedRunnersPlatformsForOrgError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;

    let uri_str = format!("{}/orgs/{org}/actions/hosted-runners/platforms", configuration.base_path, org=crate::apis::urlencode(p_org));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ActionsGetHostedRunnersPlatformsForOrg200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ActionsGetHostedRunnersPlatformsForOrg200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashGetHostedRunnersPlatformsForOrgError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Gets a specific job in a workflow run.  Anyone with read access to the repository can use this endpoint.  If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
pub async fn actions_slash_get_job_for_workflow_run(configuration: &configuration::Configuration, owner: &str, repo: &str, job_id: i32) -> Result<models::Job, Error<ActionsSlashGetJobForWorkflowRunError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;
    let p_job_id = job_id;

    let uri_str = format!("{}/repos/{owner}/{repo}/actions/jobs/{job_id}", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo), job_id=p_job_id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::Job`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::Job`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashGetJobForWorkflowRunError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets.  The authenticated user must have collaborator access to a repository to create, update, or read secrets.  OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
pub async fn actions_slash_get_org_public_key(configuration: &configuration::Configuration, org: &str) -> Result<models::ActionsPublicKey, Error<ActionsSlashGetOrgPublicKeyError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;

    let uri_str = format!("{}/orgs/{org}/actions/secrets/public-key", configuration.base_path, org=crate::apis::urlencode(p_org));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ActionsPublicKey`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ActionsPublicKey`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashGetOrgPublicKeyError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Gets a single organization secret without revealing its encrypted value.  The authenticated user must have collaborator access to a repository to create, update, or read secrets  OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
pub async fn actions_slash_get_org_secret(configuration: &configuration::Configuration, org: &str, secret_name: &str) -> Result<models::OrganizationActionsSecret, Error<ActionsSlashGetOrgSecretError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_secret_name = secret_name;

    let uri_str = format!("{}/orgs/{org}/actions/secrets/{secret_name}", configuration.base_path, org=crate::apis::urlencode(p_org), secret_name=crate::apis::urlencode(p_secret_name));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::OrganizationActionsSecret`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::OrganizationActionsSecret`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashGetOrgSecretError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Gets a specific variable in an organization.  The authenticated user must have collaborator access to a repository to create, update, or read variables.  OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
pub async fn actions_slash_get_org_variable(configuration: &configuration::Configuration, org: &str, name: &str) -> Result<models::OrganizationActionsVariable, Error<ActionsSlashGetOrgVariableError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_name = name;

    let uri_str = format!("{}/orgs/{org}/actions/variables/{name}", configuration.base_path, org=crate::apis::urlencode(p_org), name=crate::apis::urlencode(p_name));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::OrganizationActionsVariable`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::OrganizationActionsVariable`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashGetOrgVariableError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get all deployment environments for a workflow run that are waiting for protection rules to pass.  Anyone with read access to the repository can use this endpoint.  If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
pub async fn actions_slash_get_pending_deployments_for_run(configuration: &configuration::Configuration, owner: &str, repo: &str, run_id: i32) -> Result<Vec<models::PendingDeployment>, Error<ActionsSlashGetPendingDeploymentsForRunError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;
    let p_run_id = run_id;

    let uri_str = format!("{}/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo), run_id=p_run_id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::PendingDeployment&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::PendingDeployment&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashGetPendingDeploymentsForRunError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets.  Anyone with read access to the repository can use this endpoint.  If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
pub async fn actions_slash_get_repo_public_key(configuration: &configuration::Configuration, owner: &str, repo: &str) -> Result<models::ActionsPublicKey, Error<ActionsSlashGetRepoPublicKeyError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;

    let uri_str = format!("{}/repos/{owner}/{repo}/actions/secrets/public-key", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ActionsPublicKey`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ActionsPublicKey`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashGetRepoPublicKeyError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Gets a single repository secret without revealing its encrypted value.  The authenticated user must have collaborator access to the repository to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
pub async fn actions_slash_get_repo_secret(configuration: &configuration::Configuration, owner: &str, repo: &str, secret_name: &str) -> Result<models::ActionsSecret, Error<ActionsSlashGetRepoSecretError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;
    let p_secret_name = secret_name;

    let uri_str = format!("{}/repos/{owner}/{repo}/actions/secrets/{secret_name}", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo), secret_name=crate::apis::urlencode(p_secret_name));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ActionsSecret`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ActionsSecret`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashGetRepoSecretError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Gets a specific variable in a repository.  The authenticated user must have collaborator access to the repository to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
pub async fn actions_slash_get_repo_variable(configuration: &configuration::Configuration, owner: &str, repo: &str, name: &str) -> Result<models::ActionsVariable, Error<ActionsSlashGetRepoVariableError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;
    let p_name = name;

    let uri_str = format!("{}/repos/{owner}/{repo}/actions/variables/{name}", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo), name=crate::apis::urlencode(p_name));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ActionsVariable`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ActionsVariable`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashGetRepoVariableError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Anyone with read access to the repository can use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
pub async fn actions_slash_get_reviews_for_run(configuration: &configuration::Configuration, owner: &str, repo: &str, run_id: i32) -> Result<Vec<models::EnvironmentApprovals>, Error<ActionsSlashGetReviewsForRunError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;
    let p_run_id = run_id;

    let uri_str = format!("{}/repos/{owner}/{repo}/actions/runs/{run_id}/approvals", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo), run_id=p_run_id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::EnvironmentApprovals&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::EnvironmentApprovals&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashGetReviewsForRunError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Gets a specific self-hosted runner configured in an organization.  Authenticated users must have admin access to the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
pub async fn actions_slash_get_self_hosted_runner_for_org(configuration: &configuration::Configuration, org: &str, runner_id: i32) -> Result<models::Runner, Error<ActionsSlashGetSelfHostedRunnerForOrgError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_runner_id = runner_id;

    let uri_str = format!("{}/orgs/{org}/actions/runners/{runner_id}", configuration.base_path, org=crate::apis::urlencode(p_org), runner_id=p_runner_id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::Runner`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::Runner`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashGetSelfHostedRunnerForOrgError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Gets a specific self-hosted runner configured in a repository.  Authenticated users must have admin access to the repository to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
pub async fn actions_slash_get_self_hosted_runner_for_repo(configuration: &configuration::Configuration, owner: &str, repo: &str, runner_id: i32) -> Result<models::Runner, Error<ActionsSlashGetSelfHostedRunnerForRepoError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;
    let p_runner_id = runner_id;

    let uri_str = format!("{}/repos/{owner}/{repo}/actions/runners/{runner_id}", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo), runner_id=p_runner_id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::Runner`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::Runner`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashGetSelfHostedRunnerForRepoError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Gets a specific self-hosted runner group for an organization.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
pub async fn actions_slash_get_self_hosted_runner_group_for_org(configuration: &configuration::Configuration, org: &str, runner_group_id: i32) -> Result<models::RunnerGroupsOrg, Error<ActionsSlashGetSelfHostedRunnerGroupForOrgError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_runner_group_id = runner_group_id;

    let uri_str = format!("{}/orgs/{org}/actions/runner-groups/{runner_group_id}", configuration.base_path, org=crate::apis::urlencode(p_org), runner_group_id=p_runner_group_id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::RunnerGroupsOrg`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::RunnerGroupsOrg`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashGetSelfHostedRunnerGroupForOrgError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Gets a specific workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.  Anyone with read access to the repository can use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
pub async fn actions_slash_get_workflow(configuration: &configuration::Configuration, owner: &str, repo: &str, workflow_id: &str) -> Result<models::Workflow, Error<ActionsSlashGetWorkflowError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;
    let p_workflow_id = workflow_id;

    let uri_str = format!("{}/repos/{owner}/{repo}/actions/workflows/{workflow_id}", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo), workflow_id=p_workflow_id.to_string());
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::Workflow`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::Workflow`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashGetWorkflowError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Gets the level of access that workflows outside of the repository have to actions and reusable workflows in the repository. This endpoint only applies to private repositories. For more information, see \"[Allowing access to components in a private repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-a-private-repository).\"  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
pub async fn actions_slash_get_workflow_access_to_repository(configuration: &configuration::Configuration, owner: &str, repo: &str) -> Result<models::ActionsWorkflowAccessToRepository, Error<ActionsSlashGetWorkflowAccessToRepositoryError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;

    let uri_str = format!("{}/repos/{owner}/{repo}/actions/permissions/access", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ActionsWorkflowAccessToRepository`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ActionsWorkflowAccessToRepository`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashGetWorkflowAccessToRepositoryError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Gets a specific workflow run.  Anyone with read access to the repository can use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
pub async fn actions_slash_get_workflow_run(configuration: &configuration::Configuration, owner: &str, repo: &str, run_id: i32, exclude_pull_requests: Option<bool>) -> Result<models::WorkflowRun, Error<ActionsSlashGetWorkflowRunError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;
    let p_run_id = run_id;
    let p_exclude_pull_requests = exclude_pull_requests;

    let uri_str = format!("{}/repos/{owner}/{repo}/actions/runs/{run_id}", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo), run_id=p_run_id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_exclude_pull_requests {
        req_builder = req_builder.query(&[("exclude_pull_requests", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::WorkflowRun`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::WorkflowRun`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashGetWorkflowRunError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Gets a specific workflow run attempt.  Anyone with read access to the repository can use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
pub async fn actions_slash_get_workflow_run_attempt(configuration: &configuration::Configuration, owner: &str, repo: &str, run_id: i32, attempt_number: i32, exclude_pull_requests: Option<bool>) -> Result<models::WorkflowRun, Error<ActionsSlashGetWorkflowRunAttemptError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;
    let p_run_id = run_id;
    let p_attempt_number = attempt_number;
    let p_exclude_pull_requests = exclude_pull_requests;

    let uri_str = format!("{}/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo), run_id=p_run_id, attempt_number=p_attempt_number);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_exclude_pull_requests {
        req_builder = req_builder.query(&[("exclude_pull_requests", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::WorkflowRun`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::WorkflowRun`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashGetWorkflowRunAttemptError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// > [!WARNING]   > This endpoint is in the process of closing down. Refer to \"[Actions Get workflow usage and Get workflow run usage endpoints closing down](https://github.blog/changelog/2025-02-02-actions-get-workflow-usage-and-get-workflow-run-usage-endpoints-closing-down/)\" for more information.  Gets the number of billable minutes and total run time for a specific workflow run. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see \"[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)\".  Anyone with read access to the repository can use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
pub async fn actions_slash_get_workflow_run_usage(configuration: &configuration::Configuration, owner: &str, repo: &str, run_id: i32) -> Result<models::WorkflowRunUsage, Error<ActionsSlashGetWorkflowRunUsageError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;
    let p_run_id = run_id;

    let uri_str = format!("{}/repos/{owner}/{repo}/actions/runs/{run_id}/timing", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo), run_id=p_run_id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::WorkflowRunUsage`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::WorkflowRunUsage`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashGetWorkflowRunUsageError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// > [!WARNING]   > This endpoint is in the process of closing down. Refer to \"[Actions Get workflow usage and Get workflow run usage endpoints closing down](https://github.blog/changelog/2025-02-02-actions-get-workflow-usage-and-get-workflow-run-usage-endpoints-closing-down/)\" for more information.  Gets the number of billable minutes used by a specific workflow during the current billing cycle. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see \"[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)\".  You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.  Anyone with read access to the repository can use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
pub async fn actions_slash_get_workflow_usage(configuration: &configuration::Configuration, owner: &str, repo: &str, workflow_id: &str) -> Result<models::WorkflowUsage, Error<ActionsSlashGetWorkflowUsageError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;
    let p_workflow_id = workflow_id;

    let uri_str = format!("{}/repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo), workflow_id=p_workflow_id.to_string());
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::WorkflowUsage`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::WorkflowUsage`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashGetWorkflowUsageError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Lists all artifacts for a repository.  Anyone with read access to the repository can use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
pub async fn actions_slash_list_artifacts_for_repo(configuration: &configuration::Configuration, owner: &str, repo: &str, per_page: Option<i32>, page: Option<i32>, name: Option<&str>) -> Result<models::ActionsListArtifactsForRepo200Response, Error<ActionsSlashListArtifactsForRepoError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;
    let p_per_page = per_page;
    let p_page = page;
    let p_name = name;

    let uri_str = format!("{}/repos/{owner}/{repo}/actions/artifacts", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_per_page {
        req_builder = req_builder.query(&[("per_page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_name {
        req_builder = req_builder.query(&[("name", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ActionsListArtifactsForRepo200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ActionsListArtifactsForRepo200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashListArtifactsForRepoError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Lists all secrets available in an environment without revealing their encrypted values.  Authenticated users must have collaborator access to a repository to create, update, or read secrets.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
pub async fn actions_slash_list_environment_secrets(configuration: &configuration::Configuration, owner: &str, repo: &str, environment_name: &str, per_page: Option<i32>, page: Option<i32>) -> Result<models::ActionsListRepoOrganizationSecrets200Response, Error<ActionsSlashListEnvironmentSecretsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;
    let p_environment_name = environment_name;
    let p_per_page = per_page;
    let p_page = page;

    let uri_str = format!("{}/repos/{owner}/{repo}/environments/{environment_name}/secrets", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo), environment_name=crate::apis::urlencode(p_environment_name));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_per_page {
        req_builder = req_builder.query(&[("per_page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ActionsListRepoOrganizationSecrets200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ActionsListRepoOrganizationSecrets200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashListEnvironmentSecretsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Lists all environment variables.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
pub async fn actions_slash_list_environment_variables(configuration: &configuration::Configuration, owner: &str, repo: &str, environment_name: &str, per_page: Option<i32>, page: Option<i32>) -> Result<models::ActionsListRepoOrganizationVariables200Response, Error<ActionsSlashListEnvironmentVariablesError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;
    let p_environment_name = environment_name;
    let p_per_page = per_page;
    let p_page = page;

    let uri_str = format!("{}/repos/{owner}/{repo}/environments/{environment_name}/variables", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo), environment_name=crate::apis::urlencode(p_environment_name));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_per_page {
        req_builder = req_builder.query(&[("per_page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ActionsListRepoOrganizationVariables200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ActionsListRepoOrganizationVariables200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashListEnvironmentVariablesError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Lists the GitHub-hosted runners in an organization group.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
pub async fn actions_slash_list_github_hosted_runners_in_group_for_org(configuration: &configuration::Configuration, org: &str, runner_group_id: i32, per_page: Option<i32>, page: Option<i32>) -> Result<models::ActionsListGithubHostedRunnersInGroupForOrg200Response, Error<ActionsSlashListGithubHostedRunnersInGroupForOrgError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_runner_group_id = runner_group_id;
    let p_per_page = per_page;
    let p_page = page;

    let uri_str = format!("{}/orgs/{org}/actions/runner-groups/{runner_group_id}/hosted-runners", configuration.base_path, org=crate::apis::urlencode(p_org), runner_group_id=p_runner_group_id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_per_page {
        req_builder = req_builder.query(&[("per_page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ActionsListGithubHostedRunnersInGroupForOrg200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ActionsListGithubHostedRunnersInGroupForOrg200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashListGithubHostedRunnersInGroupForOrgError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Lists all GitHub-hosted runners configured in an organization.  OAuth app tokens and personal access tokens (classic) need the `manage_runner:org` scope to use this endpoint.
pub async fn actions_slash_list_hosted_runners_for_org(configuration: &configuration::Configuration, org: &str, per_page: Option<i32>, page: Option<i32>) -> Result<models::ActionsListHostedRunnersForOrg200Response, Error<ActionsSlashListHostedRunnersForOrgError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_per_page = per_page;
    let p_page = page;

    let uri_str = format!("{}/orgs/{org}/actions/hosted-runners", configuration.base_path, org=crate::apis::urlencode(p_org));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_per_page {
        req_builder = req_builder.query(&[("per_page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ActionsListHostedRunnersForOrg200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ActionsListHostedRunnersForOrg200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashListHostedRunnersForOrgError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Lists jobs for a workflow run. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#parameters).  Anyone with read access to the repository can use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
pub async fn actions_slash_list_jobs_for_workflow_run(configuration: &configuration::Configuration, owner: &str, repo: &str, run_id: i32, filter: Option<&str>, per_page: Option<i32>, page: Option<i32>) -> Result<models::ActionsListJobsForWorkflowRunAttempt200Response, Error<ActionsSlashListJobsForWorkflowRunError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;
    let p_run_id = run_id;
    let p_filter = filter;
    let p_per_page = per_page;
    let p_page = page;

    let uri_str = format!("{}/repos/{owner}/{repo}/actions/runs/{run_id}/jobs", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo), run_id=p_run_id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_filter {
        req_builder = req_builder.query(&[("filter", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_per_page {
        req_builder = req_builder.query(&[("per_page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ActionsListJobsForWorkflowRunAttempt200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ActionsListJobsForWorkflowRunAttempt200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashListJobsForWorkflowRunError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Lists jobs for a specific workflow run attempt. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#parameters).  Anyone with read access to the repository can use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint  with a private repository.
pub async fn actions_slash_list_jobs_for_workflow_run_attempt(configuration: &configuration::Configuration, owner: &str, repo: &str, run_id: i32, attempt_number: i32, per_page: Option<i32>, page: Option<i32>) -> Result<models::ActionsListJobsForWorkflowRunAttempt200Response, Error<ActionsSlashListJobsForWorkflowRunAttemptError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;
    let p_run_id = run_id;
    let p_attempt_number = attempt_number;
    let p_per_page = per_page;
    let p_page = page;

    let uri_str = format!("{}/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo), run_id=p_run_id, attempt_number=p_attempt_number);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_per_page {
        req_builder = req_builder.query(&[("per_page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ActionsListJobsForWorkflowRunAttempt200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ActionsListJobsForWorkflowRunAttempt200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashListJobsForWorkflowRunAttemptError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Lists all labels for a self-hosted runner configured in an organization.  Authenticated users must have admin access to the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
pub async fn actions_slash_list_labels_for_self_hosted_runner_for_org(configuration: &configuration::Configuration, org: &str, runner_id: i32) -> Result<models::ActionsListLabelsForSelfHostedRunnerForOrg200Response, Error<ActionsSlashListLabelsForSelfHostedRunnerForOrgError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_runner_id = runner_id;

    let uri_str = format!("{}/orgs/{org}/actions/runners/{runner_id}/labels", configuration.base_path, org=crate::apis::urlencode(p_org), runner_id=p_runner_id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ActionsListLabelsForSelfHostedRunnerForOrg200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ActionsListLabelsForSelfHostedRunnerForOrg200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashListLabelsForSelfHostedRunnerForOrgError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Lists all labels for a self-hosted runner configured in a repository.  Authenticated users must have admin access to the repository to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
pub async fn actions_slash_list_labels_for_self_hosted_runner_for_repo(configuration: &configuration::Configuration, owner: &str, repo: &str, runner_id: i32) -> Result<models::ActionsListLabelsForSelfHostedRunnerForOrg200Response, Error<ActionsSlashListLabelsForSelfHostedRunnerForRepoError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;
    let p_runner_id = runner_id;

    let uri_str = format!("{}/repos/{owner}/{repo}/actions/runners/{runner_id}/labels", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo), runner_id=p_runner_id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ActionsListLabelsForSelfHostedRunnerForOrg200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ActionsListLabelsForSelfHostedRunnerForOrg200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashListLabelsForSelfHostedRunnerForRepoError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Lists all secrets available in an organization without revealing their encrypted values.  Authenticated users must have collaborator access to a repository to create, update, or read secrets.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
pub async fn actions_slash_list_org_secrets(configuration: &configuration::Configuration, org: &str, per_page: Option<i32>, page: Option<i32>) -> Result<models::ActionsListOrgSecrets200Response, Error<ActionsSlashListOrgSecretsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_per_page = per_page;
    let p_page = page;

    let uri_str = format!("{}/orgs/{org}/actions/secrets", configuration.base_path, org=crate::apis::urlencode(p_org));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_per_page {
        req_builder = req_builder.query(&[("per_page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ActionsListOrgSecrets200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ActionsListOrgSecrets200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashListOrgSecretsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Lists all organization variables.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
pub async fn actions_slash_list_org_variables(configuration: &configuration::Configuration, org: &str, per_page: Option<i32>, page: Option<i32>) -> Result<models::ActionsListOrgVariables200Response, Error<ActionsSlashListOrgVariablesError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_per_page = per_page;
    let p_page = page;

    let uri_str = format!("{}/orgs/{org}/actions/variables", configuration.base_path, org=crate::apis::urlencode(p_org));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_per_page {
        req_builder = req_builder.query(&[("per_page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ActionsListOrgVariables200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ActionsListOrgVariables200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashListOrgVariablesError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Lists the repositories with access to a self-hosted runner group configured in an organization.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
pub async fn actions_slash_list_repo_access_to_self_hosted_runner_group_in_org(configuration: &configuration::Configuration, org: &str, runner_group_id: i32, page: Option<i32>, per_page: Option<i32>) -> Result<models::ActionsListRepoAccessToSelfHostedRunnerGroupInOrg200Response, Error<ActionsSlashListRepoAccessToSelfHostedRunnerGroupInOrgError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_runner_group_id = runner_group_id;
    let p_page = page;
    let p_per_page = per_page;

    let uri_str = format!("{}/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories", configuration.base_path, org=crate::apis::urlencode(p_org), runner_group_id=p_runner_group_id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_per_page {
        req_builder = req_builder.query(&[("per_page", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ActionsListRepoAccessToSelfHostedRunnerGroupInOrg200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ActionsListRepoAccessToSelfHostedRunnerGroupInOrg200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashListRepoAccessToSelfHostedRunnerGroupInOrgError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Lists all organization secrets shared with a repository without revealing their encrypted values.  Authenticated users must have collaborator access to a repository to create, update, or read secrets.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
pub async fn actions_slash_list_repo_organization_secrets(configuration: &configuration::Configuration, owner: &str, repo: &str, per_page: Option<i32>, page: Option<i32>) -> Result<models::ActionsListRepoOrganizationSecrets200Response, Error<ActionsSlashListRepoOrganizationSecretsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;
    let p_per_page = per_page;
    let p_page = page;

    let uri_str = format!("{}/repos/{owner}/{repo}/actions/organization-secrets", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_per_page {
        req_builder = req_builder.query(&[("per_page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ActionsListRepoOrganizationSecrets200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ActionsListRepoOrganizationSecrets200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashListRepoOrganizationSecretsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Lists all organization variables shared with a repository.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
pub async fn actions_slash_list_repo_organization_variables(configuration: &configuration::Configuration, owner: &str, repo: &str, per_page: Option<i32>, page: Option<i32>) -> Result<models::ActionsListRepoOrganizationVariables200Response, Error<ActionsSlashListRepoOrganizationVariablesError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;
    let p_per_page = per_page;
    let p_page = page;

    let uri_str = format!("{}/repos/{owner}/{repo}/actions/organization-variables", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_per_page {
        req_builder = req_builder.query(&[("per_page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ActionsListRepoOrganizationVariables200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ActionsListRepoOrganizationVariables200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashListRepoOrganizationVariablesError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Lists all secrets available in a repository without revealing their encrypted values.  Authenticated users must have collaborator access to a repository to create, update, or read secrets.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
pub async fn actions_slash_list_repo_secrets(configuration: &configuration::Configuration, owner: &str, repo: &str, per_page: Option<i32>, page: Option<i32>) -> Result<models::ActionsListRepoOrganizationSecrets200Response, Error<ActionsSlashListRepoSecretsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;
    let p_per_page = per_page;
    let p_page = page;

    let uri_str = format!("{}/repos/{owner}/{repo}/actions/secrets", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_per_page {
        req_builder = req_builder.query(&[("per_page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ActionsListRepoOrganizationSecrets200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ActionsListRepoOrganizationSecrets200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashListRepoSecretsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Lists all repository variables.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
pub async fn actions_slash_list_repo_variables(configuration: &configuration::Configuration, owner: &str, repo: &str, per_page: Option<i32>, page: Option<i32>) -> Result<models::ActionsListRepoOrganizationVariables200Response, Error<ActionsSlashListRepoVariablesError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;
    let p_per_page = per_page;
    let p_page = page;

    let uri_str = format!("{}/repos/{owner}/{repo}/actions/variables", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_per_page {
        req_builder = req_builder.query(&[("per_page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ActionsListRepoOrganizationVariables200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ActionsListRepoOrganizationVariables200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashListRepoVariablesError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Lists the workflows in a repository.  Anyone with read access to the repository can use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
pub async fn actions_slash_list_repo_workflows(configuration: &configuration::Configuration, owner: &str, repo: &str, per_page: Option<i32>, page: Option<i32>) -> Result<models::ActionsListRepoWorkflows200Response, Error<ActionsSlashListRepoWorkflowsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;
    let p_per_page = per_page;
    let p_page = page;

    let uri_str = format!("{}/repos/{owner}/{repo}/actions/workflows", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_per_page {
        req_builder = req_builder.query(&[("per_page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ActionsListRepoWorkflows200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ActionsListRepoWorkflows200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashListRepoWorkflowsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Lists binaries for the runner application that you can download and run.  Authenticated users must have admin access to the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.  If the repository is private, the `repo` scope is also required.
pub async fn actions_slash_list_runner_applications_for_org(configuration: &configuration::Configuration, org: &str) -> Result<Vec<models::RunnerApplication>, Error<ActionsSlashListRunnerApplicationsForOrgError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;

    let uri_str = format!("{}/orgs/{org}/actions/runners/downloads", configuration.base_path, org=crate::apis::urlencode(p_org));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::RunnerApplication&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::RunnerApplication&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashListRunnerApplicationsForOrgError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Lists binaries for the runner application that you can download and run.  Authenticated users must have admin access to the repository to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
pub async fn actions_slash_list_runner_applications_for_repo(configuration: &configuration::Configuration, owner: &str, repo: &str) -> Result<Vec<models::RunnerApplication>, Error<ActionsSlashListRunnerApplicationsForRepoError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;

    let uri_str = format!("{}/repos/{owner}/{repo}/actions/runners/downloads", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::RunnerApplication&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::RunnerApplication&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashListRunnerApplicationsForRepoError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Lists all repositories that have been selected when the `visibility` for repository access to a secret is set to `selected`.  Authenticated users must have collaborator access to a repository to create, update, or read secrets.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
pub async fn actions_slash_list_selected_repos_for_org_secret(configuration: &configuration::Configuration, org: &str, secret_name: &str, page: Option<i32>, per_page: Option<i32>) -> Result<models::ActionsListSelectedReposForOrgSecret200Response, Error<ActionsSlashListSelectedReposForOrgSecretError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_secret_name = secret_name;
    let p_page = page;
    let p_per_page = per_page;

    let uri_str = format!("{}/orgs/{org}/actions/secrets/{secret_name}/repositories", configuration.base_path, org=crate::apis::urlencode(p_org), secret_name=crate::apis::urlencode(p_secret_name));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_per_page {
        req_builder = req_builder.query(&[("per_page", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ActionsListSelectedReposForOrgSecret200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ActionsListSelectedReposForOrgSecret200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashListSelectedReposForOrgSecretError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Lists all repositories that can access an organization variable that is available to selected repositories.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
pub async fn actions_slash_list_selected_repos_for_org_variable(configuration: &configuration::Configuration, org: &str, name: &str, page: Option<i32>, per_page: Option<i32>) -> Result<models::ActionsListSelectedReposForOrgSecret200Response, Error<ActionsSlashListSelectedReposForOrgVariableError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_name = name;
    let p_page = page;
    let p_per_page = per_page;

    let uri_str = format!("{}/orgs/{org}/actions/variables/{name}/repositories", configuration.base_path, org=crate::apis::urlencode(p_org), name=crate::apis::urlencode(p_name));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_per_page {
        req_builder = req_builder.query(&[("per_page", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ActionsListSelectedReposForOrgSecret200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ActionsListSelectedReposForOrgSecret200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashListSelectedReposForOrgVariableError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Lists the selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\"  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
pub async fn actions_slash_list_selected_repositories_enabled_github_actions_organization(configuration: &configuration::Configuration, org: &str, per_page: Option<i32>, page: Option<i32>) -> Result<models::ActionsListSelectedRepositoriesEnabledGithubActionsOrganization200Response, Error<ActionsSlashListSelectedRepositoriesEnabledGithubActionsOrganizationError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_per_page = per_page;
    let p_page = page;

    let uri_str = format!("{}/orgs/{org}/actions/permissions/repositories", configuration.base_path, org=crate::apis::urlencode(p_org));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_per_page {
        req_builder = req_builder.query(&[("per_page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ActionsListSelectedRepositoriesEnabledGithubActionsOrganization200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ActionsListSelectedRepositoriesEnabledGithubActionsOrganization200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashListSelectedRepositoriesEnabledGithubActionsOrganizationError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Lists all self-hosted runner groups configured in an organization and inherited from an enterprise.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
pub async fn actions_slash_list_self_hosted_runner_groups_for_org(configuration: &configuration::Configuration, org: &str, per_page: Option<i32>, page: Option<i32>, visible_to_repository: Option<&str>) -> Result<models::ActionsListSelfHostedRunnerGroupsForOrg200Response, Error<ActionsSlashListSelfHostedRunnerGroupsForOrgError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_per_page = per_page;
    let p_page = page;
    let p_visible_to_repository = visible_to_repository;

    let uri_str = format!("{}/orgs/{org}/actions/runner-groups", configuration.base_path, org=crate::apis::urlencode(p_org));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_per_page {
        req_builder = req_builder.query(&[("per_page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_visible_to_repository {
        req_builder = req_builder.query(&[("visible_to_repository", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ActionsListSelfHostedRunnerGroupsForOrg200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ActionsListSelfHostedRunnerGroupsForOrg200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashListSelfHostedRunnerGroupsForOrgError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Lists all self-hosted runners configured in an organization.  Authenticated users must have admin access to the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
pub async fn actions_slash_list_self_hosted_runners_for_org(configuration: &configuration::Configuration, org: &str, name: Option<&str>, per_page: Option<i32>, page: Option<i32>) -> Result<models::ActionsListSelfHostedRunnersForOrg200Response, Error<ActionsSlashListSelfHostedRunnersForOrgError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_name = name;
    let p_per_page = per_page;
    let p_page = page;

    let uri_str = format!("{}/orgs/{org}/actions/runners", configuration.base_path, org=crate::apis::urlencode(p_org));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_name {
        req_builder = req_builder.query(&[("name", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_per_page {
        req_builder = req_builder.query(&[("per_page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ActionsListSelfHostedRunnersForOrg200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ActionsListSelfHostedRunnersForOrg200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashListSelfHostedRunnersForOrgError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Lists all self-hosted runners configured in a repository.  Authenticated users must have admin access to the repository to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
pub async fn actions_slash_list_self_hosted_runners_for_repo(configuration: &configuration::Configuration, owner: &str, repo: &str, name: Option<&str>, per_page: Option<i32>, page: Option<i32>) -> Result<models::ActionsListSelfHostedRunnersForOrg200Response, Error<ActionsSlashListSelfHostedRunnersForRepoError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;
    let p_name = name;
    let p_per_page = per_page;
    let p_page = page;

    let uri_str = format!("{}/repos/{owner}/{repo}/actions/runners", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_name {
        req_builder = req_builder.query(&[("name", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_per_page {
        req_builder = req_builder.query(&[("per_page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ActionsListSelfHostedRunnersForOrg200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ActionsListSelfHostedRunnersForOrg200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashListSelfHostedRunnersForRepoError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Lists self-hosted runners that are in a specific organization group.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
pub async fn actions_slash_list_self_hosted_runners_in_group_for_org(configuration: &configuration::Configuration, org: &str, runner_group_id: i32, per_page: Option<i32>, page: Option<i32>) -> Result<models::ActionsListSelfHostedRunnersInGroupForOrg200Response, Error<ActionsSlashListSelfHostedRunnersInGroupForOrgError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_runner_group_id = runner_group_id;
    let p_per_page = per_page;
    let p_page = page;

    let uri_str = format!("{}/orgs/{org}/actions/runner-groups/{runner_group_id}/runners", configuration.base_path, org=crate::apis::urlencode(p_org), runner_group_id=p_runner_group_id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_per_page {
        req_builder = req_builder.query(&[("per_page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ActionsListSelfHostedRunnersInGroupForOrg200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ActionsListSelfHostedRunnersInGroupForOrg200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashListSelfHostedRunnersInGroupForOrgError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Lists artifacts for a workflow run.  Anyone with read access to the repository can use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
pub async fn actions_slash_list_workflow_run_artifacts(configuration: &configuration::Configuration, owner: &str, repo: &str, run_id: i32, per_page: Option<i32>, page: Option<i32>, name: Option<&str>) -> Result<models::ActionsListArtifactsForRepo200Response, Error<ActionsSlashListWorkflowRunArtifactsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;
    let p_run_id = run_id;
    let p_per_page = per_page;
    let p_page = page;
    let p_name = name;

    let uri_str = format!("{}/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo), run_id=p_run_id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_per_page {
        req_builder = req_builder.query(&[("per_page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_name {
        req_builder = req_builder.query(&[("name", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ActionsListArtifactsForRepo200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ActionsListArtifactsForRepo200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashListWorkflowRunArtifactsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// List all workflow runs for a workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#parameters).  Anyone with read access to the repository can use this endpoint  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.  This endpoint will return up to 1,000 results for each search when using the following parameters: `actor`, `branch`, `check_suite_id`, `created`, `event`, `head_sha`, `status`.
pub async fn actions_slash_list_workflow_runs(configuration: &configuration::Configuration, owner: &str, repo: &str, workflow_id: &str, actor: Option<&str>, branch: Option<&str>, event: Option<&str>, status: Option<&str>, per_page: Option<i32>, page: Option<i32>, created: Option<String>, exclude_pull_requests: Option<bool>, check_suite_id: Option<i32>, head_sha: Option<&str>) -> Result<models::ActionsListWorkflowRunsForRepo200Response, Error<ActionsSlashListWorkflowRunsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;
    let p_workflow_id = workflow_id;
    let p_actor = actor;
    let p_branch = branch;
    let p_event = event;
    let p_status = status;
    let p_per_page = per_page;
    let p_page = page;
    let p_created = created;
    let p_exclude_pull_requests = exclude_pull_requests;
    let p_check_suite_id = check_suite_id;
    let p_head_sha = head_sha;

    let uri_str = format!("{}/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo), workflow_id=p_workflow_id.to_string());
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_actor {
        req_builder = req_builder.query(&[("actor", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_branch {
        req_builder = req_builder.query(&[("branch", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_event {
        req_builder = req_builder.query(&[("event", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_status {
        req_builder = req_builder.query(&[("status", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_per_page {
        req_builder = req_builder.query(&[("per_page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_created {
        req_builder = req_builder.query(&[("created", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_exclude_pull_requests {
        req_builder = req_builder.query(&[("exclude_pull_requests", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_check_suite_id {
        req_builder = req_builder.query(&[("check_suite_id", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_head_sha {
        req_builder = req_builder.query(&[("head_sha", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ActionsListWorkflowRunsForRepo200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ActionsListWorkflowRunsForRepo200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashListWorkflowRunsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Lists all workflow runs for a repository. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#parameters).  Anyone with read access to the repository can use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.  This endpoint will return up to 1,000 results for each search when using the following parameters: `actor`, `branch`, `check_suite_id`, `created`, `event`, `head_sha`, `status`.
pub async fn actions_slash_list_workflow_runs_for_repo(configuration: &configuration::Configuration, owner: &str, repo: &str, actor: Option<&str>, branch: Option<&str>, event: Option<&str>, status: Option<&str>, per_page: Option<i32>, page: Option<i32>, created: Option<String>, exclude_pull_requests: Option<bool>, check_suite_id: Option<i32>, head_sha: Option<&str>) -> Result<models::ActionsListWorkflowRunsForRepo200Response, Error<ActionsSlashListWorkflowRunsForRepoError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;
    let p_actor = actor;
    let p_branch = branch;
    let p_event = event;
    let p_status = status;
    let p_per_page = per_page;
    let p_page = page;
    let p_created = created;
    let p_exclude_pull_requests = exclude_pull_requests;
    let p_check_suite_id = check_suite_id;
    let p_head_sha = head_sha;

    let uri_str = format!("{}/repos/{owner}/{repo}/actions/runs", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_actor {
        req_builder = req_builder.query(&[("actor", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_branch {
        req_builder = req_builder.query(&[("branch", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_event {
        req_builder = req_builder.query(&[("event", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_status {
        req_builder = req_builder.query(&[("status", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_per_page {
        req_builder = req_builder.query(&[("per_page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_created {
        req_builder = req_builder.query(&[("created", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_exclude_pull_requests {
        req_builder = req_builder.query(&[("exclude_pull_requests", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_check_suite_id {
        req_builder = req_builder.query(&[("check_suite_id", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_head_sha {
        req_builder = req_builder.query(&[("head_sha", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ActionsListWorkflowRunsForRepo200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ActionsListWorkflowRunsForRepo200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashListWorkflowRunsForRepoError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Re-run a job and its dependent jobs in a workflow run.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
pub async fn actions_slash_re_run_job_for_workflow_run(configuration: &configuration::Configuration, owner: &str, repo: &str, job_id: i32, actions_re_run_job_for_workflow_run_request: Option<models::ActionsReRunJobForWorkflowRunRequest>) -> Result<serde_json::Value, Error<ActionsSlashReRunJobForWorkflowRunError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;
    let p_job_id = job_id;
    let p_actions_re_run_job_for_workflow_run_request = actions_re_run_job_for_workflow_run_request;

    let uri_str = format!("{}/repos/{owner}/{repo}/actions/jobs/{job_id}/rerun", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo), job_id=p_job_id);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_actions_re_run_job_for_workflow_run_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `serde_json::Value`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `serde_json::Value`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashReRunJobForWorkflowRunError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Re-runs your workflow run using its `id`.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
pub async fn actions_slash_re_run_workflow(configuration: &configuration::Configuration, owner: &str, repo: &str, run_id: i32, actions_re_run_job_for_workflow_run_request: Option<models::ActionsReRunJobForWorkflowRunRequest>) -> Result<serde_json::Value, Error<ActionsSlashReRunWorkflowError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;
    let p_run_id = run_id;
    let p_actions_re_run_job_for_workflow_run_request = actions_re_run_job_for_workflow_run_request;

    let uri_str = format!("{}/repos/{owner}/{repo}/actions/runs/{run_id}/rerun", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo), run_id=p_run_id);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_actions_re_run_job_for_workflow_run_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `serde_json::Value`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `serde_json::Value`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashReRunWorkflowError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Re-run all of the failed jobs and their dependent jobs in a workflow run using the `id` of the workflow run.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
pub async fn actions_slash_re_run_workflow_failed_jobs(configuration: &configuration::Configuration, owner: &str, repo: &str, run_id: i32, actions_re_run_job_for_workflow_run_request: Option<models::ActionsReRunJobForWorkflowRunRequest>) -> Result<serde_json::Value, Error<ActionsSlashReRunWorkflowFailedJobsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;
    let p_run_id = run_id;
    let p_actions_re_run_job_for_workflow_run_request = actions_re_run_job_for_workflow_run_request;

    let uri_str = format!("{}/repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo), run_id=p_run_id);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_actions_re_run_job_for_workflow_run_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `serde_json::Value`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `serde_json::Value`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashReRunWorkflowFailedJobsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Remove all custom labels from a self-hosted runner configured in an organization. Returns the remaining read-only labels from the runner.  Authenticated users must have admin access to the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
pub async fn actions_slash_remove_all_custom_labels_from_self_hosted_runner_for_org(configuration: &configuration::Configuration, org: &str, runner_id: i32) -> Result<models::ActionsListLabelsForSelfHostedRunnerForOrg200Response, Error<ActionsSlashRemoveAllCustomLabelsFromSelfHostedRunnerForOrgError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_runner_id = runner_id;

    let uri_str = format!("{}/orgs/{org}/actions/runners/{runner_id}/labels", configuration.base_path, org=crate::apis::urlencode(p_org), runner_id=p_runner_id);
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ActionsListLabelsForSelfHostedRunnerForOrg200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ActionsListLabelsForSelfHostedRunnerForOrg200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashRemoveAllCustomLabelsFromSelfHostedRunnerForOrgError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Remove all custom labels from a self-hosted runner configured in a repository. Returns the remaining read-only labels from the runner.  Authenticated users must have admin access to the repository to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
pub async fn actions_slash_remove_all_custom_labels_from_self_hosted_runner_for_repo(configuration: &configuration::Configuration, owner: &str, repo: &str, runner_id: i32) -> Result<models::ActionsListLabelsForSelfHostedRunnerForOrg200Response, Error<ActionsSlashRemoveAllCustomLabelsFromSelfHostedRunnerForRepoError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;
    let p_runner_id = runner_id;

    let uri_str = format!("{}/repos/{owner}/{repo}/actions/runners/{runner_id}/labels", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo), runner_id=p_runner_id);
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ActionsListLabelsForSelfHostedRunnerForOrg200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ActionsListLabelsForSelfHostedRunnerForOrg200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashRemoveAllCustomLabelsFromSelfHostedRunnerForRepoError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Remove a custom label from a self-hosted runner configured in an organization. Returns the remaining labels from the runner.  This endpoint returns a `404 Not Found` status if the custom label is not present on the runner.  Authenticated users must have admin access to the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
pub async fn actions_slash_remove_custom_label_from_self_hosted_runner_for_org(configuration: &configuration::Configuration, org: &str, runner_id: i32, name: &str) -> Result<models::ActionsListLabelsForSelfHostedRunnerForOrg200Response, Error<ActionsSlashRemoveCustomLabelFromSelfHostedRunnerForOrgError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_runner_id = runner_id;
    let p_name = name;

    let uri_str = format!("{}/orgs/{org}/actions/runners/{runner_id}/labels/{name}", configuration.base_path, org=crate::apis::urlencode(p_org), runner_id=p_runner_id, name=crate::apis::urlencode(p_name));
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ActionsListLabelsForSelfHostedRunnerForOrg200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ActionsListLabelsForSelfHostedRunnerForOrg200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashRemoveCustomLabelFromSelfHostedRunnerForOrgError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Remove a custom label from a self-hosted runner configured in a repository. Returns the remaining labels from the runner.  This endpoint returns a `404 Not Found` status if the custom label is not present on the runner.  Authenticated users must have admin access to the repository to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
pub async fn actions_slash_remove_custom_label_from_self_hosted_runner_for_repo(configuration: &configuration::Configuration, owner: &str, repo: &str, runner_id: i32, name: &str) -> Result<models::ActionsListLabelsForSelfHostedRunnerForOrg200Response, Error<ActionsSlashRemoveCustomLabelFromSelfHostedRunnerForRepoError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;
    let p_runner_id = runner_id;
    let p_name = name;

    let uri_str = format!("{}/repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo), runner_id=p_runner_id, name=crate::apis::urlencode(p_name));
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ActionsListLabelsForSelfHostedRunnerForOrg200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ActionsListLabelsForSelfHostedRunnerForOrg200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashRemoveCustomLabelFromSelfHostedRunnerForRepoError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Removes a repository from the list of selected repositories that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see \"[Create a self-hosted runner group for an organization](#create-a-self-hosted-runner-group-for-an-organization).\"  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
pub async fn actions_slash_remove_repo_access_to_self_hosted_runner_group_in_org(configuration: &configuration::Configuration, org: &str, runner_group_id: i32, repository_id: i32) -> Result<(), Error<ActionsSlashRemoveRepoAccessToSelfHostedRunnerGroupInOrgError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_runner_group_id = runner_group_id;
    let p_repository_id = repository_id;

    let uri_str = format!("{}/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}", configuration.base_path, org=crate::apis::urlencode(p_org), runner_group_id=p_runner_group_id, repository_id=p_repository_id);
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashRemoveRepoAccessToSelfHostedRunnerGroupInOrgError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Removes a repository from an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/actions/secrets#create-or-update-an-organization-secret).  Authenticated users must have collaborator access to a repository to create, update, or read secrets.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
pub async fn actions_slash_remove_selected_repo_from_org_secret(configuration: &configuration::Configuration, org: &str, secret_name: &str, repository_id: i32) -> Result<(), Error<ActionsSlashRemoveSelectedRepoFromOrgSecretError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_secret_name = secret_name;
    let p_repository_id = repository_id;

    let uri_str = format!("{}/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}", configuration.base_path, org=crate::apis::urlencode(p_org), secret_name=crate::apis::urlencode(p_secret_name), repository_id=p_repository_id);
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashRemoveSelectedRepoFromOrgSecretError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Removes a repository from an organization variable that is available to selected repositories. Organization variables that are available to selected repositories have their `visibility` field set to `selected`.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
pub async fn actions_slash_remove_selected_repo_from_org_variable(configuration: &configuration::Configuration, org: &str, name: &str, repository_id: i32) -> Result<(), Error<ActionsSlashRemoveSelectedRepoFromOrgVariableError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_name = name;
    let p_repository_id = repository_id;

    let uri_str = format!("{}/orgs/{org}/actions/variables/{name}/repositories/{repository_id}", configuration.base_path, org=crate::apis::urlencode(p_org), name=crate::apis::urlencode(p_name), repository_id=p_repository_id);
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashRemoveSelectedRepoFromOrgVariableError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Removes a self-hosted runner from a group configured in an organization. The runner is then returned to the default group.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
pub async fn actions_slash_remove_self_hosted_runner_from_group_for_org(configuration: &configuration::Configuration, org: &str, runner_group_id: i32, runner_id: i32) -> Result<(), Error<ActionsSlashRemoveSelfHostedRunnerFromGroupForOrgError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_runner_group_id = runner_group_id;
    let p_runner_id = runner_id;

    let uri_str = format!("{}/orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}", configuration.base_path, org=crate::apis::urlencode(p_org), runner_group_id=p_runner_group_id, runner_id=p_runner_id);
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashRemoveSelfHostedRunnerFromGroupForOrgError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Approve or reject custom deployment protection rules provided by a GitHub App for a workflow run. For more information, see \"[Using environments for deployment](https://docs.github.com/actions/deployment/targeting-different-environments/using-environments-for-deployment).\"  > [!NOTE] > GitHub Apps can only review their own custom deployment protection rules. To approve or reject pending deployments that are waiting for review from a specific person or team, see [`POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments`](/rest/actions/workflow-runs#review-pending-deployments-for-a-workflow-run).  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
pub async fn actions_slash_review_custom_gates_for_run(configuration: &configuration::Configuration, owner: &str, repo: &str, run_id: i32, actions_review_custom_gates_for_run_request: models::ActionsReviewCustomGatesForRunRequest) -> Result<(), Error<ActionsSlashReviewCustomGatesForRunError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;
    let p_run_id = run_id;
    let p_actions_review_custom_gates_for_run_request = actions_review_custom_gates_for_run_request;

    let uri_str = format!("{}/repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo), run_id=p_run_id);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_actions_review_custom_gates_for_run_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashReviewCustomGatesForRunError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Approve or reject pending deployments that are waiting on approval by a required reviewer.  Required reviewers with read access to the repository contents and deployments can use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
pub async fn actions_slash_review_pending_deployments_for_run(configuration: &configuration::Configuration, owner: &str, repo: &str, run_id: i32, actions_review_pending_deployments_for_run_request: models::ActionsReviewPendingDeploymentsForRunRequest) -> Result<Vec<models::Deployment>, Error<ActionsSlashReviewPendingDeploymentsForRunError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;
    let p_run_id = run_id;
    let p_actions_review_pending_deployments_for_run_request = actions_review_pending_deployments_for_run_request;

    let uri_str = format!("{}/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo), run_id=p_run_id);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_actions_review_pending_deployments_for_run_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::Deployment&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::Deployment&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashReviewPendingDeploymentsForRunError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Sets the actions and reusable workflows that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\"  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
pub async fn actions_slash_set_allowed_actions_organization(configuration: &configuration::Configuration, org: &str, selected_actions: Option<models::SelectedActions>) -> Result<(), Error<ActionsSlashSetAllowedActionsOrganizationError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_selected_actions = selected_actions;

    let uri_str = format!("{}/orgs/{org}/actions/permissions/selected-actions", configuration.base_path, org=crate::apis::urlencode(p_org));
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_selected_actions);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashSetAllowedActionsOrganizationError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Sets the actions and reusable workflows that are allowed in a repository. To use this endpoint, the repository permission policy for `allowed_actions` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository).\"  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
pub async fn actions_slash_set_allowed_actions_repository(configuration: &configuration::Configuration, owner: &str, repo: &str, selected_actions: Option<models::SelectedActions>) -> Result<(), Error<ActionsSlashSetAllowedActionsRepositoryError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;
    let p_selected_actions = selected_actions;

    let uri_str = format!("{}/repos/{owner}/{repo}/actions/permissions/selected-actions", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo));
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_selected_actions);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashSetAllowedActionsRepositoryError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Remove all previous custom labels and set the new custom labels for a specific self-hosted runner configured in an organization.  Authenticated users must have admin access to the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
pub async fn actions_slash_set_custom_labels_for_self_hosted_runner_for_org(configuration: &configuration::Configuration, org: &str, runner_id: i32, actions_set_custom_labels_for_self_hosted_runner_for_org_request: models::ActionsSetCustomLabelsForSelfHostedRunnerForOrgRequest) -> Result<models::ActionsListLabelsForSelfHostedRunnerForOrg200Response, Error<ActionsSlashSetCustomLabelsForSelfHostedRunnerForOrgError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_runner_id = runner_id;
    let p_actions_set_custom_labels_for_self_hosted_runner_for_org_request = actions_set_custom_labels_for_self_hosted_runner_for_org_request;

    let uri_str = format!("{}/orgs/{org}/actions/runners/{runner_id}/labels", configuration.base_path, org=crate::apis::urlencode(p_org), runner_id=p_runner_id);
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_actions_set_custom_labels_for_self_hosted_runner_for_org_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ActionsListLabelsForSelfHostedRunnerForOrg200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ActionsListLabelsForSelfHostedRunnerForOrg200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashSetCustomLabelsForSelfHostedRunnerForOrgError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Remove all previous custom labels and set the new custom labels for a specific self-hosted runner configured in a repository.  Authenticated users must have admin access to the repository to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
pub async fn actions_slash_set_custom_labels_for_self_hosted_runner_for_repo(configuration: &configuration::Configuration, owner: &str, repo: &str, runner_id: i32, actions_set_custom_labels_for_self_hosted_runner_for_org_request: models::ActionsSetCustomLabelsForSelfHostedRunnerForOrgRequest) -> Result<models::ActionsListLabelsForSelfHostedRunnerForOrg200Response, Error<ActionsSlashSetCustomLabelsForSelfHostedRunnerForRepoError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;
    let p_runner_id = runner_id;
    let p_actions_set_custom_labels_for_self_hosted_runner_for_org_request = actions_set_custom_labels_for_self_hosted_runner_for_org_request;

    let uri_str = format!("{}/repos/{owner}/{repo}/actions/runners/{runner_id}/labels", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo), runner_id=p_runner_id);
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_actions_set_custom_labels_for_self_hosted_runner_for_org_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ActionsListLabelsForSelfHostedRunnerForOrg200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ActionsListLabelsForSelfHostedRunnerForOrg200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashSetCustomLabelsForSelfHostedRunnerForRepoError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Sets the customization template and `opt-in` or `opt-out` flag for an OpenID Connect (OIDC) subject claim for a repository.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
pub async fn actions_slash_set_custom_oidc_sub_claim_for_repo(configuration: &configuration::Configuration, owner: &str, repo: &str, actions_oidc_subject_customization_for_a_repository: models::ActionsOidcSubjectCustomizationForARepository) -> Result<serde_json::Value, Error<ActionsSlashSetCustomOidcSubClaimForRepoError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;
    let p_actions_oidc_subject_customization_for_a_repository = actions_oidc_subject_customization_for_a_repository;

    let uri_str = format!("{}/repos/{owner}/{repo}/actions/oidc/customization/sub", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo));
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_actions_oidc_subject_customization_for_a_repository);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `serde_json::Value`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `serde_json::Value`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashSetCustomOidcSubClaimForRepoError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Sets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in an organization, and sets if GitHub Actions can submit approving pull request reviews. For more information, see \"[Setting the permissions of the GITHUB_TOKEN for your organization](https://docs.github.com/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#setting-the-permissions-of-the-github_token-for-your-organization).\"  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
pub async fn actions_slash_set_github_actions_default_workflow_permissions_organization(configuration: &configuration::Configuration, org: &str, actions_set_default_workflow_permissions: Option<models::ActionsSetDefaultWorkflowPermissions>) -> Result<(), Error<ActionsSlashSetGithubActionsDefaultWorkflowPermissionsOrganizationError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_actions_set_default_workflow_permissions = actions_set_default_workflow_permissions;

    let uri_str = format!("{}/orgs/{org}/actions/permissions/workflow", configuration.base_path, org=crate::apis::urlencode(p_org));
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_actions_set_default_workflow_permissions);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashSetGithubActionsDefaultWorkflowPermissionsOrganizationError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Sets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in a repository, and sets if GitHub Actions can submit approving pull request reviews. For more information, see \"[Setting the permissions of the GITHUB_TOKEN for your repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository).\"  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
pub async fn actions_slash_set_github_actions_default_workflow_permissions_repository(configuration: &configuration::Configuration, owner: &str, repo: &str, actions_set_default_workflow_permissions: models::ActionsSetDefaultWorkflowPermissions) -> Result<(), Error<ActionsSlashSetGithubActionsDefaultWorkflowPermissionsRepositoryError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;
    let p_actions_set_default_workflow_permissions = actions_set_default_workflow_permissions;

    let uri_str = format!("{}/repos/{owner}/{repo}/actions/permissions/workflow", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo));
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_actions_set_default_workflow_permissions);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashSetGithubActionsDefaultWorkflowPermissionsRepositoryError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Sets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an organization.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
pub async fn actions_slash_set_github_actions_permissions_organization(configuration: &configuration::Configuration, org: &str, actions_set_github_actions_permissions_organization_request: models::ActionsSetGithubActionsPermissionsOrganizationRequest) -> Result<(), Error<ActionsSlashSetGithubActionsPermissionsOrganizationError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_actions_set_github_actions_permissions_organization_request = actions_set_github_actions_permissions_organization_request;

    let uri_str = format!("{}/orgs/{org}/actions/permissions", configuration.base_path, org=crate::apis::urlencode(p_org));
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_actions_set_github_actions_permissions_organization_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashSetGithubActionsPermissionsOrganizationError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Sets the GitHub Actions permissions policy for enabling GitHub Actions and allowed actions and reusable workflows in the repository.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
pub async fn actions_slash_set_github_actions_permissions_repository(configuration: &configuration::Configuration, owner: &str, repo: &str, actions_set_github_actions_permissions_repository_request: models::ActionsSetGithubActionsPermissionsRepositoryRequest) -> Result<(), Error<ActionsSlashSetGithubActionsPermissionsRepositoryError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;
    let p_actions_set_github_actions_permissions_repository_request = actions_set_github_actions_permissions_repository_request;

    let uri_str = format!("{}/repos/{owner}/{repo}/actions/permissions", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo));
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_actions_set_github_actions_permissions_repository_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashSetGithubActionsPermissionsRepositoryError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Replaces the list of repositories that have access to a self-hosted runner group configured in an organization.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
pub async fn actions_slash_set_repo_access_to_self_hosted_runner_group_in_org(configuration: &configuration::Configuration, org: &str, runner_group_id: i32, actions_set_repo_access_to_self_hosted_runner_group_in_org_request: models::ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgRequest) -> Result<(), Error<ActionsSlashSetRepoAccessToSelfHostedRunnerGroupInOrgError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_runner_group_id = runner_group_id;
    let p_actions_set_repo_access_to_self_hosted_runner_group_in_org_request = actions_set_repo_access_to_self_hosted_runner_group_in_org_request;

    let uri_str = format!("{}/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories", configuration.base_path, org=crate::apis::urlencode(p_org), runner_group_id=p_runner_group_id);
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_actions_set_repo_access_to_self_hosted_runner_group_in_org_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashSetRepoAccessToSelfHostedRunnerGroupInOrgError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Replaces all repositories for an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/actions/secrets#create-or-update-an-organization-secret).  Authenticated users must have collaborator access to a repository to create, update, or read secrets.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
pub async fn actions_slash_set_selected_repos_for_org_secret(configuration: &configuration::Configuration, org: &str, secret_name: &str, actions_set_selected_repos_for_org_secret_request: models::ActionsSetSelectedReposForOrgSecretRequest) -> Result<(), Error<ActionsSlashSetSelectedReposForOrgSecretError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_secret_name = secret_name;
    let p_actions_set_selected_repos_for_org_secret_request = actions_set_selected_repos_for_org_secret_request;

    let uri_str = format!("{}/orgs/{org}/actions/secrets/{secret_name}/repositories", configuration.base_path, org=crate::apis::urlencode(p_org), secret_name=crate::apis::urlencode(p_secret_name));
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_actions_set_selected_repos_for_org_secret_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashSetSelectedReposForOrgSecretError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Replaces all repositories for an organization variable that is available to selected repositories. Organization variables that are available to selected repositories have their `visibility` field set to `selected`.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
pub async fn actions_slash_set_selected_repos_for_org_variable(configuration: &configuration::Configuration, org: &str, name: &str, actions_set_selected_repos_for_org_variable_request: models::ActionsSetSelectedReposForOrgVariableRequest) -> Result<(), Error<ActionsSlashSetSelectedReposForOrgVariableError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_name = name;
    let p_actions_set_selected_repos_for_org_variable_request = actions_set_selected_repos_for_org_variable_request;

    let uri_str = format!("{}/orgs/{org}/actions/variables/{name}/repositories", configuration.base_path, org=crate::apis::urlencode(p_org), name=crate::apis::urlencode(p_name));
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_actions_set_selected_repos_for_org_variable_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashSetSelectedReposForOrgVariableError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Replaces the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\"   OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
pub async fn actions_slash_set_selected_repositories_enabled_github_actions_organization(configuration: &configuration::Configuration, org: &str, actions_set_selected_repositories_enabled_github_actions_organization_request: models::ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest) -> Result<(), Error<ActionsSlashSetSelectedRepositoriesEnabledGithubActionsOrganizationError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_actions_set_selected_repositories_enabled_github_actions_organization_request = actions_set_selected_repositories_enabled_github_actions_organization_request;

    let uri_str = format!("{}/orgs/{org}/actions/permissions/repositories", configuration.base_path, org=crate::apis::urlencode(p_org));
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_actions_set_selected_repositories_enabled_github_actions_organization_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashSetSelectedRepositoriesEnabledGithubActionsOrganizationError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Replaces the list of self-hosted runners that are part of an organization runner group.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
pub async fn actions_slash_set_self_hosted_runners_in_group_for_org(configuration: &configuration::Configuration, org: &str, runner_group_id: i32, actions_set_self_hosted_runners_in_group_for_org_request: models::ActionsSetSelfHostedRunnersInGroupForOrgRequest) -> Result<(), Error<ActionsSlashSetSelfHostedRunnersInGroupForOrgError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_runner_group_id = runner_group_id;
    let p_actions_set_self_hosted_runners_in_group_for_org_request = actions_set_self_hosted_runners_in_group_for_org_request;

    let uri_str = format!("{}/orgs/{org}/actions/runner-groups/{runner_group_id}/runners", configuration.base_path, org=crate::apis::urlencode(p_org), runner_group_id=p_runner_group_id);
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_actions_set_self_hosted_runners_in_group_for_org_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashSetSelfHostedRunnersInGroupForOrgError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Sets the level of access that workflows outside of the repository have to actions and reusable workflows in the repository. This endpoint only applies to private repositories. For more information, see \"[Allowing access to components in a private repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-a-private-repository)\".  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
pub async fn actions_slash_set_workflow_access_to_repository(configuration: &configuration::Configuration, owner: &str, repo: &str, actions_workflow_access_to_repository: models::ActionsWorkflowAccessToRepository) -> Result<(), Error<ActionsSlashSetWorkflowAccessToRepositoryError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;
    let p_actions_workflow_access_to_repository = actions_workflow_access_to_repository;

    let uri_str = format!("{}/repos/{owner}/{repo}/actions/permissions/access", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo));
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_actions_workflow_access_to_repository);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashSetWorkflowAccessToRepositoryError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Updates an environment variable that you can reference in a GitHub Actions workflow.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
pub async fn actions_slash_update_environment_variable(configuration: &configuration::Configuration, owner: &str, repo: &str, name: &str, environment_name: &str, actions_update_repo_variable_request: models::ActionsUpdateRepoVariableRequest) -> Result<(), Error<ActionsSlashUpdateEnvironmentVariableError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;
    let p_name = name;
    let p_environment_name = environment_name;
    let p_actions_update_repo_variable_request = actions_update_repo_variable_request;

    let uri_str = format!("{}/repos/{owner}/{repo}/environments/{environment_name}/variables/{name}", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo), name=crate::apis::urlencode(p_name), environment_name=crate::apis::urlencode(p_environment_name));
    let mut req_builder = configuration.client.request(reqwest::Method::PATCH, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_actions_update_repo_variable_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashUpdateEnvironmentVariableError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Updates a GitHub-hosted runner for an organization. OAuth app tokens and personal access tokens (classic) need the `manage_runners:org` scope to use this endpoint.
pub async fn actions_slash_update_hosted_runner_for_org(configuration: &configuration::Configuration, org: &str, hosted_runner_id: i32, actions_update_hosted_runner_for_org_request: models::ActionsUpdateHostedRunnerForOrgRequest) -> Result<models::ActionsHostedRunner, Error<ActionsSlashUpdateHostedRunnerForOrgError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_hosted_runner_id = hosted_runner_id;
    let p_actions_update_hosted_runner_for_org_request = actions_update_hosted_runner_for_org_request;

    let uri_str = format!("{}/orgs/{org}/actions/hosted-runners/{hosted_runner_id}", configuration.base_path, org=crate::apis::urlencode(p_org), hosted_runner_id=p_hosted_runner_id);
    let mut req_builder = configuration.client.request(reqwest::Method::PATCH, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_actions_update_hosted_runner_for_org_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ActionsHostedRunner`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ActionsHostedRunner`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashUpdateHostedRunnerForOrgError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Updates an organization variable that you can reference in a GitHub Actions workflow.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
pub async fn actions_slash_update_org_variable(configuration: &configuration::Configuration, org: &str, name: &str, actions_update_org_variable_request: models::ActionsUpdateOrgVariableRequest) -> Result<(), Error<ActionsSlashUpdateOrgVariableError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_name = name;
    let p_actions_update_org_variable_request = actions_update_org_variable_request;

    let uri_str = format!("{}/orgs/{org}/actions/variables/{name}", configuration.base_path, org=crate::apis::urlencode(p_org), name=crate::apis::urlencode(p_name));
    let mut req_builder = configuration.client.request(reqwest::Method::PATCH, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_actions_update_org_variable_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashUpdateOrgVariableError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Updates a repository variable that you can reference in a GitHub Actions workflow.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
pub async fn actions_slash_update_repo_variable(configuration: &configuration::Configuration, owner: &str, repo: &str, name: &str, actions_update_repo_variable_request: models::ActionsUpdateRepoVariableRequest) -> Result<(), Error<ActionsSlashUpdateRepoVariableError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;
    let p_name = name;
    let p_actions_update_repo_variable_request = actions_update_repo_variable_request;

    let uri_str = format!("{}/repos/{owner}/{repo}/actions/variables/{name}", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo), name=crate::apis::urlencode(p_name));
    let mut req_builder = configuration.client.request(reqwest::Method::PATCH, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_actions_update_repo_variable_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashUpdateRepoVariableError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Updates the `name` and `visibility` of a self-hosted runner group in an organization.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
pub async fn actions_slash_update_self_hosted_runner_group_for_org(configuration: &configuration::Configuration, org: &str, runner_group_id: i32, actions_update_self_hosted_runner_group_for_org_request: models::ActionsUpdateSelfHostedRunnerGroupForOrgRequest) -> Result<models::RunnerGroupsOrg, Error<ActionsSlashUpdateSelfHostedRunnerGroupForOrgError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_runner_group_id = runner_group_id;
    let p_actions_update_self_hosted_runner_group_for_org_request = actions_update_self_hosted_runner_group_for_org_request;

    let uri_str = format!("{}/orgs/{org}/actions/runner-groups/{runner_group_id}", configuration.base_path, org=crate::apis::urlencode(p_org), runner_group_id=p_runner_group_id);
    let mut req_builder = configuration.client.request(reqwest::Method::PATCH, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_actions_update_self_hosted_runner_group_for_org_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::RunnerGroupsOrg`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::RunnerGroupsOrg`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ActionsSlashUpdateSelfHostedRunnerGroupForOrgError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

