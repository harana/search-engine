/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`copilot_slash_add_copilot_seats_for_teams`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CopilotSlashAddCopilotSeatsForTeamsError {
    Status500(models::BasicError),
    Status401(models::BasicError),
    Status403(models::BasicError),
    Status404(models::BasicError),
    Status422(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`copilot_slash_add_copilot_seats_for_users`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CopilotSlashAddCopilotSeatsForUsersError {
    Status500(models::BasicError),
    Status401(models::BasicError),
    Status403(models::BasicError),
    Status404(models::BasicError),
    Status422(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`copilot_slash_cancel_copilot_seat_assignment_for_teams`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CopilotSlashCancelCopilotSeatAssignmentForTeamsError {
    Status500(models::BasicError),
    Status401(models::BasicError),
    Status403(models::BasicError),
    Status404(models::BasicError),
    Status422(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`copilot_slash_cancel_copilot_seat_assignment_for_users`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CopilotSlashCancelCopilotSeatAssignmentForUsersError {
    Status500(models::BasicError),
    Status401(models::BasicError),
    Status403(models::BasicError),
    Status404(models::BasicError),
    Status422(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`copilot_slash_copilot_metrics_for_organization`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CopilotSlashCopilotMetricsForOrganizationError {
    Status500(models::BasicError),
    Status403(models::BasicError),
    Status404(models::BasicError),
    Status422(models::BasicError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`copilot_slash_copilot_metrics_for_team`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CopilotSlashCopilotMetricsForTeamError {
    Status500(models::BasicError),
    Status403(models::BasicError),
    Status404(models::BasicError),
    Status422(models::BasicError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`copilot_slash_get_copilot_organization_details`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CopilotSlashGetCopilotOrganizationDetailsError {
    Status500(models::BasicError),
    Status401(models::BasicError),
    Status403(models::BasicError),
    Status404(models::BasicError),
    Status422(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`copilot_slash_get_copilot_seat_details_for_user`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CopilotSlashGetCopilotSeatDetailsForUserError {
    Status500(models::BasicError),
    Status401(models::BasicError),
    Status403(models::BasicError),
    Status404(models::BasicError),
    Status422(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`copilot_slash_list_copilot_seats`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CopilotSlashListCopilotSeatsError {
    Status500(models::BasicError),
    Status401(models::BasicError),
    Status403(models::BasicError),
    Status404(models::BasicError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`copilot_slash_usage_metrics_for_org`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CopilotSlashUsageMetricsForOrgError {
    Status500(models::BasicError),
    Status401(models::BasicError),
    Status403(models::BasicError),
    Status404(models::BasicError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`copilot_slash_usage_metrics_for_team`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CopilotSlashUsageMetricsForTeamError {
    Status500(models::BasicError),
    Status401(models::BasicError),
    Status403(models::BasicError),
    Status404(models::BasicError),
    UnknownValue(serde_json::Value),
}


/// > [!NOTE] > This endpoint is in public preview and is subject to change.  Purchases a GitHub Copilot seat for all users within each specified team. The organization will be billed for each seat based on the organization's Copilot plan. For more information about Copilot pricing, see \"[About billing for GitHub Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-the-copilot-subscription-for-your-organization/about-billing-for-github-copilot-in-your-organization).\"  Only organization owners can purchase Copilot seats for their organization members. The organization must have a Copilot Business or Copilot Enterprise subscription and a configured suggestion matching policy. For more information about setting up a Copilot subscription, see \"[Subscribing to Copilot for your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-the-copilot-subscription-for-your-organization/subscribing-to-copilot-for-your-organization).\" For more information about setting a suggestion matching policy, see \"[Managing policies for Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/setting-policies-for-copilot-in-your-organization/managing-policies-for-copilot-in-your-organization#policies-for-suggestion-matching).\"  The response contains the total number of new seats that were created and existing seats that were refreshed.  OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `admin:org` scopes to use this endpoint.
pub async fn copilot_slash_add_copilot_seats_for_teams(configuration: &configuration::Configuration, org: &str, copilot_add_copilot_seats_for_teams_request: models::CopilotAddCopilotSeatsForTeamsRequest) -> Result<models::CopilotAddCopilotSeatsForTeams201Response, Error<CopilotSlashAddCopilotSeatsForTeamsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_copilot_add_copilot_seats_for_teams_request = copilot_add_copilot_seats_for_teams_request;

    let uri_str = format!("{}/orgs/{org}/copilot/billing/selected_teams", configuration.base_path, org=crate::apis::urlencode(p_org));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_copilot_add_copilot_seats_for_teams_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::CopilotAddCopilotSeatsForTeams201Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::CopilotAddCopilotSeatsForTeams201Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<CopilotSlashAddCopilotSeatsForTeamsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// > [!NOTE] > This endpoint is in public preview and is subject to change.  Purchases a GitHub Copilot seat for each user specified. The organization will be billed for each seat based on the organization's Copilot plan. For more information about Copilot pricing, see \"[About billing for GitHub Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-the-copilot-subscription-for-your-organization/about-billing-for-github-copilot-in-your-organization).\"  Only organization owners can purchase Copilot seats for their organization members. The organization must have a Copilot Business or Copilot Enterprise subscription and a configured suggestion matching policy. For more information about setting up a Copilot subscription, see \"[Subscribing to Copilot for your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-the-copilot-subscription-for-your-organization/subscribing-to-copilot-for-your-organization).\" For more information about setting a suggestion matching policy, see \"[Managing policies for Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/setting-policies-for-copilot-in-your-organization/managing-policies-for-copilot-in-your-organization#policies-for-suggestion-matching).\"  The response contains the total number of new seats that were created and existing seats that were refreshed.  OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `admin:org` scopes to use this endpoint.
pub async fn copilot_slash_add_copilot_seats_for_users(configuration: &configuration::Configuration, org: &str, copilot_add_copilot_seats_for_users_request: models::CopilotAddCopilotSeatsForUsersRequest) -> Result<models::CopilotAddCopilotSeatsForUsers201Response, Error<CopilotSlashAddCopilotSeatsForUsersError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_copilot_add_copilot_seats_for_users_request = copilot_add_copilot_seats_for_users_request;

    let uri_str = format!("{}/orgs/{org}/copilot/billing/selected_users", configuration.base_path, org=crate::apis::urlencode(p_org));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_copilot_add_copilot_seats_for_users_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::CopilotAddCopilotSeatsForUsers201Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::CopilotAddCopilotSeatsForUsers201Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<CopilotSlashAddCopilotSeatsForUsersError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// > [!NOTE] > This endpoint is in public preview and is subject to change.  Sets seats for all members of each team specified to \"pending cancellation\". This will cause the members of the specified team(s) to lose access to GitHub Copilot at the end of the current billing cycle unless they retain access through another team. For more information about disabling access to Copilot, see \"[Revoking access to Copilot for members of your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-access-to-github-copilot-in-your-organization/revoking-access-to-copilot-for-members-of-your-organization).\"  Only organization owners can cancel Copilot seats for their organization members.  The response contains the total number of seats set to \"pending cancellation\".  OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `admin:org` scopes to use this endpoint.
pub async fn copilot_slash_cancel_copilot_seat_assignment_for_teams(configuration: &configuration::Configuration, org: &str, copilot_cancel_copilot_seat_assignment_for_teams_request: models::CopilotCancelCopilotSeatAssignmentForTeamsRequest) -> Result<models::CopilotCancelCopilotSeatAssignmentForTeams200Response, Error<CopilotSlashCancelCopilotSeatAssignmentForTeamsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_copilot_cancel_copilot_seat_assignment_for_teams_request = copilot_cancel_copilot_seat_assignment_for_teams_request;

    let uri_str = format!("{}/orgs/{org}/copilot/billing/selected_teams", configuration.base_path, org=crate::apis::urlencode(p_org));
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_copilot_cancel_copilot_seat_assignment_for_teams_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::CopilotCancelCopilotSeatAssignmentForTeams200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::CopilotCancelCopilotSeatAssignmentForTeams200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<CopilotSlashCancelCopilotSeatAssignmentForTeamsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// > [!NOTE] > This endpoint is in public preview and is subject to change.  Sets seats for all users specified to \"pending cancellation\". This will cause the specified users to lose access to GitHub Copilot at the end of the current billing cycle unless they retain access through team membership. For more information about disabling access to Copilot, see \"[Revoking access to Copilot for members of your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/managing-access-to-github-copilot-in-your-organization/revoking-access-to-copilot-for-members-of-your-organization).\"  Only organization owners can cancel Copilot seats for their organization members.  The response contains the total number of seats set to \"pending cancellation\".  OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `admin:org` scopes to use this endpoint.
pub async fn copilot_slash_cancel_copilot_seat_assignment_for_users(configuration: &configuration::Configuration, org: &str, copilot_cancel_copilot_seat_assignment_for_users_request: models::CopilotCancelCopilotSeatAssignmentForUsersRequest) -> Result<models::CopilotCancelCopilotSeatAssignmentForUsers200Response, Error<CopilotSlashCancelCopilotSeatAssignmentForUsersError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_copilot_cancel_copilot_seat_assignment_for_users_request = copilot_cancel_copilot_seat_assignment_for_users_request;

    let uri_str = format!("{}/orgs/{org}/copilot/billing/selected_users", configuration.base_path, org=crate::apis::urlencode(p_org));
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_copilot_cancel_copilot_seat_assignment_for_users_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::CopilotCancelCopilotSeatAssignmentForUsers200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::CopilotCancelCopilotSeatAssignmentForUsers200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<CopilotSlashCancelCopilotSeatAssignmentForUsersError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Use this endpoint to see a breakdown of aggregated metrics for various GitHub Copilot features. See the response schema tab for detailed metrics definitions.  > [!NOTE] > This endpoint will only return results for a given day if the organization contained **five or more members with active Copilot licenses** on that day, as evaluated at the end of that day.  The response contains metrics for up to 28 days prior. Metrics are processed once per day for the previous day, and the response will only include data up until yesterday. In order for an end user to be counted towards these metrics, they must have telemetry enabled in their IDE.  To access this endpoint, the Copilot Metrics API access policy must be enabled for the organization. Only organization owners and owners and billing managers of the parent enterprise can view Copilot metrics.  OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot`, `read:org`, or `read:enterprise` scopes to use this endpoint.
pub async fn copilot_slash_copilot_metrics_for_organization(configuration: &configuration::Configuration, org: &str, since: Option<&str>, until: Option<&str>, page: Option<i32>, per_page: Option<i32>) -> Result<Vec<models::CopilotUsageMetricsDay>, Error<CopilotSlashCopilotMetricsForOrganizationError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_since = since;
    let p_until = until;
    let p_page = page;
    let p_per_page = per_page;

    let uri_str = format!("{}/orgs/{org}/copilot/metrics", configuration.base_path, org=crate::apis::urlencode(p_org));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_since {
        req_builder = req_builder.query(&[("since", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_until {
        req_builder = req_builder.query(&[("until", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_per_page {
        req_builder = req_builder.query(&[("per_page", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::CopilotUsageMetricsDay&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::CopilotUsageMetricsDay&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<CopilotSlashCopilotMetricsForOrganizationError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Use this endpoint to see a breakdown of aggregated metrics for various GitHub Copilot features. See the response schema tab for detailed metrics definitions.  > [!NOTE] > This endpoint will only return results for a given day if the team had **five or more members with active Copilot licenses** on that day, as evaluated at the end of that day.  The response contains metrics for up to 28 days prior. Metrics are processed once per day for the previous day, and the response will only include data up until yesterday. In order for an end user to be counted towards these metrics, they must have telemetry enabled in their IDE.  To access this endpoint, the Copilot Metrics API access policy must be enabled for the organization containing the team within GitHub settings. Only organization owners for the organization that contains this team and owners and billing managers of the parent enterprise can view Copilot metrics for a team.  OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot`, `read:org`, or `read:enterprise` scopes to use this endpoint.
pub async fn copilot_slash_copilot_metrics_for_team(configuration: &configuration::Configuration, org: &str, team_slug: &str, since: Option<&str>, until: Option<&str>, page: Option<i32>, per_page: Option<i32>) -> Result<Vec<models::CopilotUsageMetricsDay>, Error<CopilotSlashCopilotMetricsForTeamError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_team_slug = team_slug;
    let p_since = since;
    let p_until = until;
    let p_page = page;
    let p_per_page = per_page;

    let uri_str = format!("{}/orgs/{org}/team/{team_slug}/copilot/metrics", configuration.base_path, org=crate::apis::urlencode(p_org), team_slug=crate::apis::urlencode(p_team_slug));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_since {
        req_builder = req_builder.query(&[("since", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_until {
        req_builder = req_builder.query(&[("until", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_per_page {
        req_builder = req_builder.query(&[("per_page", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::CopilotUsageMetricsDay&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::CopilotUsageMetricsDay&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<CopilotSlashCopilotMetricsForTeamError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// > [!NOTE] > This endpoint is in public preview and is subject to change.  Gets information about an organization's Copilot subscription, including seat breakdown and feature policies. To configure these settings, go to your organization's settings on GitHub.com. For more information, see \"[Managing policies for Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-policies-for-copilot-business-in-your-organization).\"  Only organization owners can view details about the organization's Copilot Business or Copilot Enterprise subscription.  OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `read:org` scopes to use this endpoint.
pub async fn copilot_slash_get_copilot_organization_details(configuration: &configuration::Configuration, org: &str) -> Result<models::CopilotOrganizationDetails, Error<CopilotSlashGetCopilotOrganizationDetailsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;

    let uri_str = format!("{}/orgs/{org}/copilot/billing", configuration.base_path, org=crate::apis::urlencode(p_org));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::CopilotOrganizationDetails`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::CopilotOrganizationDetails`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<CopilotSlashGetCopilotOrganizationDetailsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// > [!NOTE] > This endpoint is in public preview and is subject to change.  Gets the GitHub Copilot seat details for a member of an organization who currently has access to GitHub Copilot.  The seat object contains information about the user's most recent Copilot activity. Users must have telemetry enabled in their IDE for Copilot in the IDE activity to be reflected in `last_activity_at`. For more information about activity data, see \"[Reviewing user activity data for Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/reviewing-activity-related-to-github-copilot-in-your-organization/reviewing-user-activity-data-for-copilot-in-your-organization).\"  Only organization owners can view Copilot seat assignment details for members of their organization.  OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `read:org` scopes to use this endpoint.
pub async fn copilot_slash_get_copilot_seat_details_for_user(configuration: &configuration::Configuration, org: &str, username: &str) -> Result<models::CopilotSeatDetails, Error<CopilotSlashGetCopilotSeatDetailsForUserError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_username = username;

    let uri_str = format!("{}/orgs/{org}/members/{username}/copilot", configuration.base_path, org=crate::apis::urlencode(p_org), username=crate::apis::urlencode(p_username));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::CopilotSeatDetails`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::CopilotSeatDetails`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<CopilotSlashGetCopilotSeatDetailsForUserError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// > [!NOTE] > This endpoint is in public preview and is subject to change.  Lists all Copilot seats for which an organization with a Copilot Business or Copilot Enterprise subscription is currently being billed. Only organization owners can view assigned seats.  Each seat object contains information about the assigned user's most recent Copilot activity. Users must have telemetry enabled in their IDE for Copilot in the IDE activity to be reflected in `last_activity_at`. For more information about activity data, see \"[Reviewing user activity data for Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-github-copilot-in-your-organization/reviewing-activity-related-to-github-copilot-in-your-organization/reviewing-user-activity-data-for-copilot-in-your-organization).\"  OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `read:org` scopes to use this endpoint.
pub async fn copilot_slash_list_copilot_seats(configuration: &configuration::Configuration, org: &str, page: Option<i32>, per_page: Option<i32>) -> Result<models::CopilotListCopilotSeats200Response, Error<CopilotSlashListCopilotSeatsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_page = page;
    let p_per_page = per_page;

    let uri_str = format!("{}/orgs/{org}/copilot/billing/seats", configuration.base_path, org=crate::apis::urlencode(p_org));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_per_page {
        req_builder = req_builder.query(&[("per_page", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::CopilotListCopilotSeats200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::CopilotListCopilotSeats200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<CopilotSlashListCopilotSeatsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// > [!NOTE] > This endpoint is closing down. It will be accessible throughout February 2025, but will not return any new data after February 1st.  You can use this endpoint to see a daily breakdown of aggregated usage metrics for Copilot completions and Copilot Chat in the IDE across an organization, with a further breakdown of suggestions, acceptances, and number of active users by editor and language for each day. See the response schema tab for detailed metrics definitions.  The response contains metrics for up to 28 days prior. Usage metrics are processed once per day for the previous day, and the response will only include data up until yesterday. In order for an end user to be counted towards these metrics, they must have telemetry enabled in their IDE.  Organization owners, and owners and billing managers of the parent enterprise, can view Copilot usage metrics.  OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot`, `read:org`, or `read:enterprise` scopes to use this endpoint.
pub async fn copilot_slash_usage_metrics_for_org(configuration: &configuration::Configuration, org: &str, since: Option<&str>, until: Option<&str>, page: Option<i32>, per_page: Option<i32>) -> Result<Vec<models::CopilotUsageMetrics>, Error<CopilotSlashUsageMetricsForOrgError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_since = since;
    let p_until = until;
    let p_page = page;
    let p_per_page = per_page;

    let uri_str = format!("{}/orgs/{org}/copilot/usage", configuration.base_path, org=crate::apis::urlencode(p_org));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_since {
        req_builder = req_builder.query(&[("since", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_until {
        req_builder = req_builder.query(&[("until", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_per_page {
        req_builder = req_builder.query(&[("per_page", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::CopilotUsageMetrics&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::CopilotUsageMetrics&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<CopilotSlashUsageMetricsForOrgError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// > [!NOTE] > This endpoint is closing down. It will be accessible throughout February 2025, but will not return any new data after February 1st.  You can use this endpoint to see a daily breakdown of aggregated usage metrics for Copilot completions and Copilot Chat in the IDE for users within a team, with a further breakdown of suggestions, acceptances, and number of active users by editor and language for each day. See the response schema tab for detailed metrics definitions.  The response contains metrics for up to 28 days prior. Usage metrics are processed once per day for the previous day, and the response will only include data up until yesterday. In order for an end user to be counted towards these metrics, they must have telemetry enabled in their IDE.  > [!NOTE] > This endpoint will only return results for a given day if the team had five or more members with active Copilot licenses, as evaluated at the end of that day.  Organization owners for the organization that contains this team, and owners and billing managers of the parent enterprise can view Copilot usage metrics for a team.  OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot`, `read:org`, or `read:enterprise` scopes to use this endpoint.
pub async fn copilot_slash_usage_metrics_for_team(configuration: &configuration::Configuration, org: &str, team_slug: &str, since: Option<&str>, until: Option<&str>, page: Option<i32>, per_page: Option<i32>) -> Result<Vec<models::CopilotUsageMetrics>, Error<CopilotSlashUsageMetricsForTeamError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_team_slug = team_slug;
    let p_since = since;
    let p_until = until;
    let p_page = page;
    let p_per_page = per_page;

    let uri_str = format!("{}/orgs/{org}/team/{team_slug}/copilot/usage", configuration.base_path, org=crate::apis::urlencode(p_org), team_slug=crate::apis::urlencode(p_team_slug));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_since {
        req_builder = req_builder.query(&[("since", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_until {
        req_builder = req_builder.query(&[("until", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_per_page {
        req_builder = req_builder.query(&[("per_page", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::CopilotUsageMetrics&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::CopilotUsageMetrics&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<CopilotSlashUsageMetricsForTeamError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

