/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`hosted_compute_slash_create_network_configuration_for_org`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum HostedComputeSlashCreateNetworkConfigurationForOrgError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`hosted_compute_slash_delete_network_configuration_from_org`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum HostedComputeSlashDeleteNetworkConfigurationFromOrgError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`hosted_compute_slash_get_network_configuration_for_org`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum HostedComputeSlashGetNetworkConfigurationForOrgError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`hosted_compute_slash_get_network_settings_for_org`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum HostedComputeSlashGetNetworkSettingsForOrgError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`hosted_compute_slash_list_network_configurations_for_org`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum HostedComputeSlashListNetworkConfigurationsForOrgError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`hosted_compute_slash_update_network_configuration_for_org`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum HostedComputeSlashUpdateNetworkConfigurationForOrgError {
    UnknownValue(serde_json::Value),
}


/// Creates a hosted compute network configuration for an organization.  OAuth app tokens and personal access tokens (classic) need the `write:network_configurations` scope to use this endpoint.
pub async fn hosted_compute_slash_create_network_configuration_for_org(configuration: &configuration::Configuration, org: &str, hosted_compute_create_network_configuration_for_org_request: models::HostedComputeCreateNetworkConfigurationForOrgRequest) -> Result<models::NetworkConfiguration, Error<HostedComputeSlashCreateNetworkConfigurationForOrgError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_hosted_compute_create_network_configuration_for_org_request = hosted_compute_create_network_configuration_for_org_request;

    let uri_str = format!("{}/orgs/{org}/settings/network-configurations", configuration.base_path, org=crate::apis::urlencode(p_org));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_hosted_compute_create_network_configuration_for_org_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::NetworkConfiguration`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::NetworkConfiguration`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<HostedComputeSlashCreateNetworkConfigurationForOrgError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Deletes a hosted compute network configuration from an organization.  OAuth app tokens and personal access tokens (classic) need the `write:network_configurations` scope to use this endpoint.
pub async fn hosted_compute_slash_delete_network_configuration_from_org(configuration: &configuration::Configuration, org: &str, network_configuration_id: &str) -> Result<(), Error<HostedComputeSlashDeleteNetworkConfigurationFromOrgError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_network_configuration_id = network_configuration_id;

    let uri_str = format!("{}/orgs/{org}/settings/network-configurations/{network_configuration_id}", configuration.base_path, org=crate::apis::urlencode(p_org), network_configuration_id=crate::apis::urlencode(p_network_configuration_id));
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<HostedComputeSlashDeleteNetworkConfigurationFromOrgError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Gets a hosted compute network configuration configured in an organization.  OAuth app tokens and personal access tokens (classic) need the `read:network_configurations` scope to use this endpoint.
pub async fn hosted_compute_slash_get_network_configuration_for_org(configuration: &configuration::Configuration, org: &str, network_configuration_id: &str) -> Result<models::NetworkConfiguration, Error<HostedComputeSlashGetNetworkConfigurationForOrgError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_network_configuration_id = network_configuration_id;

    let uri_str = format!("{}/orgs/{org}/settings/network-configurations/{network_configuration_id}", configuration.base_path, org=crate::apis::urlencode(p_org), network_configuration_id=crate::apis::urlencode(p_network_configuration_id));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::NetworkConfiguration`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::NetworkConfiguration`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<HostedComputeSlashGetNetworkConfigurationForOrgError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Gets a hosted compute network settings resource configured for an organization.  OAuth app tokens and personal access tokens (classic) need the `read:network_configurations` scope to use this endpoint.
pub async fn hosted_compute_slash_get_network_settings_for_org(configuration: &configuration::Configuration, org: &str, network_settings_id: &str) -> Result<models::NetworkSettings, Error<HostedComputeSlashGetNetworkSettingsForOrgError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_network_settings_id = network_settings_id;

    let uri_str = format!("{}/orgs/{org}/settings/network-settings/{network_settings_id}", configuration.base_path, org=crate::apis::urlencode(p_org), network_settings_id=crate::apis::urlencode(p_network_settings_id));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::NetworkSettings`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::NetworkSettings`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<HostedComputeSlashGetNetworkSettingsForOrgError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Lists all hosted compute network configurations configured in an organization.  OAuth app tokens and personal access tokens (classic) need the `read:network_configurations` scope to use this endpoint.
pub async fn hosted_compute_slash_list_network_configurations_for_org(configuration: &configuration::Configuration, org: &str, per_page: Option<i32>, page: Option<i32>) -> Result<models::HostedComputeListNetworkConfigurationsForOrg200Response, Error<HostedComputeSlashListNetworkConfigurationsForOrgError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_per_page = per_page;
    let p_page = page;

    let uri_str = format!("{}/orgs/{org}/settings/network-configurations", configuration.base_path, org=crate::apis::urlencode(p_org));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_per_page {
        req_builder = req_builder.query(&[("per_page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::HostedComputeListNetworkConfigurationsForOrg200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::HostedComputeListNetworkConfigurationsForOrg200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<HostedComputeSlashListNetworkConfigurationsForOrgError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Updates a hosted compute network configuration for an organization.  OAuth app tokens and personal access tokens (classic) need the `write:network_configurations` scope to use this endpoint.
pub async fn hosted_compute_slash_update_network_configuration_for_org(configuration: &configuration::Configuration, org: &str, network_configuration_id: &str, hosted_compute_update_network_configuration_for_org_request: models::HostedComputeUpdateNetworkConfigurationForOrgRequest) -> Result<models::NetworkConfiguration, Error<HostedComputeSlashUpdateNetworkConfigurationForOrgError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_network_configuration_id = network_configuration_id;
    let p_hosted_compute_update_network_configuration_for_org_request = hosted_compute_update_network_configuration_for_org_request;

    let uri_str = format!("{}/orgs/{org}/settings/network-configurations/{network_configuration_id}", configuration.base_path, org=crate::apis::urlencode(p_org), network_configuration_id=crate::apis::urlencode(p_network_configuration_id));
    let mut req_builder = configuration.client.request(reqwest::Method::PATCH, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_hosted_compute_update_network_configuration_for_org_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::NetworkConfiguration`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::NetworkConfiguration`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<HostedComputeSlashUpdateNetworkConfigurationForOrgError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

