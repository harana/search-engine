/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`api_insights_slash_get_route_stats_by_actor`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiInsightsSlashGetRouteStatsByActorError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_insights_slash_get_subject_stats`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiInsightsSlashGetSubjectStatsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_insights_slash_get_summary_stats`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiInsightsSlashGetSummaryStatsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_insights_slash_get_summary_stats_by_actor`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiInsightsSlashGetSummaryStatsByActorError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_insights_slash_get_summary_stats_by_user`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiInsightsSlashGetSummaryStatsByUserError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_insights_slash_get_time_stats`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiInsightsSlashGetTimeStatsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_insights_slash_get_time_stats_by_actor`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiInsightsSlashGetTimeStatsByActorError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_insights_slash_get_time_stats_by_user`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiInsightsSlashGetTimeStatsByUserError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_insights_slash_get_user_stats`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiInsightsSlashGetUserStatsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orgs_slash_add_security_manager_team`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashAddSecurityManagerTeamError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orgs_slash_assign_team_to_org_role`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashAssignTeamToOrgRoleError {
    Status404(),
    Status422(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orgs_slash_assign_user_to_org_role`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashAssignUserToOrgRoleError {
    Status404(),
    Status422(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orgs_slash_block_user`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashBlockUserError {
    Status422(models::ValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orgs_slash_cancel_invitation`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashCancelInvitationError {
    Status422(models::ValidationError),
    Status404(models::BasicError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orgs_slash_check_blocked_user`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashCheckBlockedUserError {
    Status404(models::BasicError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orgs_slash_check_membership_for_user`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashCheckMembershipForUserError {
    Status404(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orgs_slash_check_public_membership_for_user`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashCheckPublicMembershipForUserError {
    Status404(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orgs_slash_convert_member_to_outside_collaborator`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashConvertMemberToOutsideCollaboratorError {
    Status403(),
    Status404(models::BasicError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orgs_slash_create_invitation`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashCreateInvitationError {
    Status422(models::ValidationError),
    Status404(models::BasicError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orgs_slash_create_issue_type`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashCreateIssueTypeError {
    Status404(models::BasicError),
    Status422(models::ValidationErrorSimple),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orgs_slash_create_or_update_custom_properties`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashCreateOrUpdateCustomPropertiesError {
    Status403(models::BasicError),
    Status404(models::BasicError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orgs_slash_create_or_update_custom_properties_values_for_repos`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashCreateOrUpdateCustomPropertiesValuesForReposError {
    Status403(models::BasicError),
    Status404(models::BasicError),
    Status422(models::ValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orgs_slash_create_or_update_custom_property`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashCreateOrUpdateCustomPropertyError {
    Status403(models::BasicError),
    Status404(models::BasicError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orgs_slash_create_webhook`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashCreateWebhookError {
    Status422(models::ValidationError),
    Status404(models::BasicError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orgs_slash_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashDeleteError {
    Status404(models::BasicError),
    Status403(models::BasicError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orgs_slash_delete_issue_type`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashDeleteIssueTypeError {
    Status422(models::ValidationErrorSimple),
    Status404(models::BasicError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orgs_slash_delete_webhook`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashDeleteWebhookError {
    Status404(models::BasicError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orgs_slash_enable_or_disable_security_product_on_all_org_repos`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashEnableOrDisableSecurityProductOnAllOrgReposError {
    Status422(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orgs_slash_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashGetError {
    Status404(models::BasicError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orgs_slash_get_all_custom_properties`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashGetAllCustomPropertiesError {
    Status403(models::BasicError),
    Status404(models::BasicError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orgs_slash_get_custom_property`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashGetCustomPropertyError {
    Status403(models::BasicError),
    Status404(models::BasicError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orgs_slash_get_membership_for_authenticated_user`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashGetMembershipForAuthenticatedUserError {
    Status403(models::BasicError),
    Status404(models::BasicError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orgs_slash_get_membership_for_user`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashGetMembershipForUserError {
    Status404(models::BasicError),
    Status403(models::BasicError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orgs_slash_get_org_role`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashGetOrgRoleError {
    Status404(models::BasicError),
    Status422(models::ValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orgs_slash_get_org_ruleset_history`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashGetOrgRulesetHistoryError {
    Status404(models::BasicError),
    Status500(models::BasicError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orgs_slash_get_org_ruleset_version`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashGetOrgRulesetVersionError {
    Status404(models::BasicError),
    Status500(models::BasicError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orgs_slash_get_webhook`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashGetWebhookError {
    Status404(models::BasicError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orgs_slash_get_webhook_config_for_org`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashGetWebhookConfigForOrgError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orgs_slash_get_webhook_delivery`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashGetWebhookDeliveryError {
    Status400(models::BasicError),
    Status422(models::ValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orgs_slash_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashListError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orgs_slash_list_app_installations`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashListAppInstallationsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orgs_slash_list_attestations`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashListAttestationsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orgs_slash_list_blocked_users`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashListBlockedUsersError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orgs_slash_list_custom_properties_values_for_repos`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashListCustomPropertiesValuesForReposError {
    Status403(models::BasicError),
    Status404(models::BasicError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orgs_slash_list_failed_invitations`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashListFailedInvitationsError {
    Status404(models::BasicError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orgs_slash_list_for_authenticated_user`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashListForAuthenticatedUserError {
    Status403(models::BasicError),
    Status401(models::BasicError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orgs_slash_list_for_user`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashListForUserError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orgs_slash_list_invitation_teams`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashListInvitationTeamsError {
    Status404(models::BasicError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orgs_slash_list_issue_types`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashListIssueTypesError {
    Status404(models::BasicError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orgs_slash_list_members`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashListMembersError {
    Status422(models::ValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orgs_slash_list_memberships_for_authenticated_user`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashListMembershipsForAuthenticatedUserError {
    Status403(models::BasicError),
    Status401(models::BasicError),
    Status422(models::ValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orgs_slash_list_org_role_teams`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashListOrgRoleTeamsError {
    Status404(),
    Status422(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orgs_slash_list_org_role_users`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashListOrgRoleUsersError {
    Status404(),
    Status422(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orgs_slash_list_org_roles`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashListOrgRolesError {
    Status404(models::BasicError),
    Status422(models::ValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orgs_slash_list_outside_collaborators`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashListOutsideCollaboratorsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orgs_slash_list_pat_grant_repositories`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashListPatGrantRepositoriesError {
    Status500(models::BasicError),
    Status404(models::BasicError),
    Status403(models::BasicError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orgs_slash_list_pat_grant_request_repositories`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashListPatGrantRequestRepositoriesError {
    Status500(models::BasicError),
    Status404(models::BasicError),
    Status403(models::BasicError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orgs_slash_list_pat_grant_requests`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashListPatGrantRequestsError {
    Status500(models::BasicError),
    Status422(models::ValidationError),
    Status404(models::BasicError),
    Status403(models::BasicError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orgs_slash_list_pat_grants`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashListPatGrantsError {
    Status500(models::BasicError),
    Status422(models::ValidationError),
    Status404(models::BasicError),
    Status403(models::BasicError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orgs_slash_list_pending_invitations`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashListPendingInvitationsError {
    Status404(models::BasicError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orgs_slash_list_public_members`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashListPublicMembersError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orgs_slash_list_security_manager_teams`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashListSecurityManagerTeamsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orgs_slash_list_webhook_deliveries`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashListWebhookDeliveriesError {
    Status400(models::BasicError),
    Status422(models::ValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orgs_slash_list_webhooks`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashListWebhooksError {
    Status404(models::BasicError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orgs_slash_ping_webhook`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashPingWebhookError {
    Status404(models::BasicError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orgs_slash_redeliver_webhook_delivery`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashRedeliverWebhookDeliveryError {
    Status400(models::BasicError),
    Status422(models::ValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orgs_slash_remove_custom_property`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashRemoveCustomPropertyError {
    Status403(models::BasicError),
    Status404(models::BasicError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orgs_slash_remove_member`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashRemoveMemberError {
    Status403(models::BasicError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orgs_slash_remove_membership_for_user`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashRemoveMembershipForUserError {
    Status403(models::BasicError),
    Status404(models::BasicError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orgs_slash_remove_outside_collaborator`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashRemoveOutsideCollaboratorError {
    Status422(models::OrgsRemoveOutsideCollaborator422Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orgs_slash_remove_public_membership_for_authenticated_user`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashRemovePublicMembershipForAuthenticatedUserError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orgs_slash_remove_security_manager_team`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashRemoveSecurityManagerTeamError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orgs_slash_review_pat_grant_request`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashReviewPatGrantRequestError {
    Status500(models::BasicError),
    Status422(models::ValidationError),
    Status404(models::BasicError),
    Status403(models::BasicError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orgs_slash_review_pat_grant_requests_in_bulk`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashReviewPatGrantRequestsInBulkError {
    Status500(models::BasicError),
    Status422(models::ValidationError),
    Status404(models::BasicError),
    Status403(models::BasicError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orgs_slash_revoke_all_org_roles_team`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashRevokeAllOrgRolesTeamError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orgs_slash_revoke_all_org_roles_user`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashRevokeAllOrgRolesUserError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orgs_slash_revoke_org_role_team`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashRevokeOrgRoleTeamError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orgs_slash_revoke_org_role_user`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashRevokeOrgRoleUserError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orgs_slash_set_membership_for_user`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashSetMembershipForUserError {
    Status422(models::ValidationError),
    Status403(models::BasicError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orgs_slash_set_public_membership_for_authenticated_user`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashSetPublicMembershipForAuthenticatedUserError {
    Status403(models::BasicError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orgs_slash_unblock_user`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashUnblockUserError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orgs_slash_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashUpdateError {
    Status422(models::OrgsUpdate422Response),
    Status409(models::BasicError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orgs_slash_update_issue_type`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashUpdateIssueTypeError {
    Status404(models::BasicError),
    Status422(models::ValidationErrorSimple),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orgs_slash_update_membership_for_authenticated_user`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashUpdateMembershipForAuthenticatedUserError {
    Status403(models::BasicError),
    Status404(models::BasicError),
    Status422(models::ValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orgs_slash_update_pat_access`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashUpdatePatAccessError {
    Status500(models::BasicError),
    Status404(models::BasicError),
    Status403(models::BasicError),
    Status422(models::ValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orgs_slash_update_pat_accesses`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashUpdatePatAccessesError {
    Status500(models::BasicError),
    Status404(models::BasicError),
    Status403(models::BasicError),
    Status422(models::ValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orgs_slash_update_webhook`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashUpdateWebhookError {
    Status422(models::ValidationError),
    Status404(models::BasicError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orgs_slash_update_webhook_config_for_org`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashUpdateWebhookConfigForOrgError {
    UnknownValue(serde_json::Value),
}


/// Get API request count statistics for an actor broken down by route within a specified time frame.
pub async fn api_insights_slash_get_route_stats_by_actor(configuration: &configuration::Configuration, org: &str, actor_type: &str, actor_id: i32, min_timestamp: &str, max_timestamp: Option<&str>, page: Option<i32>, per_page: Option<i32>, direction: Option<&str>, sort: Option<Vec<String>>, api_route_substring: Option<&str>) -> Result<Vec<models::ApiInsightsRouteStatsInner>, Error<ApiInsightsSlashGetRouteStatsByActorError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_actor_type = actor_type;
    let p_actor_id = actor_id;
    let p_min_timestamp = min_timestamp;
    let p_max_timestamp = max_timestamp;
    let p_page = page;
    let p_per_page = per_page;
    let p_direction = direction;
    let p_sort = sort;
    let p_api_route_substring = api_route_substring;

    let uri_str = format!("{}/orgs/{org}/insights/api/route-stats/{actor_type}/{actor_id}", configuration.base_path, org=crate::apis::urlencode(p_org), actor_type=crate::apis::urlencode(p_actor_type), actor_id=p_actor_id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    req_builder = req_builder.query(&[("min_timestamp", &p_min_timestamp.to_string())]);
    if let Some(ref param_value) = p_max_timestamp {
        req_builder = req_builder.query(&[("max_timestamp", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_per_page {
        req_builder = req_builder.query(&[("per_page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_direction {
        req_builder = req_builder.query(&[("direction", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_sort {
        req_builder = match "multi" {
            "multi" => req_builder.query(&param_value.into_iter().map(|p| ("sort".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => req_builder.query(&[("sort", &param_value.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref param_value) = p_api_route_substring {
        req_builder = req_builder.query(&[("api_route_substring", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::ApiInsightsRouteStatsInner&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::ApiInsightsRouteStatsInner&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiInsightsSlashGetRouteStatsByActorError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get API request statistics for all subjects within an organization within a specified time frame. Subjects can be users or GitHub Apps.
pub async fn api_insights_slash_get_subject_stats(configuration: &configuration::Configuration, org: &str, min_timestamp: &str, max_timestamp: Option<&str>, page: Option<i32>, per_page: Option<i32>, direction: Option<&str>, sort: Option<Vec<String>>, subject_name_substring: Option<&str>) -> Result<Vec<models::ApiInsightsSubjectStatsInner>, Error<ApiInsightsSlashGetSubjectStatsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_min_timestamp = min_timestamp;
    let p_max_timestamp = max_timestamp;
    let p_page = page;
    let p_per_page = per_page;
    let p_direction = direction;
    let p_sort = sort;
    let p_subject_name_substring = subject_name_substring;

    let uri_str = format!("{}/orgs/{org}/insights/api/subject-stats", configuration.base_path, org=crate::apis::urlencode(p_org));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    req_builder = req_builder.query(&[("min_timestamp", &p_min_timestamp.to_string())]);
    if let Some(ref param_value) = p_max_timestamp {
        req_builder = req_builder.query(&[("max_timestamp", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_per_page {
        req_builder = req_builder.query(&[("per_page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_direction {
        req_builder = req_builder.query(&[("direction", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_sort {
        req_builder = match "multi" {
            "multi" => req_builder.query(&param_value.into_iter().map(|p| ("sort".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => req_builder.query(&[("sort", &param_value.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref param_value) = p_subject_name_substring {
        req_builder = req_builder.query(&[("subject_name_substring", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::ApiInsightsSubjectStatsInner&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::ApiInsightsSubjectStatsInner&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiInsightsSlashGetSubjectStatsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get overall statistics of API requests made within an organization by all users and apps within a specified time frame.
pub async fn api_insights_slash_get_summary_stats(configuration: &configuration::Configuration, org: &str, min_timestamp: &str, max_timestamp: Option<&str>) -> Result<models::ApiInsightsSummaryStats, Error<ApiInsightsSlashGetSummaryStatsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_min_timestamp = min_timestamp;
    let p_max_timestamp = max_timestamp;

    let uri_str = format!("{}/orgs/{org}/insights/api/summary-stats", configuration.base_path, org=crate::apis::urlencode(p_org));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    req_builder = req_builder.query(&[("min_timestamp", &p_min_timestamp.to_string())]);
    if let Some(ref param_value) = p_max_timestamp {
        req_builder = req_builder.query(&[("max_timestamp", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ApiInsightsSummaryStats`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ApiInsightsSummaryStats`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiInsightsSlashGetSummaryStatsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get overall statistics of API requests within the organization made by a specific actor. Actors can be GitHub App installations, OAuth apps or other tokens on behalf of a user.
pub async fn api_insights_slash_get_summary_stats_by_actor(configuration: &configuration::Configuration, org: &str, min_timestamp: &str, actor_type: &str, actor_id: i32, max_timestamp: Option<&str>) -> Result<models::ApiInsightsSummaryStats, Error<ApiInsightsSlashGetSummaryStatsByActorError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_min_timestamp = min_timestamp;
    let p_actor_type = actor_type;
    let p_actor_id = actor_id;
    let p_max_timestamp = max_timestamp;

    let uri_str = format!("{}/orgs/{org}/insights/api/summary-stats/{actor_type}/{actor_id}", configuration.base_path, org=crate::apis::urlencode(p_org), actor_type=crate::apis::urlencode(p_actor_type), actor_id=p_actor_id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    req_builder = req_builder.query(&[("min_timestamp", &p_min_timestamp.to_string())]);
    if let Some(ref param_value) = p_max_timestamp {
        req_builder = req_builder.query(&[("max_timestamp", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ApiInsightsSummaryStats`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ApiInsightsSummaryStats`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiInsightsSlashGetSummaryStatsByActorError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get overall statistics of API requests within the organization for a user.
pub async fn api_insights_slash_get_summary_stats_by_user(configuration: &configuration::Configuration, org: &str, user_id: &str, min_timestamp: &str, max_timestamp: Option<&str>) -> Result<models::ApiInsightsSummaryStats, Error<ApiInsightsSlashGetSummaryStatsByUserError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_user_id = user_id;
    let p_min_timestamp = min_timestamp;
    let p_max_timestamp = max_timestamp;

    let uri_str = format!("{}/orgs/{org}/insights/api/summary-stats/users/{user_id}", configuration.base_path, org=crate::apis::urlencode(p_org), user_id=crate::apis::urlencode(p_user_id));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    req_builder = req_builder.query(&[("min_timestamp", &p_min_timestamp.to_string())]);
    if let Some(ref param_value) = p_max_timestamp {
        req_builder = req_builder.query(&[("max_timestamp", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ApiInsightsSummaryStats`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ApiInsightsSummaryStats`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiInsightsSlashGetSummaryStatsByUserError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get the number of API requests and rate-limited requests made within an organization over a specified time period.
pub async fn api_insights_slash_get_time_stats(configuration: &configuration::Configuration, org: &str, min_timestamp: &str, timestamp_increment: &str, max_timestamp: Option<&str>) -> Result<Vec<models::ApiInsightsTimeStatsInner>, Error<ApiInsightsSlashGetTimeStatsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_min_timestamp = min_timestamp;
    let p_timestamp_increment = timestamp_increment;
    let p_max_timestamp = max_timestamp;

    let uri_str = format!("{}/orgs/{org}/insights/api/time-stats", configuration.base_path, org=crate::apis::urlencode(p_org));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    req_builder = req_builder.query(&[("min_timestamp", &p_min_timestamp.to_string())]);
    if let Some(ref param_value) = p_max_timestamp {
        req_builder = req_builder.query(&[("max_timestamp", &param_value.to_string())]);
    }
    req_builder = req_builder.query(&[("timestamp_increment", &p_timestamp_increment.to_string())]);
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::ApiInsightsTimeStatsInner&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::ApiInsightsTimeStatsInner&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiInsightsSlashGetTimeStatsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get the number of API requests and rate-limited requests made within an organization by a specific actor within a specified time period.
pub async fn api_insights_slash_get_time_stats_by_actor(configuration: &configuration::Configuration, org: &str, actor_type: &str, actor_id: i32, min_timestamp: &str, timestamp_increment: &str, max_timestamp: Option<&str>) -> Result<Vec<models::ApiInsightsTimeStatsInner>, Error<ApiInsightsSlashGetTimeStatsByActorError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_actor_type = actor_type;
    let p_actor_id = actor_id;
    let p_min_timestamp = min_timestamp;
    let p_timestamp_increment = timestamp_increment;
    let p_max_timestamp = max_timestamp;

    let uri_str = format!("{}/orgs/{org}/insights/api/time-stats/{actor_type}/{actor_id}", configuration.base_path, org=crate::apis::urlencode(p_org), actor_type=crate::apis::urlencode(p_actor_type), actor_id=p_actor_id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    req_builder = req_builder.query(&[("min_timestamp", &p_min_timestamp.to_string())]);
    if let Some(ref param_value) = p_max_timestamp {
        req_builder = req_builder.query(&[("max_timestamp", &param_value.to_string())]);
    }
    req_builder = req_builder.query(&[("timestamp_increment", &p_timestamp_increment.to_string())]);
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::ApiInsightsTimeStatsInner&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::ApiInsightsTimeStatsInner&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiInsightsSlashGetTimeStatsByActorError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get the number of API requests and rate-limited requests made within an organization by a specific user over a specified time period.
pub async fn api_insights_slash_get_time_stats_by_user(configuration: &configuration::Configuration, org: &str, user_id: &str, min_timestamp: &str, timestamp_increment: &str, max_timestamp: Option<&str>) -> Result<Vec<models::ApiInsightsTimeStatsInner>, Error<ApiInsightsSlashGetTimeStatsByUserError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_user_id = user_id;
    let p_min_timestamp = min_timestamp;
    let p_timestamp_increment = timestamp_increment;
    let p_max_timestamp = max_timestamp;

    let uri_str = format!("{}/orgs/{org}/insights/api/time-stats/users/{user_id}", configuration.base_path, org=crate::apis::urlencode(p_org), user_id=crate::apis::urlencode(p_user_id));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    req_builder = req_builder.query(&[("min_timestamp", &p_min_timestamp.to_string())]);
    if let Some(ref param_value) = p_max_timestamp {
        req_builder = req_builder.query(&[("max_timestamp", &param_value.to_string())]);
    }
    req_builder = req_builder.query(&[("timestamp_increment", &p_timestamp_increment.to_string())]);
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::ApiInsightsTimeStatsInner&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::ApiInsightsTimeStatsInner&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiInsightsSlashGetTimeStatsByUserError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get API usage statistics within an organization for a user broken down by the type of access.
pub async fn api_insights_slash_get_user_stats(configuration: &configuration::Configuration, org: &str, user_id: &str, min_timestamp: &str, max_timestamp: Option<&str>, page: Option<i32>, per_page: Option<i32>, direction: Option<&str>, sort: Option<Vec<String>>, actor_name_substring: Option<&str>) -> Result<Vec<models::ApiInsightsUserStatsInner>, Error<ApiInsightsSlashGetUserStatsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_user_id = user_id;
    let p_min_timestamp = min_timestamp;
    let p_max_timestamp = max_timestamp;
    let p_page = page;
    let p_per_page = per_page;
    let p_direction = direction;
    let p_sort = sort;
    let p_actor_name_substring = actor_name_substring;

    let uri_str = format!("{}/orgs/{org}/insights/api/user-stats/{user_id}", configuration.base_path, org=crate::apis::urlencode(p_org), user_id=crate::apis::urlencode(p_user_id));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    req_builder = req_builder.query(&[("min_timestamp", &p_min_timestamp.to_string())]);
    if let Some(ref param_value) = p_max_timestamp {
        req_builder = req_builder.query(&[("max_timestamp", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_per_page {
        req_builder = req_builder.query(&[("per_page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_direction {
        req_builder = req_builder.query(&[("direction", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_sort {
        req_builder = match "multi" {
            "multi" => req_builder.query(&param_value.into_iter().map(|p| ("sort".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => req_builder.query(&[("sort", &param_value.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref param_value) = p_actor_name_substring {
        req_builder = req_builder.query(&[("actor_name_substring", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::ApiInsightsUserStatsInner&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::ApiInsightsUserStatsInner&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiInsightsSlashGetUserStatsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// > [!WARNING] > **Closing down notice:** This operation is closing down and will be removed starting January 1, 2026. Please use the \"[Organization Roles](https://docs.github.com/rest/orgs/organization-roles)\" endpoints instead.
pub async fn orgs_slash_add_security_manager_team(configuration: &configuration::Configuration, org: &str, team_slug: &str) -> Result<(), Error<OrgsSlashAddSecurityManagerTeamError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_team_slug = team_slug;

    let uri_str = format!("{}/orgs/{org}/security-managers/teams/{team_slug}", configuration.base_path, org=crate::apis::urlencode(p_org), team_slug=crate::apis::urlencode(p_team_slug));
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<OrgsSlashAddSecurityManagerTeamError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Assigns an organization role to a team in an organization. For more information on organization roles, see \"[Using organization roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles).\"  The authenticated user must be an administrator for the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
pub async fn orgs_slash_assign_team_to_org_role(configuration: &configuration::Configuration, org: &str, team_slug: &str, role_id: i32) -> Result<(), Error<OrgsSlashAssignTeamToOrgRoleError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_team_slug = team_slug;
    let p_role_id = role_id;

    let uri_str = format!("{}/orgs/{org}/organization-roles/teams/{team_slug}/{role_id}", configuration.base_path, org=crate::apis::urlencode(p_org), team_slug=crate::apis::urlencode(p_team_slug), role_id=p_role_id);
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<OrgsSlashAssignTeamToOrgRoleError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Assigns an organization role to a member of an organization. For more information on organization roles, see \"[Using organization roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles).\"  The authenticated user must be an administrator for the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
pub async fn orgs_slash_assign_user_to_org_role(configuration: &configuration::Configuration, org: &str, username: &str, role_id: i32) -> Result<(), Error<OrgsSlashAssignUserToOrgRoleError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_username = username;
    let p_role_id = role_id;

    let uri_str = format!("{}/orgs/{org}/organization-roles/users/{username}/{role_id}", configuration.base_path, org=crate::apis::urlencode(p_org), username=crate::apis::urlencode(p_username), role_id=p_role_id);
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<OrgsSlashAssignUserToOrgRoleError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Blocks the given user on behalf of the specified organization and returns a 204. If the organization cannot block the given user a 422 is returned.
pub async fn orgs_slash_block_user(configuration: &configuration::Configuration, org: &str, username: &str) -> Result<(), Error<OrgsSlashBlockUserError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_username = username;

    let uri_str = format!("{}/orgs/{org}/blocks/{username}", configuration.base_path, org=crate::apis::urlencode(p_org), username=crate::apis::urlencode(p_username));
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<OrgsSlashBlockUserError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Cancel an organization invitation. In order to cancel an organization invitation, the authenticated user must be an organization owner.  This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
pub async fn orgs_slash_cancel_invitation(configuration: &configuration::Configuration, org: &str, invitation_id: i32) -> Result<(), Error<OrgsSlashCancelInvitationError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_invitation_id = invitation_id;

    let uri_str = format!("{}/orgs/{org}/invitations/{invitation_id}", configuration.base_path, org=crate::apis::urlencode(p_org), invitation_id=p_invitation_id);
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<OrgsSlashCancelInvitationError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Returns a 204 if the given user is blocked by the given organization. Returns a 404 if the organization is not blocking the user, or if the user account has been identified as spam by GitHub.
pub async fn orgs_slash_check_blocked_user(configuration: &configuration::Configuration, org: &str, username: &str) -> Result<(), Error<OrgsSlashCheckBlockedUserError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_username = username;

    let uri_str = format!("{}/orgs/{org}/blocks/{username}", configuration.base_path, org=crate::apis::urlencode(p_org), username=crate::apis::urlencode(p_username));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<OrgsSlashCheckBlockedUserError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Check if a user is, publicly or privately, a member of the organization.
pub async fn orgs_slash_check_membership_for_user(configuration: &configuration::Configuration, org: &str, username: &str) -> Result<(), Error<OrgsSlashCheckMembershipForUserError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_username = username;

    let uri_str = format!("{}/orgs/{org}/members/{username}", configuration.base_path, org=crate::apis::urlencode(p_org), username=crate::apis::urlencode(p_username));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<OrgsSlashCheckMembershipForUserError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Check if the provided user is a public member of the organization.
pub async fn orgs_slash_check_public_membership_for_user(configuration: &configuration::Configuration, org: &str, username: &str) -> Result<(), Error<OrgsSlashCheckPublicMembershipForUserError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_username = username;

    let uri_str = format!("{}/orgs/{org}/public_members/{username}", configuration.base_path, org=crate::apis::urlencode(p_org), username=crate::apis::urlencode(p_username));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<OrgsSlashCheckPublicMembershipForUserError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// When an organization member is converted to an outside collaborator, they'll only have access to the repositories that their current team membership allows. The user will no longer be a member of the organization. For more information, see \"[Converting an organization member to an outside collaborator](https://docs.github.com/articles/converting-an-organization-member-to-an-outside-collaborator/)\". Converting an organization member to an outside collaborator may be restricted by enterprise administrators. For more information, see \"[Enforcing repository management policies in your enterprise](https://docs.github.com/admin/policies/enforcing-policies-for-your-enterprise/enforcing-repository-management-policies-in-your-enterprise#enforcing-a-policy-for-inviting-outside-collaborators-to-repositories).\"
pub async fn orgs_slash_convert_member_to_outside_collaborator(configuration: &configuration::Configuration, org: &str, username: &str, orgs_convert_member_to_outside_collaborator_request: Option<models::OrgsConvertMemberToOutsideCollaboratorRequest>) -> Result<serde_json::Value, Error<OrgsSlashConvertMemberToOutsideCollaboratorError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_username = username;
    let p_orgs_convert_member_to_outside_collaborator_request = orgs_convert_member_to_outside_collaborator_request;

    let uri_str = format!("{}/orgs/{org}/outside_collaborators/{username}", configuration.base_path, org=crate::apis::urlencode(p_org), username=crate::apis::urlencode(p_username));
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_orgs_convert_member_to_outside_collaborator_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `serde_json::Value`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `serde_json::Value`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<OrgsSlashConvertMemberToOutsideCollaboratorError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Invite people to an organization by using their GitHub user ID or their email address. In order to create invitations in an organization, the authenticated user must be an organization owner.  This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see \"[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)\" and \"[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api).\"
pub async fn orgs_slash_create_invitation(configuration: &configuration::Configuration, org: &str, orgs_create_invitation_request: Option<models::OrgsCreateInvitationRequest>) -> Result<models::OrganizationInvitation, Error<OrgsSlashCreateInvitationError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_orgs_create_invitation_request = orgs_create_invitation_request;

    let uri_str = format!("{}/orgs/{org}/invitations", configuration.base_path, org=crate::apis::urlencode(p_org));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_orgs_create_invitation_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::OrganizationInvitation`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::OrganizationInvitation`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<OrgsSlashCreateInvitationError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Create a new issue type for an organization.  You can find out more about issue types in [Managing issue types in an organization](https://docs.github.com/issues/tracking-your-work-with-issues/configuring-issues/managing-issue-types-in-an-organization).
pub async fn orgs_slash_create_issue_type(configuration: &configuration::Configuration, org: &str, organization_create_issue_type: models::OrganizationCreateIssueType) -> Result<models::IssueType, Error<OrgsSlashCreateIssueTypeError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_organization_create_issue_type = organization_create_issue_type;

    let uri_str = format!("{}/orgs/{org}/issue-types", configuration.base_path, org=crate::apis::urlencode(p_org));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_organization_create_issue_type);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::IssueType`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::IssueType`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<OrgsSlashCreateIssueTypeError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Creates new or updates existing custom properties defined for an organization in a batch.  If the property already exists, the existing property will be replaced with the new values. Missing optional values will fall back to default values, previous values will be overwritten. E.g. if a property exists with `values_editable_by: org_and_repo_actors` and it's updated without specifying `values_editable_by`, it will be updated to default value `org_actors`.  To use this endpoint, the authenticated user must be one of:   - An administrator for the organization.   - A user, or a user on a team, with the fine-grained permission of `custom_properties_org_definitions_manager` in the organization.
pub async fn orgs_slash_create_or_update_custom_properties(configuration: &configuration::Configuration, org: &str, orgs_create_or_update_custom_properties_request: models::OrgsCreateOrUpdateCustomPropertiesRequest) -> Result<Vec<models::CustomProperty>, Error<OrgsSlashCreateOrUpdateCustomPropertiesError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_orgs_create_or_update_custom_properties_request = orgs_create_or_update_custom_properties_request;

    let uri_str = format!("{}/orgs/{org}/properties/schema", configuration.base_path, org=crate::apis::urlencode(p_org));
    let mut req_builder = configuration.client.request(reqwest::Method::PATCH, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_orgs_create_or_update_custom_properties_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::CustomProperty&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::CustomProperty&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<OrgsSlashCreateOrUpdateCustomPropertiesError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Create new or update existing custom property values for repositories in a batch that belong to an organization. Each target repository will have its custom property values updated to match the values provided in the request.  A maximum of 30 repositories can be updated in a single request.  Using a value of `null` for a custom property will remove or 'unset' the property value from the repository.  To use this endpoint, the authenticated user must be one of:   - An administrator for the organization.   - A user, or a user on a team, with the fine-grained permission of `custom_properties_org_values_editor` in the organization.
pub async fn orgs_slash_create_or_update_custom_properties_values_for_repos(configuration: &configuration::Configuration, org: &str, orgs_create_or_update_custom_properties_values_for_repos_request: models::OrgsCreateOrUpdateCustomPropertiesValuesForReposRequest) -> Result<(), Error<OrgsSlashCreateOrUpdateCustomPropertiesValuesForReposError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_orgs_create_or_update_custom_properties_values_for_repos_request = orgs_create_or_update_custom_properties_values_for_repos_request;

    let uri_str = format!("{}/orgs/{org}/properties/values", configuration.base_path, org=crate::apis::urlencode(p_org));
    let mut req_builder = configuration.client.request(reqwest::Method::PATCH, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_orgs_create_or_update_custom_properties_values_for_repos_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<OrgsSlashCreateOrUpdateCustomPropertiesValuesForReposError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Creates a new or updates an existing custom property that is defined for an organization.  To use this endpoint, the authenticated user must be one of: - An administrator for the organization. - A user, or a user on a team, with the fine-grained permission of `custom_properties_org_definitions_manager` in the organization.
pub async fn orgs_slash_create_or_update_custom_property(configuration: &configuration::Configuration, org: &str, custom_property_name: &str, custom_property_set_payload: models::CustomPropertySetPayload) -> Result<models::CustomProperty, Error<OrgsSlashCreateOrUpdateCustomPropertyError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_custom_property_name = custom_property_name;
    let p_custom_property_set_payload = custom_property_set_payload;

    let uri_str = format!("{}/orgs/{org}/properties/schema/{custom_property_name}", configuration.base_path, org=crate::apis::urlencode(p_org), custom_property_name=crate::apis::urlencode(p_custom_property_name));
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_custom_property_set_payload);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::CustomProperty`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::CustomProperty`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<OrgsSlashCreateOrUpdateCustomPropertyError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Create a hook that posts payloads in JSON format.  You must be an organization owner to use this endpoint.  OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
pub async fn orgs_slash_create_webhook(configuration: &configuration::Configuration, org: &str, orgs_create_webhook_request: models::OrgsCreateWebhookRequest) -> Result<models::OrgHook, Error<OrgsSlashCreateWebhookError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_orgs_create_webhook_request = orgs_create_webhook_request;

    let uri_str = format!("{}/orgs/{org}/hooks", configuration.base_path, org=crate::apis::urlencode(p_org));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_orgs_create_webhook_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::OrgHook`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::OrgHook`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<OrgsSlashCreateWebhookError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Deletes an organization and all its repositories.  The organization login will be unavailable for 90 days after deletion.  Please review the Terms of Service regarding account deletion before using this endpoint:  https://docs.github.com/site-policy/github-terms/github-terms-of-service
pub async fn orgs_slash_delete(configuration: &configuration::Configuration, org: &str) -> Result<serde_json::Value, Error<OrgsSlashDeleteError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;

    let uri_str = format!("{}/orgs/{org}", configuration.base_path, org=crate::apis::urlencode(p_org));
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `serde_json::Value`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `serde_json::Value`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<OrgsSlashDeleteError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Deletes an issue type for an organization.  You can find out more about issue types in [Managing issue types in an organization](https://docs.github.com/issues/tracking-your-work-with-issues/configuring-issues/managing-issue-types-in-an-organization).
pub async fn orgs_slash_delete_issue_type(configuration: &configuration::Configuration, org: &str, issue_type_id: i32) -> Result<(), Error<OrgsSlashDeleteIssueTypeError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_issue_type_id = issue_type_id;

    let uri_str = format!("{}/orgs/{org}/issue-types/{issue_type_id}", configuration.base_path, org=crate::apis::urlencode(p_org), issue_type_id=p_issue_type_id);
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<OrgsSlashDeleteIssueTypeError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Delete a webhook for an organization.  The authenticated user must be an organization owner to use this endpoint.  OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
pub async fn orgs_slash_delete_webhook(configuration: &configuration::Configuration, org: &str, hook_id: i32) -> Result<(), Error<OrgsSlashDeleteWebhookError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_hook_id = hook_id;

    let uri_str = format!("{}/orgs/{org}/hooks/{hook_id}", configuration.base_path, org=crate::apis::urlencode(p_org), hook_id=p_hook_id);
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<OrgsSlashDeleteWebhookError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// > [!WARNING] > **Closing down notice:** The ability to enable or disable a security feature for all eligible repositories in an organization is closing down. Please use [code security configurations](https://docs.github.com/rest/code-security/configurations) instead. For more information, see the [changelog](https://github.blog/changelog/2024-07-22-deprecation-of-api-endpoint-to-enable-or-disable-a-security-feature-for-an-organization/).  Enables or disables the specified security feature for all eligible repositories in an organization. For more information, see \"[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\"  The authenticated user must be an organization owner or be member of a team with the security manager role to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `admin:org`, `write:org`, or `repo` scopes to use this endpoint.
pub async fn orgs_slash_enable_or_disable_security_product_on_all_org_repos(configuration: &configuration::Configuration, org: &str, security_product: &str, enablement: &str, orgs_enable_or_disable_security_product_on_all_org_repos_request: Option<models::OrgsEnableOrDisableSecurityProductOnAllOrgReposRequest>) -> Result<(), Error<OrgsSlashEnableOrDisableSecurityProductOnAllOrgReposError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_security_product = security_product;
    let p_enablement = enablement;
    let p_orgs_enable_or_disable_security_product_on_all_org_repos_request = orgs_enable_or_disable_security_product_on_all_org_repos_request;

    let uri_str = format!("{}/orgs/{org}/{security_product}/{enablement}", configuration.base_path, org=crate::apis::urlencode(p_org), security_product=crate::apis::urlencode(p_security_product), enablement=crate::apis::urlencode(p_enablement));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_orgs_enable_or_disable_security_product_on_all_org_repos_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<OrgsSlashEnableOrDisableSecurityProductOnAllOrgReposError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Gets information about an organization.  When the value of `two_factor_requirement_enabled` is `true`, the organization requires all members, billing managers, outside collaborators, guest collaborators, repository collaborators, or everyone with access to any repository within the organization to enable [two-factor authentication](https://docs.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/).  To see the full details about an organization, the authenticated user must be an organization owner.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to see the full details about an organization.  To see information about an organization's GitHub plan, GitHub Apps need the `Organization plan` permission.
pub async fn orgs_slash_get(configuration: &configuration::Configuration, org: &str) -> Result<models::OrganizationFull, Error<OrgsSlashGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;

    let uri_str = format!("{}/orgs/{org}", configuration.base_path, org=crate::apis::urlencode(p_org));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::OrganizationFull`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::OrganizationFull`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<OrgsSlashGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Gets all custom properties defined for an organization. Organization members can read these properties.
pub async fn orgs_slash_get_all_custom_properties(configuration: &configuration::Configuration, org: &str) -> Result<Vec<models::CustomProperty>, Error<OrgsSlashGetAllCustomPropertiesError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;

    let uri_str = format!("{}/orgs/{org}/properties/schema", configuration.base_path, org=crate::apis::urlencode(p_org));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::CustomProperty&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::CustomProperty&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<OrgsSlashGetAllCustomPropertiesError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Gets a custom property that is defined for an organization. Organization members can read these properties.
pub async fn orgs_slash_get_custom_property(configuration: &configuration::Configuration, org: &str, custom_property_name: &str) -> Result<models::CustomProperty, Error<OrgsSlashGetCustomPropertyError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_custom_property_name = custom_property_name;

    let uri_str = format!("{}/orgs/{org}/properties/schema/{custom_property_name}", configuration.base_path, org=crate::apis::urlencode(p_org), custom_property_name=crate::apis::urlencode(p_custom_property_name));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::CustomProperty`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::CustomProperty`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<OrgsSlashGetCustomPropertyError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// If the authenticated user is an active or pending member of the organization, this endpoint will return the user's membership. If the authenticated user is not affiliated with the organization, a `404` is returned. This endpoint will return a `403` if the request is made by a GitHub App that is blocked by the organization.
pub async fn orgs_slash_get_membership_for_authenticated_user(configuration: &configuration::Configuration, org: &str) -> Result<models::OrgMembership, Error<OrgsSlashGetMembershipForAuthenticatedUserError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;

    let uri_str = format!("{}/user/memberships/orgs/{org}", configuration.base_path, org=crate::apis::urlencode(p_org));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::OrgMembership`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::OrgMembership`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<OrgsSlashGetMembershipForAuthenticatedUserError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// In order to get a user's membership with an organization, the authenticated user must be an organization member. The `state` parameter in the response can be used to identify the user's membership status.
pub async fn orgs_slash_get_membership_for_user(configuration: &configuration::Configuration, org: &str, username: &str) -> Result<models::OrgMembership, Error<OrgsSlashGetMembershipForUserError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_username = username;

    let uri_str = format!("{}/orgs/{org}/memberships/{username}", configuration.base_path, org=crate::apis::urlencode(p_org), username=crate::apis::urlencode(p_username));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::OrgMembership`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::OrgMembership`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<OrgsSlashGetMembershipForUserError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Gets an organization role that is available to this organization. For more information on organization roles, see \"[Using organization roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles).\"  To use this endpoint, the authenticated user must be one of:  - An administrator for the organization. - A user, or a user on a team, with the fine-grained permissions of `read_organization_custom_org_role` in the organization.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
pub async fn orgs_slash_get_org_role(configuration: &configuration::Configuration, org: &str, role_id: i32) -> Result<models::OrganizationRole, Error<OrgsSlashGetOrgRoleError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_role_id = role_id;

    let uri_str = format!("{}/orgs/{org}/organization-roles/{role_id}", configuration.base_path, org=crate::apis::urlencode(p_org), role_id=p_role_id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::OrganizationRole`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::OrganizationRole`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<OrgsSlashGetOrgRoleError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get the history of an organization ruleset.
pub async fn orgs_slash_get_org_ruleset_history(configuration: &configuration::Configuration, org: &str, ruleset_id: i32, per_page: Option<i32>, page: Option<i32>) -> Result<Vec<models::RulesetVersion>, Error<OrgsSlashGetOrgRulesetHistoryError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_ruleset_id = ruleset_id;
    let p_per_page = per_page;
    let p_page = page;

    let uri_str = format!("{}/orgs/{org}/rulesets/{ruleset_id}/history", configuration.base_path, org=crate::apis::urlencode(p_org), ruleset_id=p_ruleset_id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_per_page {
        req_builder = req_builder.query(&[("per_page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::RulesetVersion&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::RulesetVersion&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<OrgsSlashGetOrgRulesetHistoryError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get a version of an organization ruleset.
pub async fn orgs_slash_get_org_ruleset_version(configuration: &configuration::Configuration, org: &str, ruleset_id: i32, version_id: i32) -> Result<models::RulesetVersionWithState, Error<OrgsSlashGetOrgRulesetVersionError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_ruleset_id = ruleset_id;
    let p_version_id = version_id;

    let uri_str = format!("{}/orgs/{org}/rulesets/{ruleset_id}/history/{version_id}", configuration.base_path, org=crate::apis::urlencode(p_org), ruleset_id=p_ruleset_id, version_id=p_version_id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::RulesetVersionWithState`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::RulesetVersionWithState`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<OrgsSlashGetOrgRulesetVersionError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Returns a webhook configured in an organization. To get only the webhook `config` properties, see \"[Get a webhook configuration for an organization](/rest/orgs/webhooks#get-a-webhook-configuration-for-an-organization).  You must be an organization owner to use this endpoint.  OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
pub async fn orgs_slash_get_webhook(configuration: &configuration::Configuration, org: &str, hook_id: i32) -> Result<models::OrgHook, Error<OrgsSlashGetWebhookError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_hook_id = hook_id;

    let uri_str = format!("{}/orgs/{org}/hooks/{hook_id}", configuration.base_path, org=crate::apis::urlencode(p_org), hook_id=p_hook_id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::OrgHook`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::OrgHook`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<OrgsSlashGetWebhookError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Returns the webhook configuration for an organization. To get more information about the webhook, including the `active` state and `events`, use \"[Get an organization webhook ](/rest/orgs/webhooks#get-an-organization-webhook).\"  You must be an organization owner to use this endpoint.  OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
pub async fn orgs_slash_get_webhook_config_for_org(configuration: &configuration::Configuration, org: &str, hook_id: i32) -> Result<models::WebhookConfig, Error<OrgsSlashGetWebhookConfigForOrgError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_hook_id = hook_id;

    let uri_str = format!("{}/orgs/{org}/hooks/{hook_id}/config", configuration.base_path, org=crate::apis::urlencode(p_org), hook_id=p_hook_id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::WebhookConfig`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::WebhookConfig`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<OrgsSlashGetWebhookConfigForOrgError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Returns a delivery for a webhook configured in an organization.  You must be an organization owner to use this endpoint.  OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
pub async fn orgs_slash_get_webhook_delivery(configuration: &configuration::Configuration, org: &str, hook_id: i32, delivery_id: i32) -> Result<models::HookDelivery, Error<OrgsSlashGetWebhookDeliveryError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_hook_id = hook_id;
    let p_delivery_id = delivery_id;

    let uri_str = format!("{}/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}", configuration.base_path, org=crate::apis::urlencode(p_org), hook_id=p_hook_id, delivery_id=p_delivery_id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::HookDelivery`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::HookDelivery`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<OrgsSlashGetWebhookDeliveryError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Lists all organizations, in the order that they were created.  > [!NOTE] > Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers) to get the URL for the next page of organizations.
pub async fn orgs_slash_list(configuration: &configuration::Configuration, since: Option<i32>, per_page: Option<i32>) -> Result<Vec<models::OrganizationSimple>, Error<OrgsSlashListError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_since = since;
    let p_per_page = per_page;

    let uri_str = format!("{}/organizations", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_since {
        req_builder = req_builder.query(&[("since", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_per_page {
        req_builder = req_builder.query(&[("per_page", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::OrganizationSimple&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::OrganizationSimple&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<OrgsSlashListError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Lists all GitHub Apps in an organization. The installation count includes all GitHub Apps installed on repositories in the organization.  The authenticated user must be an organization owner to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `admin:read` scope to use this endpoint.
pub async fn orgs_slash_list_app_installations(configuration: &configuration::Configuration, org: &str, per_page: Option<i32>, page: Option<i32>) -> Result<models::OrgsListAppInstallations200Response, Error<OrgsSlashListAppInstallationsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_per_page = per_page;
    let p_page = page;

    let uri_str = format!("{}/orgs/{org}/installations", configuration.base_path, org=crate::apis::urlencode(p_org));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_per_page {
        req_builder = req_builder.query(&[("per_page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::OrgsListAppInstallations200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::OrgsListAppInstallations200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<OrgsSlashListAppInstallationsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// List a collection of artifact attestations with a given subject digest that are associated with repositories owned by an organization.  The collection of attestations returned by this endpoint is filtered according to the authenticated user's permissions; if the authenticated user cannot read a repository, the attestations associated with that repository will not be included in the response. In addition, when using a fine-grained access token the `attestations:read` permission is required.  **Please note:** in order to offer meaningful security benefits, an attestation's signature and timestamps **must** be cryptographically verified, and the identity of the attestation signer **must** be validated. Attestations can be verified using the [GitHub CLI `attestation verify` command](https://cli.github.com/manual/gh_attestation_verify). For more information, see [our guide on how to use artifact attestations to establish a build's provenance](https://docs.github.com/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds).
pub async fn orgs_slash_list_attestations(configuration: &configuration::Configuration, org: &str, subject_digest: &str, per_page: Option<i32>, before: Option<&str>, after: Option<&str>, predicate_type: Option<&str>) -> Result<models::OrgsListAttestations200Response, Error<OrgsSlashListAttestationsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_subject_digest = subject_digest;
    let p_per_page = per_page;
    let p_before = before;
    let p_after = after;
    let p_predicate_type = predicate_type;

    let uri_str = format!("{}/orgs/{org}/attestations/{subject_digest}", configuration.base_path, org=crate::apis::urlencode(p_org), subject_digest=crate::apis::urlencode(p_subject_digest));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_per_page {
        req_builder = req_builder.query(&[("per_page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_before {
        req_builder = req_builder.query(&[("before", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_after {
        req_builder = req_builder.query(&[("after", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_predicate_type {
        req_builder = req_builder.query(&[("predicate_type", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::OrgsListAttestations200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::OrgsListAttestations200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<OrgsSlashListAttestationsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// List the users blocked by an organization.
pub async fn orgs_slash_list_blocked_users(configuration: &configuration::Configuration, org: &str, per_page: Option<i32>, page: Option<i32>) -> Result<Vec<models::SimpleUser>, Error<OrgsSlashListBlockedUsersError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_per_page = per_page;
    let p_page = page;

    let uri_str = format!("{}/orgs/{org}/blocks", configuration.base_path, org=crate::apis::urlencode(p_org));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_per_page {
        req_builder = req_builder.query(&[("per_page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::SimpleUser&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::SimpleUser&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<OrgsSlashListBlockedUsersError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Lists organization repositories with all of their custom property values. Organization members can read these properties.
pub async fn orgs_slash_list_custom_properties_values_for_repos(configuration: &configuration::Configuration, org: &str, per_page: Option<i32>, page: Option<i32>, repository_query: Option<&str>) -> Result<Vec<models::OrgRepoCustomPropertyValues>, Error<OrgsSlashListCustomPropertiesValuesForReposError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_per_page = per_page;
    let p_page = page;
    let p_repository_query = repository_query;

    let uri_str = format!("{}/orgs/{org}/properties/values", configuration.base_path, org=crate::apis::urlencode(p_org));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_per_page {
        req_builder = req_builder.query(&[("per_page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_repository_query {
        req_builder = req_builder.query(&[("repository_query", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::OrgRepoCustomPropertyValues&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::OrgRepoCustomPropertyValues&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<OrgsSlashListCustomPropertiesValuesForReposError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// The return hash contains `failed_at` and `failed_reason` fields which represent the time at which the invitation failed and the reason for the failure.
pub async fn orgs_slash_list_failed_invitations(configuration: &configuration::Configuration, org: &str, per_page: Option<i32>, page: Option<i32>) -> Result<Vec<models::OrganizationInvitation>, Error<OrgsSlashListFailedInvitationsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_per_page = per_page;
    let p_page = page;

    let uri_str = format!("{}/orgs/{org}/failed_invitations", configuration.base_path, org=crate::apis::urlencode(p_org));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_per_page {
        req_builder = req_builder.query(&[("per_page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::OrganizationInvitation&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::OrganizationInvitation&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<OrgsSlashListFailedInvitationsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// List organizations for the authenticated user.  For OAuth app tokens and personal access tokens (classic), this endpoint only lists organizations that your authorization allows you to operate on in some way (e.g., you can list teams with `read:org` scope, you can publicize your organization membership with `user` scope, etc.). Therefore, this API requires at least `user` or `read:org` scope for OAuth app tokens and personal access tokens (classic). Requests with insufficient scope will receive a `403 Forbidden` response.  > [!NOTE] > Requests using a fine-grained access token will receive a `200 Success` response with an empty list.
pub async fn orgs_slash_list_for_authenticated_user(configuration: &configuration::Configuration, per_page: Option<i32>, page: Option<i32>) -> Result<Vec<models::OrganizationSimple>, Error<OrgsSlashListForAuthenticatedUserError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_per_page = per_page;
    let p_page = page;

    let uri_str = format!("{}/user/orgs", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_per_page {
        req_builder = req_builder.query(&[("per_page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::OrganizationSimple&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::OrganizationSimple&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<OrgsSlashListForAuthenticatedUserError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// List [public organization memberships](https://docs.github.com/articles/publicizing-or-concealing-organization-membership) for the specified user.  This method only lists _public_ memberships, regardless of authentication. If you need to fetch all of the organization memberships (public and private) for the authenticated user, use the [List organizations for the authenticated user](https://docs.github.com/rest/orgs/orgs#list-organizations-for-the-authenticated-user) API instead.
pub async fn orgs_slash_list_for_user(configuration: &configuration::Configuration, username: &str, per_page: Option<i32>, page: Option<i32>) -> Result<Vec<models::OrganizationSimple>, Error<OrgsSlashListForUserError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_username = username;
    let p_per_page = per_page;
    let p_page = page;

    let uri_str = format!("{}/users/{username}/orgs", configuration.base_path, username=crate::apis::urlencode(p_username));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_per_page {
        req_builder = req_builder.query(&[("per_page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::OrganizationSimple&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::OrganizationSimple&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<OrgsSlashListForUserError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// List all teams associated with an invitation. In order to see invitations in an organization, the authenticated user must be an organization owner.
pub async fn orgs_slash_list_invitation_teams(configuration: &configuration::Configuration, org: &str, invitation_id: i32, per_page: Option<i32>, page: Option<i32>) -> Result<Vec<models::Team>, Error<OrgsSlashListInvitationTeamsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_invitation_id = invitation_id;
    let p_per_page = per_page;
    let p_page = page;

    let uri_str = format!("{}/orgs/{org}/invitations/{invitation_id}/teams", configuration.base_path, org=crate::apis::urlencode(p_org), invitation_id=p_invitation_id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_per_page {
        req_builder = req_builder.query(&[("per_page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::Team&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::Team&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<OrgsSlashListInvitationTeamsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Lists all issue types for an organization.
pub async fn orgs_slash_list_issue_types(configuration: &configuration::Configuration, org: &str) -> Result<Vec<models::IssueType>, Error<OrgsSlashListIssueTypesError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;

    let uri_str = format!("{}/orgs/{org}/issue-types", configuration.base_path, org=crate::apis::urlencode(p_org));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::IssueType&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::IssueType&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<OrgsSlashListIssueTypesError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// List all users who are members of an organization. If the authenticated user is also a member of this organization then both concealed and public members will be returned.
pub async fn orgs_slash_list_members(configuration: &configuration::Configuration, org: &str, filter: Option<&str>, role: Option<&str>, per_page: Option<i32>, page: Option<i32>) -> Result<Vec<models::SimpleUser>, Error<OrgsSlashListMembersError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_filter = filter;
    let p_role = role;
    let p_per_page = per_page;
    let p_page = page;

    let uri_str = format!("{}/orgs/{org}/members", configuration.base_path, org=crate::apis::urlencode(p_org));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_filter {
        req_builder = req_builder.query(&[("filter", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_role {
        req_builder = req_builder.query(&[("role", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_per_page {
        req_builder = req_builder.query(&[("per_page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::SimpleUser&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::SimpleUser&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<OrgsSlashListMembersError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Lists all of the authenticated user's organization memberships.
pub async fn orgs_slash_list_memberships_for_authenticated_user(configuration: &configuration::Configuration, state: Option<&str>, per_page: Option<i32>, page: Option<i32>) -> Result<Vec<models::OrgMembership>, Error<OrgsSlashListMembershipsForAuthenticatedUserError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_state = state;
    let p_per_page = per_page;
    let p_page = page;

    let uri_str = format!("{}/user/memberships/orgs", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_state {
        req_builder = req_builder.query(&[("state", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_per_page {
        req_builder = req_builder.query(&[("per_page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::OrgMembership&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::OrgMembership&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<OrgsSlashListMembershipsForAuthenticatedUserError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Lists the teams that are assigned to an organization role. For more information on organization roles, see \"[Using organization roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles).\"  To use this endpoint, you must be an administrator for the organization.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
pub async fn orgs_slash_list_org_role_teams(configuration: &configuration::Configuration, org: &str, role_id: i32, per_page: Option<i32>, page: Option<i32>) -> Result<Vec<models::TeamRoleAssignment>, Error<OrgsSlashListOrgRoleTeamsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_role_id = role_id;
    let p_per_page = per_page;
    let p_page = page;

    let uri_str = format!("{}/orgs/{org}/organization-roles/{role_id}/teams", configuration.base_path, org=crate::apis::urlencode(p_org), role_id=p_role_id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_per_page {
        req_builder = req_builder.query(&[("per_page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::TeamRoleAssignment&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::TeamRoleAssignment&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<OrgsSlashListOrgRoleTeamsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Lists organization members that are assigned to an organization role. For more information on organization roles, see \"[Using organization roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles).\"  To use this endpoint, you must be an administrator for the organization.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
pub async fn orgs_slash_list_org_role_users(configuration: &configuration::Configuration, org: &str, role_id: i32, per_page: Option<i32>, page: Option<i32>) -> Result<Vec<models::UserRoleAssignment>, Error<OrgsSlashListOrgRoleUsersError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_role_id = role_id;
    let p_per_page = per_page;
    let p_page = page;

    let uri_str = format!("{}/orgs/{org}/organization-roles/{role_id}/users", configuration.base_path, org=crate::apis::urlencode(p_org), role_id=p_role_id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_per_page {
        req_builder = req_builder.query(&[("per_page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::UserRoleAssignment&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::UserRoleAssignment&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<OrgsSlashListOrgRoleUsersError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Lists the organization roles available in this organization. For more information on organization roles, see \"[Using organization roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles).\"  To use this endpoint, the authenticated user must be one of:  - An administrator for the organization. - A user, or a user on a team, with the fine-grained permissions of `read_organization_custom_org_role` in the organization.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
pub async fn orgs_slash_list_org_roles(configuration: &configuration::Configuration, org: &str) -> Result<models::OrgsListOrgRoles200Response, Error<OrgsSlashListOrgRolesError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;

    let uri_str = format!("{}/orgs/{org}/organization-roles", configuration.base_path, org=crate::apis::urlencode(p_org));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::OrgsListOrgRoles200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::OrgsListOrgRoles200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<OrgsSlashListOrgRolesError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// List all users who are outside collaborators of an organization.
pub async fn orgs_slash_list_outside_collaborators(configuration: &configuration::Configuration, org: &str, filter: Option<&str>, per_page: Option<i32>, page: Option<i32>) -> Result<Vec<models::SimpleUser>, Error<OrgsSlashListOutsideCollaboratorsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_filter = filter;
    let p_per_page = per_page;
    let p_page = page;

    let uri_str = format!("{}/orgs/{org}/outside_collaborators", configuration.base_path, org=crate::apis::urlencode(p_org));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_filter {
        req_builder = req_builder.query(&[("filter", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_per_page {
        req_builder = req_builder.query(&[("per_page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::SimpleUser&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::SimpleUser&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<OrgsSlashListOutsideCollaboratorsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Lists the repositories a fine-grained personal access token has access to.  Only GitHub Apps can use this endpoint.
pub async fn orgs_slash_list_pat_grant_repositories(configuration: &configuration::Configuration, org: &str, pat_id: i32, per_page: Option<i32>, page: Option<i32>) -> Result<Vec<models::MinimalRepository>, Error<OrgsSlashListPatGrantRepositoriesError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_pat_id = pat_id;
    let p_per_page = per_page;
    let p_page = page;

    let uri_str = format!("{}/orgs/{org}/personal-access-tokens/{pat_id}/repositories", configuration.base_path, org=crate::apis::urlencode(p_org), pat_id=p_pat_id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_per_page {
        req_builder = req_builder.query(&[("per_page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::MinimalRepository&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::MinimalRepository&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<OrgsSlashListPatGrantRepositoriesError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Lists the repositories a fine-grained personal access token request is requesting access to.  Only GitHub Apps can use this endpoint.
pub async fn orgs_slash_list_pat_grant_request_repositories(configuration: &configuration::Configuration, org: &str, pat_request_id: i32, per_page: Option<i32>, page: Option<i32>) -> Result<Vec<models::MinimalRepository>, Error<OrgsSlashListPatGrantRequestRepositoriesError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_pat_request_id = pat_request_id;
    let p_per_page = per_page;
    let p_page = page;

    let uri_str = format!("{}/orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories", configuration.base_path, org=crate::apis::urlencode(p_org), pat_request_id=p_pat_request_id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_per_page {
        req_builder = req_builder.query(&[("per_page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::MinimalRepository&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::MinimalRepository&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<OrgsSlashListPatGrantRequestRepositoriesError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Lists requests from organization members to access organization resources with a fine-grained personal access token.  Only GitHub Apps can use this endpoint.
pub async fn orgs_slash_list_pat_grant_requests(configuration: &configuration::Configuration, org: &str, per_page: Option<i32>, page: Option<i32>, sort: Option<&str>, direction: Option<&str>, owner: Option<Vec<String>>, repository: Option<&str>, permission: Option<&str>, last_used_before: Option<String>, last_used_after: Option<String>, token_id: Option<Vec<String>>) -> Result<Vec<models::OrganizationProgrammaticAccessGrantRequest>, Error<OrgsSlashListPatGrantRequestsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_per_page = per_page;
    let p_page = page;
    let p_sort = sort;
    let p_direction = direction;
    let p_owner = owner;
    let p_repository = repository;
    let p_permission = permission;
    let p_last_used_before = last_used_before;
    let p_last_used_after = last_used_after;
    let p_token_id = token_id;

    let uri_str = format!("{}/orgs/{org}/personal-access-token-requests", configuration.base_path, org=crate::apis::urlencode(p_org));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_per_page {
        req_builder = req_builder.query(&[("per_page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_sort {
        req_builder = req_builder.query(&[("sort", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_direction {
        req_builder = req_builder.query(&[("direction", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_owner {
        req_builder = match "multi" {
            "multi" => req_builder.query(&param_value.into_iter().map(|p| ("owner".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => req_builder.query(&[("owner", &param_value.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref param_value) = p_repository {
        req_builder = req_builder.query(&[("repository", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_permission {
        req_builder = req_builder.query(&[("permission", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_last_used_before {
        req_builder = req_builder.query(&[("last_used_before", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_last_used_after {
        req_builder = req_builder.query(&[("last_used_after", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_token_id {
        req_builder = match "multi" {
            "multi" => req_builder.query(&param_value.into_iter().map(|p| ("token_id".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => req_builder.query(&[("token_id", &param_value.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::OrganizationProgrammaticAccessGrantRequest&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::OrganizationProgrammaticAccessGrantRequest&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<OrgsSlashListPatGrantRequestsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Lists approved fine-grained personal access tokens owned by organization members that can access organization resources.  Only GitHub Apps can use this endpoint.
pub async fn orgs_slash_list_pat_grants(configuration: &configuration::Configuration, org: &str, per_page: Option<i32>, page: Option<i32>, sort: Option<&str>, direction: Option<&str>, owner: Option<Vec<String>>, repository: Option<&str>, permission: Option<&str>, last_used_before: Option<String>, last_used_after: Option<String>, token_id: Option<Vec<String>>) -> Result<Vec<models::OrganizationProgrammaticAccessGrant>, Error<OrgsSlashListPatGrantsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_per_page = per_page;
    let p_page = page;
    let p_sort = sort;
    let p_direction = direction;
    let p_owner = owner;
    let p_repository = repository;
    let p_permission = permission;
    let p_last_used_before = last_used_before;
    let p_last_used_after = last_used_after;
    let p_token_id = token_id;

    let uri_str = format!("{}/orgs/{org}/personal-access-tokens", configuration.base_path, org=crate::apis::urlencode(p_org));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_per_page {
        req_builder = req_builder.query(&[("per_page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_sort {
        req_builder = req_builder.query(&[("sort", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_direction {
        req_builder = req_builder.query(&[("direction", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_owner {
        req_builder = match "multi" {
            "multi" => req_builder.query(&param_value.into_iter().map(|p| ("owner".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => req_builder.query(&[("owner", &param_value.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref param_value) = p_repository {
        req_builder = req_builder.query(&[("repository", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_permission {
        req_builder = req_builder.query(&[("permission", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_last_used_before {
        req_builder = req_builder.query(&[("last_used_before", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_last_used_after {
        req_builder = req_builder.query(&[("last_used_after", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_token_id {
        req_builder = match "multi" {
            "multi" => req_builder.query(&param_value.into_iter().map(|p| ("token_id".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => req_builder.query(&[("token_id", &param_value.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::OrganizationProgrammaticAccessGrant&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::OrganizationProgrammaticAccessGrant&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<OrgsSlashListPatGrantsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, or `hiring_manager`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.
pub async fn orgs_slash_list_pending_invitations(configuration: &configuration::Configuration, org: &str, per_page: Option<i32>, page: Option<i32>, role: Option<&str>, invitation_source: Option<&str>) -> Result<Vec<models::OrganizationInvitation>, Error<OrgsSlashListPendingInvitationsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_per_page = per_page;
    let p_page = page;
    let p_role = role;
    let p_invitation_source = invitation_source;

    let uri_str = format!("{}/orgs/{org}/invitations", configuration.base_path, org=crate::apis::urlencode(p_org));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_per_page {
        req_builder = req_builder.query(&[("per_page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_role {
        req_builder = req_builder.query(&[("role", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_invitation_source {
        req_builder = req_builder.query(&[("invitation_source", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::OrganizationInvitation&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::OrganizationInvitation&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<OrgsSlashListPendingInvitationsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Members of an organization can choose to have their membership publicized or not.
pub async fn orgs_slash_list_public_members(configuration: &configuration::Configuration, org: &str, per_page: Option<i32>, page: Option<i32>) -> Result<Vec<models::SimpleUser>, Error<OrgsSlashListPublicMembersError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_per_page = per_page;
    let p_page = page;

    let uri_str = format!("{}/orgs/{org}/public_members", configuration.base_path, org=crate::apis::urlencode(p_org));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_per_page {
        req_builder = req_builder.query(&[("per_page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::SimpleUser&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::SimpleUser&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<OrgsSlashListPublicMembersError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// > [!WARNING] > **Closing down notice:** This operation is closing down and will be removed starting January 1, 2026. Please use the \"[Organization Roles](https://docs.github.com/rest/orgs/organization-roles)\" endpoints instead.
pub async fn orgs_slash_list_security_manager_teams(configuration: &configuration::Configuration, org: &str) -> Result<Vec<models::TeamSimple>, Error<OrgsSlashListSecurityManagerTeamsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;

    let uri_str = format!("{}/orgs/{org}/security-managers", configuration.base_path, org=crate::apis::urlencode(p_org));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::TeamSimple&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::TeamSimple&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<OrgsSlashListSecurityManagerTeamsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Returns a list of webhook deliveries for a webhook configured in an organization.  You must be an organization owner to use this endpoint.  OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
pub async fn orgs_slash_list_webhook_deliveries(configuration: &configuration::Configuration, org: &str, hook_id: i32, per_page: Option<i32>, cursor: Option<&str>) -> Result<Vec<models::HookDeliveryItem>, Error<OrgsSlashListWebhookDeliveriesError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_hook_id = hook_id;
    let p_per_page = per_page;
    let p_cursor = cursor;

    let uri_str = format!("{}/orgs/{org}/hooks/{hook_id}/deliveries", configuration.base_path, org=crate::apis::urlencode(p_org), hook_id=p_hook_id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_per_page {
        req_builder = req_builder.query(&[("per_page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_cursor {
        req_builder = req_builder.query(&[("cursor", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::HookDeliveryItem&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::HookDeliveryItem&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<OrgsSlashListWebhookDeliveriesError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// List webhooks for an organization.  The authenticated user must be an organization owner to use this endpoint.  OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
pub async fn orgs_slash_list_webhooks(configuration: &configuration::Configuration, org: &str, per_page: Option<i32>, page: Option<i32>) -> Result<Vec<models::OrgHook>, Error<OrgsSlashListWebhooksError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_per_page = per_page;
    let p_page = page;

    let uri_str = format!("{}/orgs/{org}/hooks", configuration.base_path, org=crate::apis::urlencode(p_org));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_per_page {
        req_builder = req_builder.query(&[("per_page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::OrgHook&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::OrgHook&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<OrgsSlashListWebhooksError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event) to be sent to the hook.  You must be an organization owner to use this endpoint.  OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
pub async fn orgs_slash_ping_webhook(configuration: &configuration::Configuration, org: &str, hook_id: i32) -> Result<(), Error<OrgsSlashPingWebhookError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_hook_id = hook_id;

    let uri_str = format!("{}/orgs/{org}/hooks/{hook_id}/pings", configuration.base_path, org=crate::apis::urlencode(p_org), hook_id=p_hook_id);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<OrgsSlashPingWebhookError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Redeliver a delivery for a webhook configured in an organization.  You must be an organization owner to use this endpoint.  OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
pub async fn orgs_slash_redeliver_webhook_delivery(configuration: &configuration::Configuration, org: &str, hook_id: i32, delivery_id: i32) -> Result<serde_json::Value, Error<OrgsSlashRedeliverWebhookDeliveryError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_hook_id = hook_id;
    let p_delivery_id = delivery_id;

    let uri_str = format!("{}/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts", configuration.base_path, org=crate::apis::urlencode(p_org), hook_id=p_hook_id, delivery_id=p_delivery_id);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `serde_json::Value`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `serde_json::Value`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<OrgsSlashRedeliverWebhookDeliveryError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Removes a custom property that is defined for an organization.  To use this endpoint, the authenticated user must be one of:   - An administrator for the organization.   - A user, or a user on a team, with the fine-grained permission of `custom_properties_org_definitions_manager` in the organization.
pub async fn orgs_slash_remove_custom_property(configuration: &configuration::Configuration, org: &str, custom_property_name: &str) -> Result<(), Error<OrgsSlashRemoveCustomPropertyError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_custom_property_name = custom_property_name;

    let uri_str = format!("{}/orgs/{org}/properties/schema/{custom_property_name}", configuration.base_path, org=crate::apis::urlencode(p_org), custom_property_name=crate::apis::urlencode(p_custom_property_name));
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<OrgsSlashRemoveCustomPropertyError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Removing a user from this list will remove them from all teams and they will no longer have any access to the organization's repositories.
pub async fn orgs_slash_remove_member(configuration: &configuration::Configuration, org: &str, username: &str) -> Result<(), Error<OrgsSlashRemoveMemberError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_username = username;

    let uri_str = format!("{}/orgs/{org}/members/{username}", configuration.base_path, org=crate::apis::urlencode(p_org), username=crate::apis::urlencode(p_username));
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<OrgsSlashRemoveMemberError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// In order to remove a user's membership with an organization, the authenticated user must be an organization owner.  If the specified user is an active member of the organization, this will remove them from the organization. If the specified user has been invited to the organization, this will cancel their invitation. The specified user will receive an email notification in both cases.
pub async fn orgs_slash_remove_membership_for_user(configuration: &configuration::Configuration, org: &str, username: &str) -> Result<(), Error<OrgsSlashRemoveMembershipForUserError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_username = username;

    let uri_str = format!("{}/orgs/{org}/memberships/{username}", configuration.base_path, org=crate::apis::urlencode(p_org), username=crate::apis::urlencode(p_username));
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<OrgsSlashRemoveMembershipForUserError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Removing a user from this list will remove them from all the organization's repositories.
pub async fn orgs_slash_remove_outside_collaborator(configuration: &configuration::Configuration, org: &str, username: &str) -> Result<(), Error<OrgsSlashRemoveOutsideCollaboratorError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_username = username;

    let uri_str = format!("{}/orgs/{org}/outside_collaborators/{username}", configuration.base_path, org=crate::apis::urlencode(p_org), username=crate::apis::urlencode(p_username));
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<OrgsSlashRemoveOutsideCollaboratorError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Removes the public membership for the authenticated user from the specified organization, unless public visibility is enforced by default.
pub async fn orgs_slash_remove_public_membership_for_authenticated_user(configuration: &configuration::Configuration, org: &str, username: &str) -> Result<(), Error<OrgsSlashRemovePublicMembershipForAuthenticatedUserError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_username = username;

    let uri_str = format!("{}/orgs/{org}/public_members/{username}", configuration.base_path, org=crate::apis::urlencode(p_org), username=crate::apis::urlencode(p_username));
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<OrgsSlashRemovePublicMembershipForAuthenticatedUserError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// > [!WARNING] > **Closing down notice:** This operation is closing down and will be removed starting January 1, 2026. Please use the \"[Organization Roles](https://docs.github.com/rest/orgs/organization-roles)\" endpoints instead.
pub async fn orgs_slash_remove_security_manager_team(configuration: &configuration::Configuration, org: &str, team_slug: &str) -> Result<(), Error<OrgsSlashRemoveSecurityManagerTeamError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_team_slug = team_slug;

    let uri_str = format!("{}/orgs/{org}/security-managers/teams/{team_slug}", configuration.base_path, org=crate::apis::urlencode(p_org), team_slug=crate::apis::urlencode(p_team_slug));
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<OrgsSlashRemoveSecurityManagerTeamError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Approves or denies a pending request to access organization resources via a fine-grained personal access token.  Only GitHub Apps can use this endpoint.
pub async fn orgs_slash_review_pat_grant_request(configuration: &configuration::Configuration, org: &str, pat_request_id: i32, orgs_review_pat_grant_request_request: models::OrgsReviewPatGrantRequestRequest) -> Result<(), Error<OrgsSlashReviewPatGrantRequestError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_pat_request_id = pat_request_id;
    let p_orgs_review_pat_grant_request_request = orgs_review_pat_grant_request_request;

    let uri_str = format!("{}/orgs/{org}/personal-access-token-requests/{pat_request_id}", configuration.base_path, org=crate::apis::urlencode(p_org), pat_request_id=p_pat_request_id);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_orgs_review_pat_grant_request_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<OrgsSlashReviewPatGrantRequestError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Approves or denies multiple pending requests to access organization resources via a fine-grained personal access token.  Only GitHub Apps can use this endpoint.
pub async fn orgs_slash_review_pat_grant_requests_in_bulk(configuration: &configuration::Configuration, org: &str, orgs_review_pat_grant_requests_in_bulk_request: models::OrgsReviewPatGrantRequestsInBulkRequest) -> Result<serde_json::Value, Error<OrgsSlashReviewPatGrantRequestsInBulkError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_orgs_review_pat_grant_requests_in_bulk_request = orgs_review_pat_grant_requests_in_bulk_request;

    let uri_str = format!("{}/orgs/{org}/personal-access-token-requests", configuration.base_path, org=crate::apis::urlencode(p_org));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_orgs_review_pat_grant_requests_in_bulk_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `serde_json::Value`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `serde_json::Value`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<OrgsSlashReviewPatGrantRequestsInBulkError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Removes all assigned organization roles from a team. For more information on organization roles, see \"[Using organization roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles).\"  The authenticated user must be an administrator for the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
pub async fn orgs_slash_revoke_all_org_roles_team(configuration: &configuration::Configuration, org: &str, team_slug: &str) -> Result<(), Error<OrgsSlashRevokeAllOrgRolesTeamError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_team_slug = team_slug;

    let uri_str = format!("{}/orgs/{org}/organization-roles/teams/{team_slug}", configuration.base_path, org=crate::apis::urlencode(p_org), team_slug=crate::apis::urlencode(p_team_slug));
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<OrgsSlashRevokeAllOrgRolesTeamError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Revokes all assigned organization roles from a user. For more information on organization roles, see \"[Using organization roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles).\"  The authenticated user must be an administrator for the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
pub async fn orgs_slash_revoke_all_org_roles_user(configuration: &configuration::Configuration, org: &str, username: &str) -> Result<(), Error<OrgsSlashRevokeAllOrgRolesUserError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_username = username;

    let uri_str = format!("{}/orgs/{org}/organization-roles/users/{username}", configuration.base_path, org=crate::apis::urlencode(p_org), username=crate::apis::urlencode(p_username));
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<OrgsSlashRevokeAllOrgRolesUserError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Removes an organization role from a team. For more information on organization roles, see \"[Using organization roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles).\"  The authenticated user must be an administrator for the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
pub async fn orgs_slash_revoke_org_role_team(configuration: &configuration::Configuration, org: &str, team_slug: &str, role_id: i32) -> Result<(), Error<OrgsSlashRevokeOrgRoleTeamError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_team_slug = team_slug;
    let p_role_id = role_id;

    let uri_str = format!("{}/orgs/{org}/organization-roles/teams/{team_slug}/{role_id}", configuration.base_path, org=crate::apis::urlencode(p_org), team_slug=crate::apis::urlencode(p_team_slug), role_id=p_role_id);
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<OrgsSlashRevokeOrgRoleTeamError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Remove an organization role from a user. For more information on organization roles, see \"[Using organization roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/using-organization-roles).\"  The authenticated user must be an administrator for the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
pub async fn orgs_slash_revoke_org_role_user(configuration: &configuration::Configuration, org: &str, username: &str, role_id: i32) -> Result<(), Error<OrgsSlashRevokeOrgRoleUserError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_username = username;
    let p_role_id = role_id;

    let uri_str = format!("{}/orgs/{org}/organization-roles/users/{username}/{role_id}", configuration.base_path, org=crate::apis::urlencode(p_org), username=crate::apis::urlencode(p_username), role_id=p_role_id);
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<OrgsSlashRevokeOrgRoleUserError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Only authenticated organization owners can add a member to the organization or update the member's role.  *   If the authenticated user is _adding_ a member to the organization, the invited user will receive an email inviting them to the organization. The user's [membership status](https://docs.github.com/rest/orgs/members#get-organization-membership-for-a-user) will be `pending` until they accept the invitation.      *   Authenticated users can _update_ a user's membership by passing the `role` parameter. If the authenticated user changes a member's role to `admin`, the affected user will receive an email notifying them that they've been made an organization owner. If the authenticated user changes an owner's role to `member`, no email will be sent.  **Rate limits**  To prevent abuse, organization owners are limited to creating 50 organization invitations for an organization within a 24 hour period. If the organization is more than one month old or on a paid plan, the limit is 500 invitations per 24 hour period.
pub async fn orgs_slash_set_membership_for_user(configuration: &configuration::Configuration, org: &str, username: &str, orgs_set_membership_for_user_request: Option<models::OrgsSetMembershipForUserRequest>) -> Result<models::OrgMembership, Error<OrgsSlashSetMembershipForUserError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_username = username;
    let p_orgs_set_membership_for_user_request = orgs_set_membership_for_user_request;

    let uri_str = format!("{}/orgs/{org}/memberships/{username}", configuration.base_path, org=crate::apis::urlencode(p_org), username=crate::apis::urlencode(p_username));
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_orgs_set_membership_for_user_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::OrgMembership`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::OrgMembership`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<OrgsSlashSetMembershipForUserError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// The user can publicize their own membership. (A user cannot publicize the membership for another user.)  Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method).\"
pub async fn orgs_slash_set_public_membership_for_authenticated_user(configuration: &configuration::Configuration, org: &str, username: &str) -> Result<(), Error<OrgsSlashSetPublicMembershipForAuthenticatedUserError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_username = username;

    let uri_str = format!("{}/orgs/{org}/public_members/{username}", configuration.base_path, org=crate::apis::urlencode(p_org), username=crate::apis::urlencode(p_username));
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<OrgsSlashSetPublicMembershipForAuthenticatedUserError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Unblocks the given user on behalf of the specified organization.
pub async fn orgs_slash_unblock_user(configuration: &configuration::Configuration, org: &str, username: &str) -> Result<(), Error<OrgsSlashUnblockUserError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_username = username;

    let uri_str = format!("{}/orgs/{org}/blocks/{username}", configuration.base_path, org=crate::apis::urlencode(p_org), username=crate::apis::urlencode(p_username));
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<OrgsSlashUnblockUserError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// > [!WARNING] > **Closing down notice:** GitHub will replace and discontinue `members_allowed_repository_creation_type` in favor of more granular permissions. The new input parameters are `members_can_create_public_repositories`, `members_can_create_private_repositories` for all organizations and `members_can_create_internal_repositories` for organizations associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes).  > [!WARNING] > **Closing down notice:** Code security product enablement for new repositories through the organization API is closing down. Please use [code security configurations](https://docs.github.com/rest/code-security/configurations#set-a-code-security-configuration-as-a-default-for-an-organization) to set defaults instead. For more information on setting a default security configuration, see the [changelog](https://github.blog/changelog/2024-07-09-sunsetting-security-settings-defaults-parameters-in-the-organizations-rest-api/).  Updates the organization's profile and member privileges.  The authenticated user must be an organization owner to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `admin:org` or `repo` scope to use this endpoint.
pub async fn orgs_slash_update(configuration: &configuration::Configuration, org: &str, orgs_update_request: Option<models::OrgsUpdateRequest>) -> Result<models::OrganizationFull, Error<OrgsSlashUpdateError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_orgs_update_request = orgs_update_request;

    let uri_str = format!("{}/orgs/{org}", configuration.base_path, org=crate::apis::urlencode(p_org));
    let mut req_builder = configuration.client.request(reqwest::Method::PATCH, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_orgs_update_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::OrganizationFull`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::OrganizationFull`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<OrgsSlashUpdateError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Updates an issue type for an organization.  You can find out more about issue types in [Managing issue types in an organization](https://docs.github.com/issues/tracking-your-work-with-issues/configuring-issues/managing-issue-types-in-an-organization).
pub async fn orgs_slash_update_issue_type(configuration: &configuration::Configuration, org: &str, issue_type_id: i32, organization_update_issue_type: models::OrganizationUpdateIssueType) -> Result<models::IssueType, Error<OrgsSlashUpdateIssueTypeError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_issue_type_id = issue_type_id;
    let p_organization_update_issue_type = organization_update_issue_type;

    let uri_str = format!("{}/orgs/{org}/issue-types/{issue_type_id}", configuration.base_path, org=crate::apis::urlencode(p_org), issue_type_id=p_issue_type_id);
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_organization_update_issue_type);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::IssueType`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::IssueType`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<OrgsSlashUpdateIssueTypeError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Converts the authenticated user to an active member of the organization, if that user has a pending invitation from the organization.
pub async fn orgs_slash_update_membership_for_authenticated_user(configuration: &configuration::Configuration, org: &str, orgs_update_membership_for_authenticated_user_request: models::OrgsUpdateMembershipForAuthenticatedUserRequest) -> Result<models::OrgMembership, Error<OrgsSlashUpdateMembershipForAuthenticatedUserError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_orgs_update_membership_for_authenticated_user_request = orgs_update_membership_for_authenticated_user_request;

    let uri_str = format!("{}/user/memberships/orgs/{org}", configuration.base_path, org=crate::apis::urlencode(p_org));
    let mut req_builder = configuration.client.request(reqwest::Method::PATCH, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_orgs_update_membership_for_authenticated_user_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::OrgMembership`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::OrgMembership`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<OrgsSlashUpdateMembershipForAuthenticatedUserError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Updates the access an organization member has to organization resources via a fine-grained personal access token. Limited to revoking the token's existing access. Limited to revoking a token's existing access.  Only GitHub Apps can use this endpoint.
pub async fn orgs_slash_update_pat_access(configuration: &configuration::Configuration, org: &str, pat_id: i32, orgs_update_pat_access_request: models::OrgsUpdatePatAccessRequest) -> Result<(), Error<OrgsSlashUpdatePatAccessError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_pat_id = pat_id;
    let p_orgs_update_pat_access_request = orgs_update_pat_access_request;

    let uri_str = format!("{}/orgs/{org}/personal-access-tokens/{pat_id}", configuration.base_path, org=crate::apis::urlencode(p_org), pat_id=p_pat_id);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_orgs_update_pat_access_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<OrgsSlashUpdatePatAccessError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Updates the access organization members have to organization resources via fine-grained personal access tokens. Limited to revoking a token's existing access.  Only GitHub Apps can use this endpoint.
pub async fn orgs_slash_update_pat_accesses(configuration: &configuration::Configuration, org: &str, orgs_update_pat_accesses_request: models::OrgsUpdatePatAccessesRequest) -> Result<serde_json::Value, Error<OrgsSlashUpdatePatAccessesError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_orgs_update_pat_accesses_request = orgs_update_pat_accesses_request;

    let uri_str = format!("{}/orgs/{org}/personal-access-tokens", configuration.base_path, org=crate::apis::urlencode(p_org));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_orgs_update_pat_accesses_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `serde_json::Value`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `serde_json::Value`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<OrgsSlashUpdatePatAccessesError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Updates a webhook configured in an organization. When you update a webhook, the `secret` will be overwritten. If you previously had a `secret` set, you must provide the same `secret` or set a new `secret` or the secret will be removed. If you are only updating individual webhook `config` properties, use \"[Update a webhook configuration for an organization](/rest/orgs/webhooks#update-a-webhook-configuration-for-an-organization)\".  You must be an organization owner to use this endpoint.  OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
pub async fn orgs_slash_update_webhook(configuration: &configuration::Configuration, org: &str, hook_id: i32, orgs_update_webhook_request: Option<models::OrgsUpdateWebhookRequest>) -> Result<models::OrgHook, Error<OrgsSlashUpdateWebhookError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_hook_id = hook_id;
    let p_orgs_update_webhook_request = orgs_update_webhook_request;

    let uri_str = format!("{}/orgs/{org}/hooks/{hook_id}", configuration.base_path, org=crate::apis::urlencode(p_org), hook_id=p_hook_id);
    let mut req_builder = configuration.client.request(reqwest::Method::PATCH, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_orgs_update_webhook_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::OrgHook`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::OrgHook`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<OrgsSlashUpdateWebhookError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Updates the webhook configuration for an organization. To update more information about the webhook, including the `active` state and `events`, use \"[Update an organization webhook ](/rest/orgs/webhooks#update-an-organization-webhook).\"  You must be an organization owner to use this endpoint.  OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
pub async fn orgs_slash_update_webhook_config_for_org(configuration: &configuration::Configuration, org: &str, hook_id: i32, apps_update_webhook_config_for_app_request: Option<models::AppsUpdateWebhookConfigForAppRequest>) -> Result<models::WebhookConfig, Error<OrgsSlashUpdateWebhookConfigForOrgError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_hook_id = hook_id;
    let p_apps_update_webhook_config_for_app_request = apps_update_webhook_config_for_app_request;

    let uri_str = format!("{}/orgs/{org}/hooks/{hook_id}/config", configuration.base_path, org=crate::apis::urlencode(p_org), hook_id=p_hook_id);
    let mut req_builder = configuration.client.request(reqwest::Method::PATCH, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_apps_update_webhook_config_for_app_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::WebhookConfig`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::WebhookConfig`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<OrgsSlashUpdateWebhookConfigForOrgError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

