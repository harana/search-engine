/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`private_registries_slash_create_org_private_registry`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PrivateRegistriesSlashCreateOrgPrivateRegistryError {
    Status404(models::BasicError),
    Status422(models::ValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`private_registries_slash_delete_org_private_registry`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PrivateRegistriesSlashDeleteOrgPrivateRegistryError {
    Status400(models::BasicError),
    Status404(models::BasicError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`private_registries_slash_get_org_private_registry`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PrivateRegistriesSlashGetOrgPrivateRegistryError {
    Status404(models::BasicError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`private_registries_slash_get_org_public_key`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PrivateRegistriesSlashGetOrgPublicKeyError {
    Status404(models::BasicError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`private_registries_slash_list_org_private_registries`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PrivateRegistriesSlashListOrgPrivateRegistriesError {
    Status400(models::BasicError),
    Status404(models::BasicError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`private_registries_slash_update_org_private_registry`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PrivateRegistriesSlashUpdateOrgPrivateRegistryError {
    Status404(models::BasicError),
    Status422(models::ValidationError),
    UnknownValue(serde_json::Value),
}


/// > [!NOTE] > This endpoint is in public preview and is subject to change.  Creates a private registry configuration with an encrypted value for an organization. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see \"[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api).\"  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
pub async fn private_registries_slash_create_org_private_registry(configuration: &configuration::Configuration, org: &str, private_registries_create_org_private_registry_request: models::PrivateRegistriesCreateOrgPrivateRegistryRequest) -> Result<models::OrgPrivateRegistryConfigurationWithSelectedRepositories, Error<PrivateRegistriesSlashCreateOrgPrivateRegistryError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_private_registries_create_org_private_registry_request = private_registries_create_org_private_registry_request;

    let uri_str = format!("{}/orgs/{org}/private-registries", configuration.base_path, org=crate::apis::urlencode(p_org));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_private_registries_create_org_private_registry_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::OrgPrivateRegistryConfigurationWithSelectedRepositories`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::OrgPrivateRegistryConfigurationWithSelectedRepositories`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<PrivateRegistriesSlashCreateOrgPrivateRegistryError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// > [!NOTE] > This endpoint is in public preview and is subject to change.  Delete a private registry configuration at the organization-level.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
pub async fn private_registries_slash_delete_org_private_registry(configuration: &configuration::Configuration, org: &str, secret_name: &str) -> Result<(), Error<PrivateRegistriesSlashDeleteOrgPrivateRegistryError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_secret_name = secret_name;

    let uri_str = format!("{}/orgs/{org}/private-registries/{secret_name}", configuration.base_path, org=crate::apis::urlencode(p_org), secret_name=crate::apis::urlencode(p_secret_name));
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<PrivateRegistriesSlashDeleteOrgPrivateRegistryError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// > [!NOTE] > This endpoint is in public preview and is subject to change.  Get the configuration of a single private registry defined for an organization, omitting its encrypted value.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
pub async fn private_registries_slash_get_org_private_registry(configuration: &configuration::Configuration, org: &str, secret_name: &str) -> Result<models::OrgPrivateRegistryConfiguration, Error<PrivateRegistriesSlashGetOrgPrivateRegistryError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_secret_name = secret_name;

    let uri_str = format!("{}/orgs/{org}/private-registries/{secret_name}", configuration.base_path, org=crate::apis::urlencode(p_org), secret_name=crate::apis::urlencode(p_secret_name));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::OrgPrivateRegistryConfiguration`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::OrgPrivateRegistryConfiguration`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<PrivateRegistriesSlashGetOrgPrivateRegistryError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// > [!NOTE] > This endpoint is in public preview and is subject to change.  Gets the org public key, which is needed to encrypt private registry secrets. You need to encrypt a secret before you can create or update secrets.  OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
pub async fn private_registries_slash_get_org_public_key(configuration: &configuration::Configuration, org: &str) -> Result<models::PrivateRegistriesGetOrgPublicKey200Response, Error<PrivateRegistriesSlashGetOrgPublicKeyError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;

    let uri_str = format!("{}/orgs/{org}/private-registries/public-key", configuration.base_path, org=crate::apis::urlencode(p_org));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::PrivateRegistriesGetOrgPublicKey200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::PrivateRegistriesGetOrgPublicKey200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<PrivateRegistriesSlashGetOrgPublicKeyError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// > [!NOTE] > This endpoint is in public preview and is subject to change.  Lists all private registry configurations available at the organization-level without revealing their encrypted values.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
pub async fn private_registries_slash_list_org_private_registries(configuration: &configuration::Configuration, org: &str, per_page: Option<i32>, page: Option<i32>) -> Result<models::PrivateRegistriesListOrgPrivateRegistries200Response, Error<PrivateRegistriesSlashListOrgPrivateRegistriesError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_per_page = per_page;
    let p_page = page;

    let uri_str = format!("{}/orgs/{org}/private-registries", configuration.base_path, org=crate::apis::urlencode(p_org));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_per_page {
        req_builder = req_builder.query(&[("per_page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::PrivateRegistriesListOrgPrivateRegistries200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::PrivateRegistriesListOrgPrivateRegistries200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<PrivateRegistriesSlashListOrgPrivateRegistriesError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// > [!NOTE] > This endpoint is in public preview and is subject to change.  Updates a private registry configuration with an encrypted value for an organization. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see \"[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api).\"  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
pub async fn private_registries_slash_update_org_private_registry(configuration: &configuration::Configuration, org: &str, secret_name: &str, private_registries_update_org_private_registry_request: models::PrivateRegistriesUpdateOrgPrivateRegistryRequest) -> Result<(), Error<PrivateRegistriesSlashUpdateOrgPrivateRegistryError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_secret_name = secret_name;
    let p_private_registries_update_org_private_registry_request = private_registries_update_org_private_registry_request;

    let uri_str = format!("{}/orgs/{org}/private-registries/{secret_name}", configuration.base_path, org=crate::apis::urlencode(p_org), secret_name=crate::apis::urlencode(p_secret_name));
    let mut req_builder = configuration.client.request(reqwest::Method::PATCH, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_private_registries_update_org_private_registry_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<PrivateRegistriesSlashUpdateOrgPrivateRegistryError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

