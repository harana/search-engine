/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`security_advisories_slash_create_fork`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SecurityAdvisoriesSlashCreateForkError {
    Status400(models::BasicError),
    Status422(models::ValidationError),
    Status403(models::BasicError),
    Status404(models::BasicError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`security_advisories_slash_create_private_vulnerability_report`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SecurityAdvisoriesSlashCreatePrivateVulnerabilityReportError {
    Status403(models::BasicError),
    Status404(models::BasicError),
    Status422(models::ValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`security_advisories_slash_create_repository_advisory`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SecurityAdvisoriesSlashCreateRepositoryAdvisoryError {
    Status403(models::BasicError),
    Status404(models::BasicError),
    Status422(models::ValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`security_advisories_slash_create_repository_advisory_cve_request`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SecurityAdvisoriesSlashCreateRepositoryAdvisoryCveRequestError {
    Status400(models::BasicError),
    Status403(models::BasicError),
    Status404(models::BasicError),
    Status422(models::ValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`security_advisories_slash_get_global_advisory`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SecurityAdvisoriesSlashGetGlobalAdvisoryError {
    Status404(models::BasicError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`security_advisories_slash_get_repository_advisory`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SecurityAdvisoriesSlashGetRepositoryAdvisoryError {
    Status403(models::BasicError),
    Status404(models::BasicError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`security_advisories_slash_list_global_advisories`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SecurityAdvisoriesSlashListGlobalAdvisoriesError {
    Status429(models::BasicError),
    Status422(models::ValidationErrorSimple),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`security_advisories_slash_list_org_repository_advisories`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SecurityAdvisoriesSlashListOrgRepositoryAdvisoriesError {
    Status400(models::BasicError),
    Status404(models::BasicError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`security_advisories_slash_list_repository_advisories`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SecurityAdvisoriesSlashListRepositoryAdvisoriesError {
    Status400(models::BasicError),
    Status404(models::BasicError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`security_advisories_slash_update_repository_advisory`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SecurityAdvisoriesSlashUpdateRepositoryAdvisoryError {
    Status403(models::BasicError),
    Status404(models::BasicError),
    Status422(models::ValidationError),
    UnknownValue(serde_json::Value),
}


/// Create a temporary private fork to collaborate on fixing a security vulnerability in your repository.  > [!NOTE] > Forking a repository happens asynchronously. You may have to wait up to 5 minutes before you can access the fork.
pub async fn security_advisories_slash_create_fork(configuration: &configuration::Configuration, owner: &str, repo: &str, ghsa_id: &str) -> Result<models::FullRepository, Error<SecurityAdvisoriesSlashCreateForkError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;
    let p_ghsa_id = ghsa_id;

    let uri_str = format!("{}/repos/{owner}/{repo}/security-advisories/{ghsa_id}/forks", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo), ghsa_id=crate::apis::urlencode(p_ghsa_id));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::FullRepository`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::FullRepository`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<SecurityAdvisoriesSlashCreateForkError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Report a security vulnerability to the maintainers of the repository. See \"[Privately reporting a security vulnerability](https://docs.github.com/code-security/security-advisories/guidance-on-reporting-and-writing/privately-reporting-a-security-vulnerability)\" for more information about private vulnerability reporting.
pub async fn security_advisories_slash_create_private_vulnerability_report(configuration: &configuration::Configuration, owner: &str, repo: &str, private_vulnerability_report_create: models::PrivateVulnerabilityReportCreate) -> Result<models::RepositoryAdvisory, Error<SecurityAdvisoriesSlashCreatePrivateVulnerabilityReportError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;
    let p_private_vulnerability_report_create = private_vulnerability_report_create;

    let uri_str = format!("{}/repos/{owner}/{repo}/security-advisories/reports", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_private_vulnerability_report_create);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::RepositoryAdvisory`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::RepositoryAdvisory`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<SecurityAdvisoriesSlashCreatePrivateVulnerabilityReportError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Creates a new repository security advisory.  In order to create a draft repository security advisory, the authenticated user must be a security manager or administrator of that repository.  OAuth app tokens and personal access tokens (classic) need the `repo` or `repository_advisories:write` scope to use this endpoint.
pub async fn security_advisories_slash_create_repository_advisory(configuration: &configuration::Configuration, owner: &str, repo: &str, repository_advisory_create: models::RepositoryAdvisoryCreate) -> Result<models::RepositoryAdvisory, Error<SecurityAdvisoriesSlashCreateRepositoryAdvisoryError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;
    let p_repository_advisory_create = repository_advisory_create;

    let uri_str = format!("{}/repos/{owner}/{repo}/security-advisories", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_repository_advisory_create);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::RepositoryAdvisory`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::RepositoryAdvisory`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<SecurityAdvisoriesSlashCreateRepositoryAdvisoryError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// If you want a CVE identification number for the security vulnerability in your project, and don't already have one, you can request a CVE identification number from GitHub. For more information see \"[Requesting a CVE identification number](https://docs.github.com/code-security/security-advisories/repository-security-advisories/publishing-a-repository-security-advisory#requesting-a-cve-identification-number-optional).\"  You may request a CVE for public repositories, but cannot do so for private repositories.  In order to request a CVE for a repository security advisory, the authenticated user must be a security manager or administrator of that repository.  OAuth app tokens and personal access tokens (classic) need the `repo` or `repository_advisories:write` scope to use this endpoint.
pub async fn security_advisories_slash_create_repository_advisory_cve_request(configuration: &configuration::Configuration, owner: &str, repo: &str, ghsa_id: &str) -> Result<serde_json::Value, Error<SecurityAdvisoriesSlashCreateRepositoryAdvisoryCveRequestError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;
    let p_ghsa_id = ghsa_id;

    let uri_str = format!("{}/repos/{owner}/{repo}/security-advisories/{ghsa_id}/cve", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo), ghsa_id=crate::apis::urlencode(p_ghsa_id));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `serde_json::Value`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `serde_json::Value`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<SecurityAdvisoriesSlashCreateRepositoryAdvisoryCveRequestError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Gets a global security advisory using its GitHub Security Advisory (GHSA) identifier.
pub async fn security_advisories_slash_get_global_advisory(configuration: &configuration::Configuration, ghsa_id: &str) -> Result<models::GlobalAdvisory, Error<SecurityAdvisoriesSlashGetGlobalAdvisoryError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_ghsa_id = ghsa_id;

    let uri_str = format!("{}/advisories/{ghsa_id}", configuration.base_path, ghsa_id=crate::apis::urlencode(p_ghsa_id));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::GlobalAdvisory`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::GlobalAdvisory`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<SecurityAdvisoriesSlashGetGlobalAdvisoryError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get a repository security advisory using its GitHub Security Advisory (GHSA) identifier.  Anyone can access any published security advisory on a public repository.  The authenticated user can access an unpublished security advisory from a repository if they are a security manager or administrator of that repository, or if they are a collaborator on the security advisory.  OAuth app tokens and personal access tokens (classic) need the `repo` or `repository_advisories:read` scope to to get a published security advisory in a private repository, or any unpublished security advisory that the authenticated user has access to.
pub async fn security_advisories_slash_get_repository_advisory(configuration: &configuration::Configuration, owner: &str, repo: &str, ghsa_id: &str) -> Result<models::RepositoryAdvisory, Error<SecurityAdvisoriesSlashGetRepositoryAdvisoryError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;
    let p_ghsa_id = ghsa_id;

    let uri_str = format!("{}/repos/{owner}/{repo}/security-advisories/{ghsa_id}", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo), ghsa_id=crate::apis::urlencode(p_ghsa_id));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::RepositoryAdvisory`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::RepositoryAdvisory`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<SecurityAdvisoriesSlashGetRepositoryAdvisoryError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Lists all global security advisories that match the specified parameters. If no other parameters are defined, the request will return only GitHub-reviewed advisories that are not malware.  By default, all responses will exclude advisories for malware, because malware are not standard vulnerabilities. To list advisories for malware, you must include the `type` parameter in your request, with the value `malware`. For more information about the different types of security advisories, see \"[About the GitHub Advisory database](https://docs.github.com/code-security/security-advisories/global-security-advisories/about-the-github-advisory-database#about-types-of-security-advisories).\"
pub async fn security_advisories_slash_list_global_advisories(configuration: &configuration::Configuration, ghsa_id: Option<&str>, r#type: Option<&str>, cve_id: Option<&str>, ecosystem: Option<models::SecurityAdvisoryEcosystems>, severity: Option<&str>, cwes: Option<models::SecurityAdvisoriesListGlobalAdvisoriesCwesParameter>, is_withdrawn: Option<bool>, affects: Option<models::SecurityAdvisoriesListGlobalAdvisoriesAffectsParameter>, published: Option<&str>, updated: Option<&str>, modified: Option<&str>, epss_percentage: Option<&str>, epss_percentile: Option<&str>, before: Option<&str>, after: Option<&str>, direction: Option<&str>, per_page: Option<i32>, sort: Option<&str>) -> Result<Vec<models::GlobalAdvisory>, Error<SecurityAdvisoriesSlashListGlobalAdvisoriesError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_ghsa_id = ghsa_id;
    let p_type = r#type;
    let p_cve_id = cve_id;
    let p_ecosystem = ecosystem;
    let p_severity = severity;
    let p_cwes = cwes;
    let p_is_withdrawn = is_withdrawn;
    let p_affects = affects;
    let p_published = published;
    let p_updated = updated;
    let p_modified = modified;
    let p_epss_percentage = epss_percentage;
    let p_epss_percentile = epss_percentile;
    let p_before = before;
    let p_after = after;
    let p_direction = direction;
    let p_per_page = per_page;
    let p_sort = sort;

    let uri_str = format!("{}/advisories", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_ghsa_id {
        req_builder = req_builder.query(&[("ghsa_id", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_type {
        req_builder = req_builder.query(&[("type", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_cve_id {
        req_builder = req_builder.query(&[("cve_id", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_ecosystem {
        req_builder = req_builder.query(&[("ecosystem", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_severity {
        req_builder = req_builder.query(&[("severity", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_cwes {
        req_builder = req_builder.query(&[("cwes", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_is_withdrawn {
        req_builder = req_builder.query(&[("is_withdrawn", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_affects {
        req_builder = req_builder.query(&[("affects", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_published {
        req_builder = req_builder.query(&[("published", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_updated {
        req_builder = req_builder.query(&[("updated", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_modified {
        req_builder = req_builder.query(&[("modified", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_epss_percentage {
        req_builder = req_builder.query(&[("epss_percentage", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_epss_percentile {
        req_builder = req_builder.query(&[("epss_percentile", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_before {
        req_builder = req_builder.query(&[("before", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_after {
        req_builder = req_builder.query(&[("after", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_direction {
        req_builder = req_builder.query(&[("direction", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_per_page {
        req_builder = req_builder.query(&[("per_page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_sort {
        req_builder = req_builder.query(&[("sort", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::GlobalAdvisory&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::GlobalAdvisory&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<SecurityAdvisoriesSlashListGlobalAdvisoriesError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Lists repository security advisories for an organization.  The authenticated user must be an owner or security manager for the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `repo` or `repository_advisories:write` scope to use this endpoint.
pub async fn security_advisories_slash_list_org_repository_advisories(configuration: &configuration::Configuration, org: &str, direction: Option<&str>, sort: Option<&str>, before: Option<&str>, after: Option<&str>, per_page: Option<i32>, state: Option<&str>) -> Result<Vec<models::RepositoryAdvisory>, Error<SecurityAdvisoriesSlashListOrgRepositoryAdvisoriesError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org = org;
    let p_direction = direction;
    let p_sort = sort;
    let p_before = before;
    let p_after = after;
    let p_per_page = per_page;
    let p_state = state;

    let uri_str = format!("{}/orgs/{org}/security-advisories", configuration.base_path, org=crate::apis::urlencode(p_org));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_direction {
        req_builder = req_builder.query(&[("direction", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_sort {
        req_builder = req_builder.query(&[("sort", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_before {
        req_builder = req_builder.query(&[("before", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_after {
        req_builder = req_builder.query(&[("after", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_per_page {
        req_builder = req_builder.query(&[("per_page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_state {
        req_builder = req_builder.query(&[("state", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::RepositoryAdvisory&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::RepositoryAdvisory&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<SecurityAdvisoriesSlashListOrgRepositoryAdvisoriesError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Lists security advisories in a repository.  The authenticated user can access unpublished security advisories from a repository if they are a security manager or administrator of that repository, or if they are a collaborator on any security advisory.  OAuth app tokens and personal access tokens (classic) need the `repo` or `repository_advisories:read` scope to to get a published security advisory in a private repository, or any unpublished security advisory that the authenticated user has access to.
pub async fn security_advisories_slash_list_repository_advisories(configuration: &configuration::Configuration, owner: &str, repo: &str, direction: Option<&str>, sort: Option<&str>, before: Option<&str>, after: Option<&str>, per_page: Option<i32>, state: Option<&str>) -> Result<Vec<models::RepositoryAdvisory>, Error<SecurityAdvisoriesSlashListRepositoryAdvisoriesError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;
    let p_direction = direction;
    let p_sort = sort;
    let p_before = before;
    let p_after = after;
    let p_per_page = per_page;
    let p_state = state;

    let uri_str = format!("{}/repos/{owner}/{repo}/security-advisories", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_direction {
        req_builder = req_builder.query(&[("direction", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_sort {
        req_builder = req_builder.query(&[("sort", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_before {
        req_builder = req_builder.query(&[("before", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_after {
        req_builder = req_builder.query(&[("after", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_per_page {
        req_builder = req_builder.query(&[("per_page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_state {
        req_builder = req_builder.query(&[("state", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::RepositoryAdvisory&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::RepositoryAdvisory&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<SecurityAdvisoriesSlashListRepositoryAdvisoriesError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Update a repository security advisory using its GitHub Security Advisory (GHSA) identifier.  In order to update any security advisory, the authenticated user must be a security manager or administrator of that repository, or a collaborator on the repository security advisory.  OAuth app tokens and personal access tokens (classic) need the `repo` or `repository_advisories:write` scope to use this endpoint.
pub async fn security_advisories_slash_update_repository_advisory(configuration: &configuration::Configuration, owner: &str, repo: &str, ghsa_id: &str, repository_advisory_update: models::RepositoryAdvisoryUpdate) -> Result<models::RepositoryAdvisory, Error<SecurityAdvisoriesSlashUpdateRepositoryAdvisoryError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_owner = owner;
    let p_repo = repo;
    let p_ghsa_id = ghsa_id;
    let p_repository_advisory_update = repository_advisory_update;

    let uri_str = format!("{}/repos/{owner}/{repo}/security-advisories/{ghsa_id}", configuration.base_path, owner=crate::apis::urlencode(p_owner), repo=crate::apis::urlencode(p_repo), ghsa_id=crate::apis::urlencode(p_ghsa_id));
    let mut req_builder = configuration.client.request(reqwest::Method::PATCH, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_repository_advisory_update);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::RepositoryAdvisory`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::RepositoryAdvisory`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<SecurityAdvisoriesSlashUpdateRepositoryAdvisoryError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

