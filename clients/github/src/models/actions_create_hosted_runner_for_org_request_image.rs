/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ActionsCreateHostedRunnerForOrgRequestImage : The image of runner. To list all available images, use `GET /actions/hosted-runners/images/github-owned` or `GET /actions/hosted-runners/images/partner`.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ActionsCreateHostedRunnerForOrgRequestImage {
    /// The unique identifier of the runner image.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The source of the runner image.
    #[serde(rename = "source", skip_serializing_if = "Option::is_none")]
    pub source: Option<Source>,
}

impl ActionsCreateHostedRunnerForOrgRequestImage {
    /// The image of runner. To list all available images, use `GET /actions/hosted-runners/images/github-owned` or `GET /actions/hosted-runners/images/partner`.
    pub fn new() -> ActionsCreateHostedRunnerForOrgRequestImage {
        ActionsCreateHostedRunnerForOrgRequestImage {
            id: None,
            source: None,
        }
    }
}
/// The source of the runner image.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Source {
    #[serde(rename = "github")]
    Github,
    #[serde(rename = "partner")]
    Partner,
    #[serde(rename = "custom")]
    Custom,
}

impl Default for Source {
    fn default() -> Source {
        Self::Github
    }
}

