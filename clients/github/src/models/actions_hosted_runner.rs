/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ActionsHostedRunner : A Github-hosted hosted runner.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ActionsHostedRunner {
    /// The unique identifier of the hosted runner.
    #[serde(rename = "id")]
    pub id: i32,
    /// The name of the hosted runner.
    #[serde(rename = "name")]
    pub name: String,
    /// The unique identifier of the group that the hosted runner belongs to.
    #[serde(rename = "runner_group_id", skip_serializing_if = "Option::is_none")]
    pub runner_group_id: Option<i32>,
    #[serde(rename = "image_details", deserialize_with = "Option::deserialize")]
    pub image_details: Option<Box<models::NullableActionsHostedRunnerPoolImage>>,
    #[serde(rename = "machine_size_details")]
    pub machine_size_details: Box<models::ActionsHostedRunnerMachineSpec>,
    /// The status of the runner.
    #[serde(rename = "status")]
    pub status: Status,
    /// The operating system of the image.
    #[serde(rename = "platform")]
    pub platform: String,
    /// The maximum amount of hosted runners. Runners will not scale automatically above this number. Use this setting to limit your cost.
    #[serde(rename = "maximum_runners", skip_serializing_if = "Option::is_none")]
    pub maximum_runners: Option<i32>,
    /// Whether public IP is enabled for the hosted runners.
    #[serde(rename = "public_ip_enabled")]
    pub public_ip_enabled: bool,
    /// The public IP ranges when public IP is enabled for the hosted runners.
    #[serde(rename = "public_ips", skip_serializing_if = "Option::is_none")]
    pub public_ips: Option<Vec<models::PublicIp>>,
    /// The time at which the runner was last used, in ISO 8601 format.
    #[serde(rename = "last_active_on", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub last_active_on: Option<Option<String>>,
}

impl ActionsHostedRunner {
    /// A Github-hosted hosted runner.
    pub fn new(id: i32, name: String, image_details: Option<models::NullableActionsHostedRunnerPoolImage>, machine_size_details: models::ActionsHostedRunnerMachineSpec, status: Status, platform: String, public_ip_enabled: bool) -> ActionsHostedRunner {
        ActionsHostedRunner {
            id,
            name,
            runner_group_id: None,
            image_details: if let Some(x) = image_details {Some(Box::new(x))} else {None},
            machine_size_details: Box::new(machine_size_details),
            status,
            platform,
            maximum_runners: None,
            public_ip_enabled,
            public_ips: None,
            last_active_on: None,
        }
    }
}
/// The status of the runner.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "Ready")]
    Ready,
    #[serde(rename = "Provisioning")]
    Provisioning,
    #[serde(rename = "Shutdown")]
    Shutdown,
    #[serde(rename = "Deleting")]
    Deleting,
    #[serde(rename = "Stuck")]
    Stuck,
}

impl Default for Status {
    fn default() -> Status {
        Self::Ready
    }
}

