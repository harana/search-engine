/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ActionsHostedRunnerImage : Provides details of a hosted runner image
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ActionsHostedRunnerImage {
    /// The ID of the image. Use this ID for the `image` parameter when creating a new larger runner.
    #[serde(rename = "id")]
    pub id: String,
    /// The operating system of the image.
    #[serde(rename = "platform")]
    pub platform: String,
    /// Image size in GB.
    #[serde(rename = "size_gb")]
    pub size_gb: i32,
    /// Display name for this image.
    #[serde(rename = "display_name")]
    pub display_name: String,
    /// The image provider.
    #[serde(rename = "source")]
    pub source: Source,
}

impl ActionsHostedRunnerImage {
    /// Provides details of a hosted runner image
    pub fn new(id: String, platform: String, size_gb: i32, display_name: String, source: Source) -> ActionsHostedRunnerImage {
        ActionsHostedRunnerImage {
            id,
            platform,
            size_gb,
            display_name,
            source,
        }
    }
}
/// The image provider.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Source {
    #[serde(rename = "github")]
    Github,
    #[serde(rename = "partner")]
    Partner,
    #[serde(rename = "custom")]
    Custom,
}

impl Default for Source {
    fn default() -> Source {
        Self::Github
    }
}

