/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AppsScopeTokenRequest {
    /// The access token used to authenticate to the GitHub API.
    #[serde(rename = "access_token")]
    pub access_token: String,
    /// The name of the user or organization to scope the user access token to. **Required** unless `target_id` is specified.
    #[serde(rename = "target", skip_serializing_if = "Option::is_none")]
    pub target: Option<String>,
    /// The ID of the user or organization to scope the user access token to. **Required** unless `target` is specified.
    #[serde(rename = "target_id", skip_serializing_if = "Option::is_none")]
    pub target_id: Option<i32>,
    /// The list of repository names to scope the user access token to. `repositories` may not be specified if `repository_ids` is specified.
    #[serde(rename = "repositories", skip_serializing_if = "Option::is_none")]
    pub repositories: Option<Vec<String>>,
    /// The list of repository IDs to scope the user access token to. `repository_ids` may not be specified if `repositories` is specified.
    #[serde(rename = "repository_ids", skip_serializing_if = "Option::is_none")]
    pub repository_ids: Option<Vec<i32>>,
    #[serde(rename = "permissions", skip_serializing_if = "Option::is_none")]
    pub permissions: Option<Box<models::AppPermissions>>,
}

impl AppsScopeTokenRequest {
    pub fn new(access_token: String) -> AppsScopeTokenRequest {
        AppsScopeTokenRequest {
            access_token,
            target: None,
            target_id: None,
            repositories: None,
            repository_ids: None,
            permissions: None,
        }
    }
}

