/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ClassroomAcceptedAssignment : A GitHub Classroom accepted assignment
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ClassroomAcceptedAssignment {
    /// Unique identifier of the repository.
    #[serde(rename = "id")]
    pub id: i32,
    /// Whether an accepted assignment has been submitted.
    #[serde(rename = "submitted")]
    pub submitted: bool,
    /// Whether a submission passed.
    #[serde(rename = "passing")]
    pub passing: bool,
    /// Count of student commits.
    #[serde(rename = "commit_count")]
    pub commit_count: i32,
    /// Most recent grade.
    #[serde(rename = "grade")]
    pub grade: String,
    #[serde(rename = "students")]
    pub students: Vec<models::SimpleClassroomUser>,
    #[serde(rename = "repository")]
    pub repository: Box<models::SimpleClassroomRepository>,
    #[serde(rename = "assignment")]
    pub assignment: Box<models::SimpleClassroomAssignment>,
}

impl ClassroomAcceptedAssignment {
    /// A GitHub Classroom accepted assignment
    pub fn new(id: i32, submitted: bool, passing: bool, commit_count: i32, grade: String, students: Vec<models::SimpleClassroomUser>, repository: models::SimpleClassroomRepository, assignment: models::SimpleClassroomAssignment) -> ClassroomAcceptedAssignment {
        ClassroomAcceptedAssignment {
            id,
            submitted,
            passing,
            commit_count,
            grade,
            students,
            repository: Box::new(repository),
            assignment: Box::new(assignment),
        }
    }
}

