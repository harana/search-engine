/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CodeScanningCreateVariantAnalysisRequest {
    #[serde(rename = "language")]
    pub language: models::CodeScanningVariantAnalysisLanguage,
    /// A Base64-encoded tarball containing a CodeQL query and all its dependencies
    #[serde(rename = "query_pack")]
    pub query_pack: String,
    /// List of repository names (in the form `owner/repo-name`) to run the query against. Precisely one property from `repositories`, `repository_lists` and `repository_owners` is required.
    #[serde(rename = "repositories", skip_serializing_if = "Option::is_none")]
    pub repositories: Option<Vec<String>>,
    /// List of repository lists to run the query against. Precisely one property from `repositories`, `repository_lists` and `repository_owners` is required.
    #[serde(rename = "repository_lists", skip_serializing_if = "Option::is_none")]
    pub repository_lists: Option<Vec<String>>,
    /// List of organization or user names whose repositories the query should be run against. Precisely one property from `repositories`, `repository_lists` and `repository_owners` is required.
    #[serde(rename = "repository_owners", skip_serializing_if = "Option::is_none")]
    pub repository_owners: Option<Vec<String>>,
}

impl CodeScanningCreateVariantAnalysisRequest {
    pub fn new(language: models::CodeScanningVariantAnalysisLanguage, query_pack: String) -> CodeScanningCreateVariantAnalysisRequest {
        CodeScanningCreateVariantAnalysisRequest {
            language,
            query_pack,
            repositories: None,
            repository_lists: None,
            repository_owners: None,
        }
    }
}

