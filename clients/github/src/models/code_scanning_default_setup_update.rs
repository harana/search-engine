/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// CodeScanningDefaultSetupUpdate : Configuration for code scanning default setup.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CodeScanningDefaultSetupUpdate {
    /// The desired state of code scanning default setup.
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<State>,
    /// Runner type to be used.
    #[serde(rename = "runner_type", skip_serializing_if = "Option::is_none")]
    pub runner_type: Option<RunnerType>,
    /// Runner label to be used if the runner type is labeled.
    #[serde(rename = "runner_label", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub runner_label: Option<Option<String>>,
    /// CodeQL query suite to be used.
    #[serde(rename = "query_suite", skip_serializing_if = "Option::is_none")]
    pub query_suite: Option<QuerySuite>,
    /// CodeQL languages to be analyzed.
    #[serde(rename = "languages", skip_serializing_if = "Option::is_none")]
    pub languages: Option<Vec<Languages>>,
}

impl CodeScanningDefaultSetupUpdate {
    /// Configuration for code scanning default setup.
    pub fn new() -> CodeScanningDefaultSetupUpdate {
        CodeScanningDefaultSetupUpdate {
            state: None,
            runner_type: None,
            runner_label: None,
            query_suite: None,
            languages: None,
        }
    }
}
/// The desired state of code scanning default setup.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum State {
    #[serde(rename = "configured")]
    Configured,
    #[serde(rename = "not-configured")]
    NotConfigured,
}

impl Default for State {
    fn default() -> State {
        Self::Configured
    }
}
/// Runner type to be used.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RunnerType {
    #[serde(rename = "standard")]
    Standard,
    #[serde(rename = "labeled")]
    Labeled,
}

impl Default for RunnerType {
    fn default() -> RunnerType {
        Self::Standard
    }
}
/// CodeQL query suite to be used.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum QuerySuite {
    #[serde(rename = "default")]
    Default,
    #[serde(rename = "extended")]
    Extended,
}

impl Default for QuerySuite {
    fn default() -> QuerySuite {
        Self::Default
    }
}
/// CodeQL languages to be analyzed.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Languages {
    #[serde(rename = "actions")]
    Actions,
    #[serde(rename = "c-cpp")]
    CCpp,
    #[serde(rename = "csharp")]
    Csharp,
    #[serde(rename = "go")]
    Go,
    #[serde(rename = "java-kotlin")]
    JavaKotlin,
    #[serde(rename = "javascript-typescript")]
    JavascriptTypescript,
    #[serde(rename = "python")]
    Python,
    #[serde(rename = "ruby")]
    Ruby,
    #[serde(rename = "swift")]
    Swift,
}

impl Default for Languages {
    fn default() -> Languages {
        Self::Actions
    }
}

