/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CodeScanningUploadSarifRequest {
    /// The SHA of the commit to which the analysis you are uploading relates.
    #[serde(rename = "commit_sha")]
    pub commit_sha: String,
    /// The full Git reference, formatted as `refs/heads/<branch name>`, `refs/tags/<tag>`, `refs/pull/<number>/merge`, or `refs/pull/<number>/head`.
    #[serde(rename = "ref")]
    pub r#ref: String,
    /// A Base64 string representing the SARIF file to upload. You must first compress your SARIF file using [`gzip`](http://www.gnu.org/software/gzip/manual/gzip.html) and then translate the contents of the file into a Base64 encoding string. For more information, see \"[SARIF support for code scanning](https://docs.github.com/code-security/secure-coding/sarif-support-for-code-scanning).\"
    #[serde(rename = "sarif")]
    pub sarif: String,
    /// The base directory used in the analysis, as it appears in the SARIF file. This property is used to convert file paths from absolute to relative, so that alerts can be mapped to their correct location in the repository.
    #[serde(rename = "checkout_uri", skip_serializing_if = "Option::is_none")]
    pub checkout_uri: Option<String>,
    /// The time that the analysis run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
    #[serde(rename = "started_at", skip_serializing_if = "Option::is_none")]
    pub started_at: Option<String>,
    /// The name of the tool used to generate the code scanning analysis. If this parameter is not used, the tool name defaults to \"API\". If the uploaded SARIF contains a tool GUID, this will be available for filtering using the `tool_guid` parameter of operations such as `GET /repos/{owner}/{repo}/code-scanning/alerts`.
    #[serde(rename = "tool_name", skip_serializing_if = "Option::is_none")]
    pub tool_name: Option<String>,
    /// Whether the SARIF file will be validated according to the code scanning specifications. This parameter is intended to help integrators ensure that the uploaded SARIF files are correctly rendered by code scanning.
    #[serde(rename = "validate", skip_serializing_if = "Option::is_none")]
    pub validate: Option<bool>,
}

impl CodeScanningUploadSarifRequest {
    pub fn new(commit_sha: String, r#ref: String, sarif: String) -> CodeScanningUploadSarifRequest {
        CodeScanningUploadSarifRequest {
            commit_sha,
            r#ref,
            sarif,
            checkout_uri: None,
            started_at: None,
            tool_name: None,
            validate: None,
        }
    }
}

