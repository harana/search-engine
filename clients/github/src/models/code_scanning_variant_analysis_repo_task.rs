/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CodeScanningVariantAnalysisRepoTask {
    #[serde(rename = "repository")]
    pub repository: Box<models::SimpleRepository>,
    #[serde(rename = "analysis_status")]
    pub analysis_status: models::CodeScanningVariantAnalysisStatus,
    /// The size of the artifact. This is only available for successful analyses.
    #[serde(rename = "artifact_size_in_bytes", skip_serializing_if = "Option::is_none")]
    pub artifact_size_in_bytes: Option<i32>,
    /// The number of results in the case of a successful analysis. This is only available for successful analyses.
    #[serde(rename = "result_count", skip_serializing_if = "Option::is_none")]
    pub result_count: Option<i32>,
    /// The reason of the failure of this repo task. This is only available if the repository task has failed.
    #[serde(rename = "failure_message", skip_serializing_if = "Option::is_none")]
    pub failure_message: Option<String>,
    /// The SHA of the commit the CodeQL database was built against. This is only available for successful analyses.
    #[serde(rename = "database_commit_sha", skip_serializing_if = "Option::is_none")]
    pub database_commit_sha: Option<String>,
    /// The source location prefix to use. This is only available for successful analyses.
    #[serde(rename = "source_location_prefix", skip_serializing_if = "Option::is_none")]
    pub source_location_prefix: Option<String>,
    /// The URL of the artifact. This is only available for successful analyses.
    #[serde(rename = "artifact_url", skip_serializing_if = "Option::is_none")]
    pub artifact_url: Option<String>,
}

impl CodeScanningVariantAnalysisRepoTask {
    pub fn new(repository: models::SimpleRepository, analysis_status: models::CodeScanningVariantAnalysisStatus) -> CodeScanningVariantAnalysisRepoTask {
        CodeScanningVariantAnalysisRepoTask {
            repository: Box::new(repository),
            analysis_status,
            artifact_size_in_bytes: None,
            result_count: None,
            failure_message: None,
            database_commit_sha: None,
            source_location_prefix: None,
            artifact_url: None,
        }
    }
}

