/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CodeSecurityUpdateEnterpriseConfigurationRequest {
    /// The name of the code security configuration. Must be unique across the enterprise.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// A description of the code security configuration
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The enablement status of GitHub Advanced Security. Must be set to enabled if you want to enable any GHAS settings.
    #[serde(rename = "advanced_security", skip_serializing_if = "Option::is_none")]
    pub advanced_security: Option<AdvancedSecurity>,
    /// The enablement status of Dependency Graph
    #[serde(rename = "dependency_graph", skip_serializing_if = "Option::is_none")]
    pub dependency_graph: Option<DependencyGraph>,
    /// The enablement status of Automatic dependency submission
    #[serde(rename = "dependency_graph_autosubmit_action", skip_serializing_if = "Option::is_none")]
    pub dependency_graph_autosubmit_action: Option<DependencyGraphAutosubmitAction>,
    #[serde(rename = "dependency_graph_autosubmit_action_options", skip_serializing_if = "Option::is_none")]
    pub dependency_graph_autosubmit_action_options: Option<Box<models::CodeSecurityUpdateEnterpriseConfigurationRequestDependencyGraphAutosubmitActionOptions>>,
    /// The enablement status of Dependabot alerts
    #[serde(rename = "dependabot_alerts", skip_serializing_if = "Option::is_none")]
    pub dependabot_alerts: Option<DependabotAlerts>,
    /// The enablement status of Dependabot security updates
    #[serde(rename = "dependabot_security_updates", skip_serializing_if = "Option::is_none")]
    pub dependabot_security_updates: Option<DependabotSecurityUpdates>,
    /// The enablement status of code scanning default setup
    #[serde(rename = "code_scanning_default_setup", skip_serializing_if = "Option::is_none")]
    pub code_scanning_default_setup: Option<CodeScanningDefaultSetup>,
    #[serde(rename = "code_scanning_default_setup_options", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub code_scanning_default_setup_options: Option<Option<Box<models::CodeScanningDefaultSetupOptions>>>,
    /// The enablement status of code scanning delegated alert dismissal
    #[serde(rename = "code_scanning_delegated_alert_dismissal", skip_serializing_if = "Option::is_none")]
    pub code_scanning_delegated_alert_dismissal: Option<CodeScanningDelegatedAlertDismissal>,
    /// The enablement status of secret scanning
    #[serde(rename = "secret_scanning", skip_serializing_if = "Option::is_none")]
    pub secret_scanning: Option<SecretScanning>,
    /// The enablement status of secret scanning push protection
    #[serde(rename = "secret_scanning_push_protection", skip_serializing_if = "Option::is_none")]
    pub secret_scanning_push_protection: Option<SecretScanningPushProtection>,
    /// The enablement status of secret scanning validity checks
    #[serde(rename = "secret_scanning_validity_checks", skip_serializing_if = "Option::is_none")]
    pub secret_scanning_validity_checks: Option<SecretScanningValidityChecks>,
    /// The enablement status of secret scanning non-provider patterns
    #[serde(rename = "secret_scanning_non_provider_patterns", skip_serializing_if = "Option::is_none")]
    pub secret_scanning_non_provider_patterns: Option<SecretScanningNonProviderPatterns>,
    /// The enablement status of Copilot secret scanning
    #[serde(rename = "secret_scanning_generic_secrets", skip_serializing_if = "Option::is_none")]
    pub secret_scanning_generic_secrets: Option<SecretScanningGenericSecrets>,
    /// The enablement status of secret scanning delegated alert dismissal
    #[serde(rename = "secret_scanning_delegated_alert_dismissal", skip_serializing_if = "Option::is_none")]
    pub secret_scanning_delegated_alert_dismissal: Option<SecretScanningDelegatedAlertDismissal>,
    /// The enablement status of private vulnerability reporting
    #[serde(rename = "private_vulnerability_reporting", skip_serializing_if = "Option::is_none")]
    pub private_vulnerability_reporting: Option<PrivateVulnerabilityReporting>,
    /// The enforcement status for a security configuration
    #[serde(rename = "enforcement", skip_serializing_if = "Option::is_none")]
    pub enforcement: Option<Enforcement>,
}

impl CodeSecurityUpdateEnterpriseConfigurationRequest {
    pub fn new() -> CodeSecurityUpdateEnterpriseConfigurationRequest {
        CodeSecurityUpdateEnterpriseConfigurationRequest {
            name: None,
            description: None,
            advanced_security: None,
            dependency_graph: None,
            dependency_graph_autosubmit_action: None,
            dependency_graph_autosubmit_action_options: None,
            dependabot_alerts: None,
            dependabot_security_updates: None,
            code_scanning_default_setup: None,
            code_scanning_default_setup_options: None,
            code_scanning_delegated_alert_dismissal: None,
            secret_scanning: None,
            secret_scanning_push_protection: None,
            secret_scanning_validity_checks: None,
            secret_scanning_non_provider_patterns: None,
            secret_scanning_generic_secrets: None,
            secret_scanning_delegated_alert_dismissal: None,
            private_vulnerability_reporting: None,
            enforcement: None,
        }
    }
}
/// The enablement status of GitHub Advanced Security. Must be set to enabled if you want to enable any GHAS settings.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AdvancedSecurity {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for AdvancedSecurity {
    fn default() -> AdvancedSecurity {
        Self::Enabled
    }
}
/// The enablement status of Dependency Graph
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DependencyGraph {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
    #[serde(rename = "not_set")]
    NotSet,
}

impl Default for DependencyGraph {
    fn default() -> DependencyGraph {
        Self::Enabled
    }
}
/// The enablement status of Automatic dependency submission
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DependencyGraphAutosubmitAction {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
    #[serde(rename = "not_set")]
    NotSet,
}

impl Default for DependencyGraphAutosubmitAction {
    fn default() -> DependencyGraphAutosubmitAction {
        Self::Enabled
    }
}
/// The enablement status of Dependabot alerts
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DependabotAlerts {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
    #[serde(rename = "not_set")]
    NotSet,
}

impl Default for DependabotAlerts {
    fn default() -> DependabotAlerts {
        Self::Enabled
    }
}
/// The enablement status of Dependabot security updates
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DependabotSecurityUpdates {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
    #[serde(rename = "not_set")]
    NotSet,
}

impl Default for DependabotSecurityUpdates {
    fn default() -> DependabotSecurityUpdates {
        Self::Enabled
    }
}
/// The enablement status of code scanning default setup
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum CodeScanningDefaultSetup {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
    #[serde(rename = "not_set")]
    NotSet,
}

impl Default for CodeScanningDefaultSetup {
    fn default() -> CodeScanningDefaultSetup {
        Self::Enabled
    }
}
/// The enablement status of code scanning delegated alert dismissal
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum CodeScanningDelegatedAlertDismissal {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
    #[serde(rename = "not_set")]
    NotSet,
}

impl Default for CodeScanningDelegatedAlertDismissal {
    fn default() -> CodeScanningDelegatedAlertDismissal {
        Self::Enabled
    }
}
/// The enablement status of secret scanning
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SecretScanning {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
    #[serde(rename = "not_set")]
    NotSet,
}

impl Default for SecretScanning {
    fn default() -> SecretScanning {
        Self::Enabled
    }
}
/// The enablement status of secret scanning push protection
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SecretScanningPushProtection {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
    #[serde(rename = "not_set")]
    NotSet,
}

impl Default for SecretScanningPushProtection {
    fn default() -> SecretScanningPushProtection {
        Self::Enabled
    }
}
/// The enablement status of secret scanning validity checks
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SecretScanningValidityChecks {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
    #[serde(rename = "not_set")]
    NotSet,
}

impl Default for SecretScanningValidityChecks {
    fn default() -> SecretScanningValidityChecks {
        Self::Enabled
    }
}
/// The enablement status of secret scanning non-provider patterns
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SecretScanningNonProviderPatterns {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
    #[serde(rename = "not_set")]
    NotSet,
}

impl Default for SecretScanningNonProviderPatterns {
    fn default() -> SecretScanningNonProviderPatterns {
        Self::Enabled
    }
}
/// The enablement status of Copilot secret scanning
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SecretScanningGenericSecrets {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
    #[serde(rename = "not_set")]
    NotSet,
}

impl Default for SecretScanningGenericSecrets {
    fn default() -> SecretScanningGenericSecrets {
        Self::Enabled
    }
}
/// The enablement status of secret scanning delegated alert dismissal
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SecretScanningDelegatedAlertDismissal {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
    #[serde(rename = "not_set")]
    NotSet,
}

impl Default for SecretScanningDelegatedAlertDismissal {
    fn default() -> SecretScanningDelegatedAlertDismissal {
        Self::Enabled
    }
}
/// The enablement status of private vulnerability reporting
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PrivateVulnerabilityReporting {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
    #[serde(rename = "not_set")]
    NotSet,
}

impl Default for PrivateVulnerabilityReporting {
    fn default() -> PrivateVulnerabilityReporting {
        Self::Enabled
    }
}
/// The enforcement status for a security configuration
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Enforcement {
    #[serde(rename = "enforced")]
    Enforced,
    #[serde(rename = "unenforced")]
    Unenforced,
}

impl Default for Enforcement {
    fn default() -> Enforcement {
        Self::Enforced
    }
}

