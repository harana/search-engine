/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CodeownersErrorsErrorsInner {
    /// The line number where this errors occurs.
    #[serde(rename = "line")]
    pub line: i32,
    /// The column number where this errors occurs.
    #[serde(rename = "column")]
    pub column: i32,
    /// The contents of the line where the error occurs.
    #[serde(rename = "source", skip_serializing_if = "Option::is_none")]
    pub source: Option<String>,
    /// The type of error.
    #[serde(rename = "kind")]
    pub kind: String,
    /// Suggested action to fix the error. This will usually be `null`, but is provided for some common errors.
    #[serde(rename = "suggestion", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub suggestion: Option<Option<String>>,
    /// A human-readable description of the error, combining information from multiple fields, laid out for display in a monospaced typeface (for example, a command-line setting).
    #[serde(rename = "message")]
    pub message: String,
    /// The path of the file where the error occured.
    #[serde(rename = "path")]
    pub path: String,
}

impl CodeownersErrorsErrorsInner {
    pub fn new(line: i32, column: i32, kind: String, message: String, path: String) -> CodeownersErrorsErrorsInner {
        CodeownersErrorsErrorsInner {
            line,
            column,
            source: None,
            kind,
            suggestion: None,
            message,
            path,
        }
    }
}

