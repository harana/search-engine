/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CodespacesCreateForAuthenticatedUserRequestOneOf1 {
    #[serde(rename = "pull_request")]
    pub pull_request: Box<models::CodespacesCreateForAuthenticatedUserRequestOneOf1PullRequest>,
    /// The requested location for a new codespace. Best efforts are made to respect this upon creation. Assigned by IP if not provided.
    #[serde(rename = "location", skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    /// The geographic area for this codespace. If not specified, the value is assigned by IP. This property replaces `location`, which is closing down.
    #[serde(rename = "geo", skip_serializing_if = "Option::is_none")]
    pub geo: Option<Geo>,
    /// Machine type to use for this codespace
    #[serde(rename = "machine", skip_serializing_if = "Option::is_none")]
    pub machine: Option<String>,
    /// Path to devcontainer.json config to use for this codespace
    #[serde(rename = "devcontainer_path", skip_serializing_if = "Option::is_none")]
    pub devcontainer_path: Option<String>,
    /// Working directory for this codespace
    #[serde(rename = "working_directory", skip_serializing_if = "Option::is_none")]
    pub working_directory: Option<String>,
    /// Time in minutes before codespace stops from inactivity
    #[serde(rename = "idle_timeout_minutes", skip_serializing_if = "Option::is_none")]
    pub idle_timeout_minutes: Option<i32>,
}

impl CodespacesCreateForAuthenticatedUserRequestOneOf1 {
    pub fn new(pull_request: models::CodespacesCreateForAuthenticatedUserRequestOneOf1PullRequest) -> CodespacesCreateForAuthenticatedUserRequestOneOf1 {
        CodespacesCreateForAuthenticatedUserRequestOneOf1 {
            pull_request: Box::new(pull_request),
            location: None,
            geo: None,
            machine: None,
            devcontainer_path: None,
            working_directory: None,
            idle_timeout_minutes: None,
        }
    }
}
/// The geographic area for this codespace. If not specified, the value is assigned by IP. This property replaces `location`, which is closing down.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Geo {
    #[serde(rename = "EuropeWest")]
    EuropeWest,
    #[serde(rename = "SoutheastAsia")]
    SoutheastAsia,
    #[serde(rename = "UsEast")]
    UsEast,
    #[serde(rename = "UsWest")]
    UsWest,
}

impl Default for Geo {
    fn default() -> Geo {
        Self::EuropeWest
    }
}

