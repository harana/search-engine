/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CodespacesCreateOrUpdateSecretForAuthenticatedUserRequest {
    /// Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get the public key for the authenticated user](https://docs.github.com/rest/codespaces/secrets#get-public-key-for-the-authenticated-user) endpoint.
    #[serde(rename = "encrypted_value", skip_serializing_if = "Option::is_none")]
    pub encrypted_value: Option<String>,
    /// ID of the key you used to encrypt the secret.
    #[serde(rename = "key_id")]
    pub key_id: String,
    /// An array of repository ids that can access the user secret. You can manage the list of selected repositories using the [List selected repositories for a user secret](https://docs.github.com/rest/codespaces/secrets#list-selected-repositories-for-a-user-secret), [Set selected repositories for a user secret](https://docs.github.com/rest/codespaces/secrets#set-selected-repositories-for-a-user-secret), and [Remove a selected repository from a user secret](https://docs.github.com/rest/codespaces/secrets#remove-a-selected-repository-from-a-user-secret) endpoints.
    #[serde(rename = "selected_repository_ids", skip_serializing_if = "Option::is_none")]
    pub selected_repository_ids: Option<Vec<models::CodespacesCreateOrUpdateSecretForAuthenticatedUserRequestSelectedRepositoryIdsInner>>,
}

impl CodespacesCreateOrUpdateSecretForAuthenticatedUserRequest {
    pub fn new(key_id: String) -> CodespacesCreateOrUpdateSecretForAuthenticatedUserRequest {
        CodespacesCreateOrUpdateSecretForAuthenticatedUserRequest {
            encrypted_value: None,
            key_id,
            selected_repository_ids: None,
        }
    }
}

