/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CommitSearchResultItemCommit {
    #[serde(rename = "author")]
    pub author: Box<models::CommitSearchResultItemCommitAuthor>,
    #[serde(rename = "committer", deserialize_with = "Option::deserialize")]
    pub committer: Option<Box<models::NullableGitUser>>,
    #[serde(rename = "comment_count")]
    pub comment_count: i32,
    #[serde(rename = "message")]
    pub message: String,
    #[serde(rename = "tree")]
    pub tree: Box<models::ShortBranchCommit>,
    #[serde(rename = "url")]
    pub url: String,
    #[serde(rename = "verification", skip_serializing_if = "Option::is_none")]
    pub verification: Option<Box<models::Verification>>,
}

impl CommitSearchResultItemCommit {
    pub fn new(author: models::CommitSearchResultItemCommitAuthor, committer: Option<models::NullableGitUser>, comment_count: i32, message: String, tree: models::ShortBranchCommit, url: String) -> CommitSearchResultItemCommit {
        CommitSearchResultItemCommit {
            author: Box::new(author),
            committer: if let Some(x) = committer {Some(Box::new(x))} else {None},
            comment_count,
            message,
            tree: Box::new(tree),
            url,
            verification: None,
        }
    }
}

