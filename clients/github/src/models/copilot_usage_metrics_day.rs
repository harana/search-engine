/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// CopilotUsageMetricsDay : Copilot usage metrics for a given day.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CopilotUsageMetricsDay {
    /// The date for which the usage metrics are aggregated, in `YYYY-MM-DD` format.
    #[serde(rename = "date")]
    pub date: String,
    /// The total number of Copilot users with activity belonging to any Copilot feature, globally, for the given day. Includes passive activity such as receiving a code suggestion, as well as engagement activity such as accepting a code suggestion or prompting chat. Does not include authentication events. Is not limited to the individual features detailed on the endpoint.
    #[serde(rename = "total_active_users", skip_serializing_if = "Option::is_none")]
    pub total_active_users: Option<i32>,
    /// The total number of Copilot users who engaged with any Copilot feature, for the given day. Examples include but are not limited to accepting a code suggestion, prompting Copilot chat, or triggering a PR Summary. Does not include authentication events. Is not limited to the individual features detailed on the endpoint.
    #[serde(rename = "total_engaged_users", skip_serializing_if = "Option::is_none")]
    pub total_engaged_users: Option<i32>,
    #[serde(rename = "copilot_ide_code_completions", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub copilot_ide_code_completions: Option<Option<models::CopilotIdeCodeCompletions>>,
    #[serde(rename = "copilot_ide_chat", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub copilot_ide_chat: Option<Option<models::CopilotIdeChat>>,
    #[serde(rename = "copilot_dotcom_chat", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub copilot_dotcom_chat: Option<Option<models::CopilotDotcomChat>>,
    #[serde(rename = "copilot_dotcom_pull_requests", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub copilot_dotcom_pull_requests: Option<Option<models::CopilotDotcomPullRequests>>,
}

impl CopilotUsageMetricsDay {
    /// Copilot usage metrics for a given day.
    pub fn new(date: String) -> CopilotUsageMetricsDay {
        CopilotUsageMetricsDay {
            date,
            total_active_users: None,
            total_engaged_users: None,
            copilot_ide_code_completions: None,
            copilot_ide_chat: None,
            copilot_dotcom_chat: None,
            copilot_dotcom_pull_requests: None,
        }
    }
}

