/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DiscussionCategory {
    #[serde(rename = "created_at")]
    pub created_at: String,
    #[serde(rename = "description")]
    pub description: String,
    #[serde(rename = "emoji")]
    pub emoji: String,
    #[serde(rename = "id")]
    pub id: i32,
    #[serde(rename = "is_answerable")]
    pub is_answerable: bool,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "node_id", skip_serializing_if = "Option::is_none")]
    pub node_id: Option<String>,
    #[serde(rename = "repository_id")]
    pub repository_id: i32,
    #[serde(rename = "slug")]
    pub slug: String,
    #[serde(rename = "updated_at")]
    pub updated_at: String,
}

impl DiscussionCategory {
    pub fn new(created_at: String, description: String, emoji: String, id: i32, is_answerable: bool, name: String, repository_id: i32, slug: String, updated_at: String) -> DiscussionCategory {
        DiscussionCategory {
            created_at,
            description,
            emoji,
            id,
            is_answerable,
            name,
            node_id: None,
            repository_id,
            slug,
            updated_at,
        }
    }
}

