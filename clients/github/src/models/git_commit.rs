/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// GitCommit : Low-level Git commit operations within a repository
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitCommit {
    /// SHA for the commit
    #[serde(rename = "sha")]
    pub sha: String,
    #[serde(rename = "node_id")]
    pub node_id: String,
    #[serde(rename = "url")]
    pub url: String,
    #[serde(rename = "author")]
    pub author: Box<models::GitCommitAuthor>,
    #[serde(rename = "committer")]
    pub committer: Box<models::GitCommitAuthor>,
    /// Message describing the purpose of the commit
    #[serde(rename = "message")]
    pub message: String,
    #[serde(rename = "tree")]
    pub tree: Box<models::GitCommitTree>,
    #[serde(rename = "parents")]
    pub parents: Vec<models::GitCommitParentsInner>,
    #[serde(rename = "verification")]
    pub verification: Box<models::GitCommitVerification>,
    #[serde(rename = "html_url")]
    pub html_url: String,
}

impl GitCommit {
    /// Low-level Git commit operations within a repository
    pub fn new(sha: String, node_id: String, url: String, author: models::GitCommitAuthor, committer: models::GitCommitAuthor, message: String, tree: models::GitCommitTree, parents: Vec<models::GitCommitParentsInner>, verification: models::GitCommitVerification, html_url: String) -> GitCommit {
        GitCommit {
            sha,
            node_id,
            url,
            author: Box::new(author),
            committer: Box::new(committer),
            message,
            tree: Box::new(tree),
            parents,
            verification: Box::new(verification),
            html_url,
        }
    }
}

