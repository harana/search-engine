/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// GitTag : Metadata for a Git tag
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitTag {
    #[serde(rename = "node_id")]
    pub node_id: String,
    /// Name of the tag
    #[serde(rename = "tag")]
    pub tag: String,
    #[serde(rename = "sha")]
    pub sha: String,
    /// URL for the tag
    #[serde(rename = "url")]
    pub url: String,
    /// Message describing the purpose of the tag
    #[serde(rename = "message")]
    pub message: String,
    #[serde(rename = "tagger")]
    pub tagger: Box<models::GitTagTagger>,
    #[serde(rename = "object")]
    pub object: Box<models::GitTagObject>,
    #[serde(rename = "verification", skip_serializing_if = "Option::is_none")]
    pub verification: Option<Box<models::Verification>>,
}

impl GitTag {
    /// Metadata for a Git tag
    pub fn new(node_id: String, tag: String, sha: String, url: String, message: String, tagger: models::GitTagTagger, object: models::GitTagObject) -> GitTag {
        GitTag {
            node_id,
            tag,
            sha,
            url,
            message,
            tagger: Box::new(tagger),
            object: Box::new(object),
            verification: None,
        }
    }
}

