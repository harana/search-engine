/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GpgKeySubkeysInner {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i64>,
    #[serde(rename = "primary_key_id", skip_serializing_if = "Option::is_none")]
    pub primary_key_id: Option<i32>,
    #[serde(rename = "key_id", skip_serializing_if = "Option::is_none")]
    pub key_id: Option<String>,
    #[serde(rename = "public_key", skip_serializing_if = "Option::is_none")]
    pub public_key: Option<String>,
    #[serde(rename = "emails", skip_serializing_if = "Option::is_none")]
    pub emails: Option<Vec<models::GpgKeyEmailsInner>>,
    #[serde(rename = "subkeys", skip_serializing_if = "Option::is_none")]
    pub subkeys: Option<Vec<serde_json::Value>>,
    #[serde(rename = "can_sign", skip_serializing_if = "Option::is_none")]
    pub can_sign: Option<bool>,
    #[serde(rename = "can_encrypt_comms", skip_serializing_if = "Option::is_none")]
    pub can_encrypt_comms: Option<bool>,
    #[serde(rename = "can_encrypt_storage", skip_serializing_if = "Option::is_none")]
    pub can_encrypt_storage: Option<bool>,
    #[serde(rename = "can_certify", skip_serializing_if = "Option::is_none")]
    pub can_certify: Option<bool>,
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    #[serde(rename = "expires_at", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub expires_at: Option<Option<String>>,
    #[serde(rename = "raw_key", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub raw_key: Option<Option<String>>,
    #[serde(rename = "revoked", skip_serializing_if = "Option::is_none")]
    pub revoked: Option<bool>,
}

impl GpgKeySubkeysInner {
    pub fn new() -> GpgKeySubkeysInner {
        GpgKeySubkeysInner {
            id: None,
            primary_key_id: None,
            key_id: None,
            public_key: None,
            emails: None,
            subkeys: None,
            can_sign: None,
            can_encrypt_comms: None,
            can_encrypt_storage: None,
            can_certify: None,
            created_at: None,
            expires_at: None,
            raw_key: None,
            revoked: None,
        }
    }
}

