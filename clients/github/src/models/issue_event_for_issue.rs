/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// IssueEventForIssue : Issue Event for Issue
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct IssueEventForIssue {
    #[serde(rename = "id")]
    pub id: i32,
    #[serde(rename = "node_id")]
    pub node_id: String,
    #[serde(rename = "url")]
    pub url: String,
    #[serde(rename = "actor")]
    pub actor: Box<models::SimpleUser>,
    #[serde(rename = "event")]
    pub event: String,
    #[serde(rename = "commit_id", deserialize_with = "Option::deserialize")]
    pub commit_id: Option<String>,
    #[serde(rename = "commit_url", deserialize_with = "Option::deserialize")]
    pub commit_url: Option<String>,
    #[serde(rename = "created_at")]
    pub created_at: String,
    #[serde(rename = "performed_via_github_app", deserialize_with = "Option::deserialize")]
    pub performed_via_github_app: Option<Box<models::Integration>>,
    #[serde(rename = "label")]
    pub label: Box<models::LabeledIssueEventLabel>,
    #[serde(rename = "assignee")]
    pub assignee: Box<models::SimpleUser>,
    #[serde(rename = "assigner")]
    pub assigner: Box<models::SimpleUser>,
    #[serde(rename = "milestone")]
    pub milestone: Box<models::MilestonedIssueEventMilestone>,
    #[serde(rename = "rename")]
    pub rename: Box<models::RenamedIssueEventRename>,
    #[serde(rename = "review_requester")]
    pub review_requester: Box<models::SimpleUser>,
    #[serde(rename = "requested_team", skip_serializing_if = "Option::is_none")]
    pub requested_team: Option<Box<models::Team>>,
    #[serde(rename = "requested_reviewer", skip_serializing_if = "Option::is_none")]
    pub requested_reviewer: Option<Box<models::SimpleUser>>,
    #[serde(rename = "dismissed_review")]
    pub dismissed_review: Box<models::ReviewDismissedIssueEventDismissedReview>,
    #[serde(rename = "lock_reason", deserialize_with = "Option::deserialize")]
    pub lock_reason: Option<String>,
    #[serde(rename = "project_card", skip_serializing_if = "Option::is_none")]
    pub project_card: Option<Box<models::AddedToProjectIssueEventProjectCard>>,
}

impl IssueEventForIssue {
    /// Issue Event for Issue
    pub fn new(id: i32, node_id: String, url: String, actor: models::SimpleUser, event: String, commit_id: Option<String>, commit_url: Option<String>, created_at: String, performed_via_github_app: Option<models::Integration>, label: models::LabeledIssueEventLabel, assignee: models::SimpleUser, assigner: models::SimpleUser, milestone: models::MilestonedIssueEventMilestone, rename: models::RenamedIssueEventRename, review_requester: models::SimpleUser, dismissed_review: models::ReviewDismissedIssueEventDismissedReview, lock_reason: Option<String>) -> IssueEventForIssue {
        IssueEventForIssue {
            id,
            node_id,
            url,
            actor: Box::new(actor),
            event,
            commit_id,
            commit_url,
            created_at,
            performed_via_github_app: if let Some(x) = performed_via_github_app {Some(Box::new(x))} else {None},
            label: Box::new(label),
            assignee: Box::new(assignee),
            assigner: Box::new(assigner),
            milestone: Box::new(milestone),
            rename: Box::new(rename),
            review_requester: Box::new(review_requester),
            requested_team: None,
            requested_reviewer: None,
            dismissed_review: Box::new(dismissed_review),
            lock_reason,
            project_card: None,
        }
    }
}

