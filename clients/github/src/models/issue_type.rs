/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// IssueType : The type of issue.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct IssueType {
    /// The unique identifier of the issue type.
    #[serde(rename = "id")]
    pub id: i32,
    /// The node identifier of the issue type.
    #[serde(rename = "node_id")]
    pub node_id: String,
    /// The name of the issue type.
    #[serde(rename = "name")]
    pub name: String,
    /// The description of the issue type.
    #[serde(rename = "description", deserialize_with = "Option::deserialize")]
    pub description: Option<String>,
    /// The color of the issue type.
    #[serde(rename = "color", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub color: Option<Option<Color>>,
    /// The time the issue type created.
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    /// The time the issue type last updated.
    #[serde(rename = "updated_at", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
    /// The enabled state of the issue type.
    #[serde(rename = "is_enabled", skip_serializing_if = "Option::is_none")]
    pub is_enabled: Option<bool>,
}

impl IssueType {
    /// The type of issue.
    pub fn new(id: i32, node_id: String, name: String, description: Option<String>) -> IssueType {
        IssueType {
            id,
            node_id,
            name,
            description,
            color: None,
            created_at: None,
            updated_at: None,
            is_enabled: None,
        }
    }
}
/// The color of the issue type.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Color {
    #[serde(rename = "gray")]
    Gray,
    #[serde(rename = "blue")]
    Blue,
    #[serde(rename = "green")]
    Green,
    #[serde(rename = "yellow")]
    Yellow,
    #[serde(rename = "orange")]
    Orange,
    #[serde(rename = "red")]
    Red,
    #[serde(rename = "pink")]
    Pink,
    #[serde(rename = "purple")]
    Purple,
}

impl Default for Color {
    fn default() -> Color {
        Self::Gray
    }
}

