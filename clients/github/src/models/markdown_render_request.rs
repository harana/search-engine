/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct MarkdownRenderRequest {
    /// The Markdown text to render in HTML.
    #[serde(rename = "text")]
    pub text: String,
    /// The rendering mode.
    #[serde(rename = "mode", skip_serializing_if = "Option::is_none")]
    pub mode: Option<Mode>,
    /// The repository context to use when creating references in `gfm` mode.  For example, setting `context` to `octo-org/octo-repo` will change the text `#42` into an HTML link to issue 42 in the `octo-org/octo-repo` repository.
    #[serde(rename = "context", skip_serializing_if = "Option::is_none")]
    pub context: Option<String>,
}

impl MarkdownRenderRequest {
    pub fn new(text: String) -> MarkdownRenderRequest {
        MarkdownRenderRequest {
            text,
            mode: None,
            context: None,
        }
    }
}
/// The rendering mode.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Mode {
    #[serde(rename = "markdown")]
    Markdown,
    #[serde(rename = "gfm")]
    Gfm,
}

impl Default for Mode {
    fn default() -> Mode {
        Self::Markdown
    }
}

