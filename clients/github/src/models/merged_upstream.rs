/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// MergedUpstream : Results of a successful merge upstream request
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct MergedUpstream {
    #[serde(rename = "message", skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(rename = "merge_type", skip_serializing_if = "Option::is_none")]
    pub merge_type: Option<MergeType>,
    #[serde(rename = "base_branch", skip_serializing_if = "Option::is_none")]
    pub base_branch: Option<String>,
}

impl MergedUpstream {
    /// Results of a successful merge upstream request
    pub fn new() -> MergedUpstream {
        MergedUpstream {
            message: None,
            merge_type: None,
            base_branch: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum MergeType {
    #[serde(rename = "merge")]
    Merge,
    #[serde(rename = "fast-forward")]
    FastForward,
    #[serde(rename = "none")]
    None,
}

impl Default for MergeType {
    fn default() -> MergeType {
        Self::Merge
    }
}

