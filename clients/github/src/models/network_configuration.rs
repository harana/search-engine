/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// NetworkConfiguration : A hosted compute network configuration.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct NetworkConfiguration {
    /// The unique identifier of the network configuration.
    #[serde(rename = "id")]
    pub id: String,
    /// The name of the network configuration.
    #[serde(rename = "name")]
    pub name: String,
    /// The hosted compute service the network configuration supports.
    #[serde(rename = "compute_service", skip_serializing_if = "Option::is_none")]
    pub compute_service: Option<ComputeService>,
    /// The unique identifier of each network settings in the configuration.
    #[serde(rename = "network_settings_ids", skip_serializing_if = "Option::is_none")]
    pub network_settings_ids: Option<Vec<String>>,
    /// The time at which the network configuration was created, in ISO 8601 format.
    #[serde(rename = "created_on", deserialize_with = "Option::deserialize")]
    pub created_on: Option<String>,
}

impl NetworkConfiguration {
    /// A hosted compute network configuration.
    pub fn new(id: String, name: String, created_on: Option<String>) -> NetworkConfiguration {
        NetworkConfiguration {
            id,
            name,
            compute_service: None,
            network_settings_ids: None,
            created_on,
        }
    }
}
/// The hosted compute service the network configuration supports.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ComputeService {
    #[serde(rename = "none")]
    None,
    #[serde(rename = "actions")]
    Actions,
    #[serde(rename = "codespaces")]
    Codespaces,
}

impl Default for ComputeService {
    fn default() -> ComputeService {
        Self::None
    }
}

