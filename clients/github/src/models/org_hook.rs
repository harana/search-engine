/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// OrgHook : Org Hook
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct OrgHook {
    #[serde(rename = "id")]
    pub id: i32,
    #[serde(rename = "url")]
    pub url: String,
    #[serde(rename = "ping_url")]
    pub ping_url: String,
    #[serde(rename = "deliveries_url", skip_serializing_if = "Option::is_none")]
    pub deliveries_url: Option<String>,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "events")]
    pub events: Vec<String>,
    #[serde(rename = "active")]
    pub active: bool,
    #[serde(rename = "config")]
    pub config: Box<models::OrgHookConfig>,
    #[serde(rename = "updated_at")]
    pub updated_at: String,
    #[serde(rename = "created_at")]
    pub created_at: String,
    #[serde(rename = "type")]
    pub r#type: String,
}

impl OrgHook {
    /// Org Hook
    pub fn new(id: i32, url: String, ping_url: String, name: String, events: Vec<String>, active: bool, config: models::OrgHookConfig, updated_at: String, created_at: String, r#type: String) -> OrgHook {
        OrgHook {
            id,
            url,
            ping_url,
            deliveries_url: None,
            name,
            events,
            active,
            config: Box::new(config),
            updated_at,
            created_at,
            r#type,
        }
    }
}

