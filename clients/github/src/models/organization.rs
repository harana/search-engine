/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Organization {
    #[serde(rename = "avatar_url")]
    pub avatar_url: String,
    #[serde(rename = "description", deserialize_with = "Option::deserialize")]
    pub description: Option<String>,
    #[serde(rename = "events_url")]
    pub events_url: String,
    #[serde(rename = "hooks_url")]
    pub hooks_url: String,
    #[serde(rename = "html_url", skip_serializing_if = "Option::is_none")]
    pub html_url: Option<String>,
    #[serde(rename = "id")]
    pub id: i32,
    #[serde(rename = "issues_url")]
    pub issues_url: String,
    #[serde(rename = "login")]
    pub login: String,
    #[serde(rename = "members_url")]
    pub members_url: String,
    #[serde(rename = "node_id")]
    pub node_id: String,
    #[serde(rename = "public_members_url")]
    pub public_members_url: String,
    #[serde(rename = "repos_url")]
    pub repos_url: String,
    #[serde(rename = "url")]
    pub url: String,
}

impl Organization {
    pub fn new(avatar_url: String, description: Option<String>, events_url: String, hooks_url: String, id: i32, issues_url: String, login: String, members_url: String, node_id: String, public_members_url: String, repos_url: String, url: String) -> Organization {
        Organization {
            avatar_url,
            description,
            events_url,
            hooks_url,
            html_url: None,
            id,
            issues_url,
            login,
            members_url,
            node_id,
            public_members_url,
            repos_url,
            url,
        }
    }
}

