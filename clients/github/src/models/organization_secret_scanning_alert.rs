/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct OrganizationSecretScanningAlert {
    /// The security alert number.
    #[serde(rename = "number", skip_serializing_if = "Option::is_none")]
    pub number: Option<i32>,
    /// The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    /// The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
    #[serde(rename = "updated_at", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<Option<String>>,
    /// The REST API URL of the alert resource.
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    /// The GitHub URL of the alert resource.
    #[serde(rename = "html_url", skip_serializing_if = "Option::is_none")]
    pub html_url: Option<String>,
    /// The REST API URL of the code locations for this alert.
    #[serde(rename = "locations_url", skip_serializing_if = "Option::is_none")]
    pub locations_url: Option<String>,
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<models::SecretScanningAlertState>,
    #[serde(rename = "resolution", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub resolution: Option<Option<models::SecretScanningAlertResolution>>,
    /// The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
    #[serde(rename = "resolved_at", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub resolved_at: Option<Option<String>>,
    #[serde(rename = "resolved_by", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub resolved_by: Option<Option<Box<models::NullableSimpleUser>>>,
    /// The type of secret that secret scanning detected.
    #[serde(rename = "secret_type", skip_serializing_if = "Option::is_none")]
    pub secret_type: Option<String>,
    /// User-friendly name for the detected secret, matching the `secret_type`. For a list of built-in patterns, see \"[Supported secret scanning patterns](https://docs.github.com/code-security/secret-scanning/introduction/supported-secret-scanning-patterns#supported-secrets).\"
    #[serde(rename = "secret_type_display_name", skip_serializing_if = "Option::is_none")]
    pub secret_type_display_name: Option<String>,
    /// The secret that was detected.
    #[serde(rename = "secret", skip_serializing_if = "Option::is_none")]
    pub secret: Option<String>,
    #[serde(rename = "repository", skip_serializing_if = "Option::is_none")]
    pub repository: Option<Box<models::SimpleRepository>>,
    /// Whether push protection was bypassed for the detected secret.
    #[serde(rename = "push_protection_bypassed", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub push_protection_bypassed: Option<Option<bool>>,
    #[serde(rename = "push_protection_bypassed_by", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub push_protection_bypassed_by: Option<Option<Box<models::NullableSimpleUser>>>,
    /// The time that push protection was bypassed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
    #[serde(rename = "push_protection_bypassed_at", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub push_protection_bypassed_at: Option<Option<String>>,
    #[serde(rename = "push_protection_bypass_request_reviewer", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub push_protection_bypass_request_reviewer: Option<Option<Box<models::NullableSimpleUser>>>,
    /// An optional comment when reviewing a push protection bypass.
    #[serde(rename = "push_protection_bypass_request_reviewer_comment", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub push_protection_bypass_request_reviewer_comment: Option<Option<String>>,
    /// An optional comment when requesting a push protection bypass.
    #[serde(rename = "push_protection_bypass_request_comment", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub push_protection_bypass_request_comment: Option<Option<String>>,
    /// The URL to a push protection bypass request.
    #[serde(rename = "push_protection_bypass_request_html_url", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub push_protection_bypass_request_html_url: Option<Option<String>>,
    /// The comment that was optionally added when this alert was closed
    #[serde(rename = "resolution_comment", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub resolution_comment: Option<Option<String>>,
    /// The token status as of the latest validity check.
    #[serde(rename = "validity", skip_serializing_if = "Option::is_none")]
    pub validity: Option<Validity>,
    /// Whether the secret was publicly leaked.
    #[serde(rename = "publicly_leaked", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub publicly_leaked: Option<Option<bool>>,
    /// Whether the detected secret was found in multiple repositories in the same organization or enterprise.
    #[serde(rename = "multi_repo", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub multi_repo: Option<Option<bool>>,
    /// A boolean value representing whether or not alert is base64 encoded
    #[serde(rename = "is_base64_encoded", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub is_base64_encoded: Option<Option<bool>>,
}

impl OrganizationSecretScanningAlert {
    pub fn new() -> OrganizationSecretScanningAlert {
        OrganizationSecretScanningAlert {
            number: None,
            created_at: None,
            updated_at: None,
            url: None,
            html_url: None,
            locations_url: None,
            state: None,
            resolution: None,
            resolved_at: None,
            resolved_by: None,
            secret_type: None,
            secret_type_display_name: None,
            secret: None,
            repository: None,
            push_protection_bypassed: None,
            push_protection_bypassed_by: None,
            push_protection_bypassed_at: None,
            push_protection_bypass_request_reviewer: None,
            push_protection_bypass_request_reviewer_comment: None,
            push_protection_bypass_request_comment: None,
            push_protection_bypass_request_html_url: None,
            resolution_comment: None,
            validity: None,
            publicly_leaked: None,
            multi_repo: None,
            is_base64_encoded: None,
        }
    }
}
/// The token status as of the latest validity check.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Validity {
    #[serde(rename = "active")]
    Active,
    #[serde(rename = "inactive")]
    Inactive,
    #[serde(rename = "unknown")]
    Unknown,
}

impl Default for Validity {
    fn default() -> Validity {
        Self::Active
    }
}

