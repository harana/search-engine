/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct OrganizationUpdateIssueType {
    /// Name of the issue type.
    #[serde(rename = "name")]
    pub name: String,
    /// Whether or not the issue type is enabled at the organization level.
    #[serde(rename = "is_enabled")]
    pub is_enabled: bool,
    /// Whether or not the issue type is restricted to issues in private repositories.
    #[serde(rename = "is_private", skip_serializing_if = "Option::is_none")]
    pub is_private: Option<bool>,
    /// Description of the issue type.
    #[serde(rename = "description", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub description: Option<Option<String>>,
    /// Color for the issue type.
    #[serde(rename = "color", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub color: Option<Option<Color>>,
}

impl OrganizationUpdateIssueType {
    pub fn new(name: String, is_enabled: bool) -> OrganizationUpdateIssueType {
        OrganizationUpdateIssueType {
            name,
            is_enabled,
            is_private: None,
            description: None,
            color: None,
        }
    }
}
/// Color for the issue type.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Color {
    #[serde(rename = "gray")]
    Gray,
    #[serde(rename = "blue")]
    Blue,
    #[serde(rename = "green")]
    Green,
    #[serde(rename = "yellow")]
    Yellow,
    #[serde(rename = "orange")]
    Orange,
    #[serde(rename = "red")]
    Red,
    #[serde(rename = "pink")]
    Pink,
    #[serde(rename = "purple")]
    Purple,
}

impl Default for Color {
    fn default() -> Color {
        Self::Gray
    }
}

