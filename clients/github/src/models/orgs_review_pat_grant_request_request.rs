/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct OrgsReviewPatGrantRequestRequest {
    /// Action to apply to the request.
    #[serde(rename = "action")]
    pub action: Action,
    /// Reason for approving or denying the request. Max 1024 characters.
    #[serde(rename = "reason", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub reason: Option<Option<String>>,
}

impl OrgsReviewPatGrantRequestRequest {
    pub fn new(action: Action) -> OrgsReviewPatGrantRequestRequest {
        OrgsReviewPatGrantRequestRequest {
            action,
            reason: None,
        }
    }
}
/// Action to apply to the request.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Action {
    #[serde(rename = "approve")]
    Approve,
    #[serde(rename = "deny")]
    Deny,
}

impl Default for Action {
    fn default() -> Action {
        Self::Approve
    }
}

