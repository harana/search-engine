/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// PersonalAccessTokenRequest : Details of a Personal Access Token Request.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PersonalAccessTokenRequest {
    /// Unique identifier of the request for access via fine-grained personal access token. Used as the `pat_request_id` parameter in the list and review API calls.
    #[serde(rename = "id")]
    pub id: i32,
    #[serde(rename = "owner")]
    pub owner: Box<models::SimpleUser>,
    #[serde(rename = "permissions_added")]
    pub permissions_added: Box<models::PersonalAccessTokenRequestPermissionsAdded>,
    #[serde(rename = "permissions_upgraded")]
    pub permissions_upgraded: Box<models::PersonalAccessTokenRequestPermissionsUpgraded>,
    #[serde(rename = "permissions_result")]
    pub permissions_result: Box<models::PersonalAccessTokenRequestPermissionsResult>,
    /// Type of repository selection requested.
    #[serde(rename = "repository_selection")]
    pub repository_selection: RepositorySelection,
    /// The number of repositories the token is requesting access to. This field is only populated when `repository_selection` is `subset`.
    #[serde(rename = "repository_count", deserialize_with = "Option::deserialize")]
    pub repository_count: Option<i32>,
    /// An array of repository objects the token is requesting access to. This field is only populated when `repository_selection` is `subset`.
    #[serde(rename = "repositories", deserialize_with = "Option::deserialize")]
    pub repositories: Option<Vec<models::WebhooksRepositoriesInner>>,
    /// Date and time when the request for access was created.
    #[serde(rename = "created_at")]
    pub created_at: String,
    /// Unique identifier of the user's token. This field can also be found in audit log events and the organization's settings for their PAT grants.
    #[serde(rename = "token_id")]
    pub token_id: i32,
    /// The name given to the user's token. This field can also be found in an organization's settings page for Active Tokens.
    #[serde(rename = "token_name")]
    pub token_name: String,
    /// Whether the associated fine-grained personal access token has expired.
    #[serde(rename = "token_expired")]
    pub token_expired: bool,
    /// Date and time when the associated fine-grained personal access token expires.
    #[serde(rename = "token_expires_at", deserialize_with = "Option::deserialize")]
    pub token_expires_at: Option<String>,
    /// Date and time when the associated fine-grained personal access token was last used for authentication.
    #[serde(rename = "token_last_used_at", deserialize_with = "Option::deserialize")]
    pub token_last_used_at: Option<String>,
}

impl PersonalAccessTokenRequest {
    /// Details of a Personal Access Token Request.
    pub fn new(id: i32, owner: models::SimpleUser, permissions_added: models::PersonalAccessTokenRequestPermissionsAdded, permissions_upgraded: models::PersonalAccessTokenRequestPermissionsUpgraded, permissions_result: models::PersonalAccessTokenRequestPermissionsResult, repository_selection: RepositorySelection, repository_count: Option<i32>, repositories: Option<Vec<models::WebhooksRepositoriesInner>>, created_at: String, token_id: i32, token_name: String, token_expired: bool, token_expires_at: Option<String>, token_last_used_at: Option<String>) -> PersonalAccessTokenRequest {
        PersonalAccessTokenRequest {
            id,
            owner: Box::new(owner),
            permissions_added: Box::new(permissions_added),
            permissions_upgraded: Box::new(permissions_upgraded),
            permissions_result: Box::new(permissions_result),
            repository_selection,
            repository_count,
            repositories,
            created_at,
            token_id,
            token_name,
            token_expired,
            token_expires_at,
            token_last_used_at,
        }
    }
}
/// Type of repository selection requested.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RepositorySelection {
    #[serde(rename = "none")]
    None,
    #[serde(rename = "all")]
    All,
    #[serde(rename = "subset")]
    Subset,
}

impl Default for RepositorySelection {
    fn default() -> RepositorySelection {
        Self::None
    }
}

