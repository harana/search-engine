/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReposCreateOrUpdateFileContentsRequest {
    /// The commit message.
    #[serde(rename = "message")]
    pub message: String,
    /// The new file content, using Base64 encoding.
    #[serde(rename = "content")]
    pub content: String,
    /// **Required if you are updating a file**. The blob SHA of the file being replaced.
    #[serde(rename = "sha", skip_serializing_if = "Option::is_none")]
    pub sha: Option<String>,
    /// The branch name. Default: the repositoryâ€™s default branch.
    #[serde(rename = "branch", skip_serializing_if = "Option::is_none")]
    pub branch: Option<String>,
    #[serde(rename = "committer", skip_serializing_if = "Option::is_none")]
    pub committer: Option<Box<models::ReposCreateOrUpdateFileContentsRequestCommitter>>,
    #[serde(rename = "author", skip_serializing_if = "Option::is_none")]
    pub author: Option<Box<models::ReposCreateOrUpdateFileContentsRequestAuthor>>,
}

impl ReposCreateOrUpdateFileContentsRequest {
    pub fn new(message: String, content: String) -> ReposCreateOrUpdateFileContentsRequest {
        ReposCreateOrUpdateFileContentsRequest {
            message,
            content,
            sha: None,
            branch: None,
            committer: None,
            author: None,
        }
    }
}

