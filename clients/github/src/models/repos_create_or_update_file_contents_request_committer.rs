/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ReposCreateOrUpdateFileContentsRequestCommitter : The person that committed the file. Default: the authenticated user.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReposCreateOrUpdateFileContentsRequestCommitter {
    /// The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted.
    #[serde(rename = "name")]
    pub name: String,
    /// The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted.
    #[serde(rename = "email")]
    pub email: String,
    #[serde(rename = "date", skip_serializing_if = "Option::is_none")]
    pub date: Option<String>,
}

impl ReposCreateOrUpdateFileContentsRequestCommitter {
    /// The person that committed the file. Default: the authenticated user.
    pub fn new(name: String, email: String) -> ReposCreateOrUpdateFileContentsRequestCommitter {
        ReposCreateOrUpdateFileContentsRequestCommitter {
            name,
            email,
            date: None,
        }
    }
}

