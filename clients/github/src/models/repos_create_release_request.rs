/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReposCreateReleaseRequest {
    /// The name of the tag.
    #[serde(rename = "tag_name")]
    pub tag_name: String,
    /// Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch.
    #[serde(rename = "target_commitish", skip_serializing_if = "Option::is_none")]
    pub target_commitish: Option<String>,
    /// The name of the release.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Text describing the contents of the tag.
    #[serde(rename = "body", skip_serializing_if = "Option::is_none")]
    pub body: Option<String>,
    /// `true` to create a draft (unpublished) release, `false` to create a published one.
    #[serde(rename = "draft", skip_serializing_if = "Option::is_none")]
    pub draft: Option<bool>,
    /// `true` to identify the release as a prerelease. `false` to identify the release as a full release.
    #[serde(rename = "prerelease", skip_serializing_if = "Option::is_none")]
    pub prerelease: Option<bool>,
    /// If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. For more information, see \"[Managing categories for discussions in your repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository).\"
    #[serde(rename = "discussion_category_name", skip_serializing_if = "Option::is_none")]
    pub discussion_category_name: Option<String>,
    /// Whether to automatically generate the name and body for this release. If `name` is specified, the specified name will be used; otherwise, a name will be automatically generated. If `body` is specified, the body will be pre-pended to the automatically generated notes.
    #[serde(rename = "generate_release_notes", skip_serializing_if = "Option::is_none")]
    pub generate_release_notes: Option<bool>,
    /// Specifies whether this release should be set as the latest release for the repository. Drafts and prereleases cannot be set as latest. Defaults to `true` for newly published releases. `legacy` specifies that the latest release should be determined based on the release creation date and higher semantic version.
    #[serde(rename = "make_latest", skip_serializing_if = "Option::is_none")]
    pub make_latest: Option<MakeLatest>,
}

impl ReposCreateReleaseRequest {
    pub fn new(tag_name: String) -> ReposCreateReleaseRequest {
        ReposCreateReleaseRequest {
            tag_name,
            target_commitish: None,
            name: None,
            body: None,
            draft: None,
            prerelease: None,
            discussion_category_name: None,
            generate_release_notes: None,
            make_latest: None,
        }
    }
}
/// Specifies whether this release should be set as the latest release for the repository. Drafts and prereleases cannot be set as latest. Defaults to `true` for newly published releases. `legacy` specifies that the latest release should be determined based on the release creation date and higher semantic version.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum MakeLatest {
    #[serde(rename = "true")]
    True,
    #[serde(rename = "false")]
    False,
    #[serde(rename = "legacy")]
    Legacy,
}

impl Default for MakeLatest {
    fn default() -> MakeLatest {
        Self::True
    }
}

