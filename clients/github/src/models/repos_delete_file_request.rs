/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReposDeleteFileRequest {
    /// The commit message.
    #[serde(rename = "message")]
    pub message: String,
    /// The blob SHA of the file being deleted.
    #[serde(rename = "sha")]
    pub sha: String,
    /// The branch name. Default: the repositoryâ€™s default branch
    #[serde(rename = "branch", skip_serializing_if = "Option::is_none")]
    pub branch: Option<String>,
    #[serde(rename = "committer", skip_serializing_if = "Option::is_none")]
    pub committer: Option<Box<models::ReposDeleteFileRequestCommitter>>,
    #[serde(rename = "author", skip_serializing_if = "Option::is_none")]
    pub author: Option<Box<models::ReposDeleteFileRequestAuthor>>,
}

impl ReposDeleteFileRequest {
    pub fn new(message: String, sha: String) -> ReposDeleteFileRequest {
        ReposDeleteFileRequest {
            message,
            sha,
            branch: None,
            committer: None,
            author: None,
        }
    }
}

