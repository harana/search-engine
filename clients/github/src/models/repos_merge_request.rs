/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReposMergeRequest {
    /// The name of the base branch that the head will be merged into.
    #[serde(rename = "base")]
    pub base: String,
    /// The head to merge. This can be a branch name or a commit SHA1.
    #[serde(rename = "head")]
    pub head: String,
    /// Commit message to use for the merge commit. If omitted, a default message will be used.
    #[serde(rename = "commit_message", skip_serializing_if = "Option::is_none")]
    pub commit_message: Option<String>,
}

impl ReposMergeRequest {
    pub fn new(base: String, head: String) -> ReposMergeRequest {
        ReposMergeRequest {
            base,
            head,
            commit_message: None,
        }
    }
}

