/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReposUpdateInvitationRequest {
    /// The permissions that the associated user will have on the repository. Valid values are `read`, `write`, `maintain`, `triage`, and `admin`.
    #[serde(rename = "permissions", skip_serializing_if = "Option::is_none")]
    pub permissions: Option<Permissions>,
}

impl ReposUpdateInvitationRequest {
    pub fn new() -> ReposUpdateInvitationRequest {
        ReposUpdateInvitationRequest {
            permissions: None,
        }
    }
}
/// The permissions that the associated user will have on the repository. Valid values are `read`, `write`, `maintain`, `triage`, and `admin`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Permissions {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
    #[serde(rename = "maintain")]
    Maintain,
    #[serde(rename = "triage")]
    Triage,
    #[serde(rename = "admin")]
    Admin,
}

impl Default for Permissions {
    fn default() -> Permissions {
        Self::Read
    }
}

