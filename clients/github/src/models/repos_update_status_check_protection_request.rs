/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReposUpdateStatusCheckProtectionRequest {
    /// Require branches to be up to date before merging.
    #[serde(rename = "strict", skip_serializing_if = "Option::is_none")]
    pub strict: Option<bool>,
    /// **Closing down notice**: The list of status checks to require in order to merge into this branch. If any of these checks have recently been set by a particular GitHub App, they will be required to come from that app in future for the branch to merge. Use `checks` instead of `contexts` for more fine-grained control.
    #[serde(rename = "contexts", skip_serializing_if = "Option::is_none")]
    pub contexts: Option<Vec<String>>,
    /// The list of status checks to require in order to merge into this branch.
    #[serde(rename = "checks", skip_serializing_if = "Option::is_none")]
    pub checks: Option<Vec<models::ReposUpdateBranchProtectionRequestRequiredStatusChecksChecksInner>>,
}

impl ReposUpdateStatusCheckProtectionRequest {
    pub fn new() -> ReposUpdateStatusCheckProtectionRequest {
        ReposUpdateStatusCheckProtectionRequest {
            strict: None,
            contexts: None,
            checks: None,
        }
    }
}

