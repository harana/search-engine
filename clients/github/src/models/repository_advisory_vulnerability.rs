/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// RepositoryAdvisoryVulnerability : A product affected by the vulnerability detailed in a repository security advisory.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RepositoryAdvisoryVulnerability {
    #[serde(rename = "package", deserialize_with = "Option::deserialize")]
    pub package: Option<Box<models::VulnerabilityPackage>>,
    /// The range of the package versions affected by the vulnerability.
    #[serde(rename = "vulnerable_version_range", deserialize_with = "Option::deserialize")]
    pub vulnerable_version_range: Option<String>,
    /// The package version(s) that resolve the vulnerability.
    #[serde(rename = "patched_versions", deserialize_with = "Option::deserialize")]
    pub patched_versions: Option<String>,
    /// The functions in the package that are affected.
    #[serde(rename = "vulnerable_functions", deserialize_with = "Option::deserialize")]
    pub vulnerable_functions: Option<Vec<String>>,
}

impl RepositoryAdvisoryVulnerability {
    /// A product affected by the vulnerability detailed in a repository security advisory.
    pub fn new(package: Option<models::VulnerabilityPackage>, vulnerable_version_range: Option<String>, patched_versions: Option<String>, vulnerable_functions: Option<Vec<String>>) -> RepositoryAdvisoryVulnerability {
        RepositoryAdvisoryVulnerability {
            package: if let Some(x) = package {Some(Box::new(x))} else {None},
            vulnerable_version_range,
            patched_versions,
            vulnerable_functions,
        }
    }
}

