/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// RepositoryRuleParamsRequiredReviewerConfiguration : A reviewing team, and file patterns describing which files they must approve changes to.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RepositoryRuleParamsRequiredReviewerConfiguration {
    /// Array of file patterns. Pull requests which change matching files must be approved by the specified team. File patterns use the same syntax as `.gitignore` files.
    #[serde(rename = "file_patterns")]
    pub file_patterns: Vec<String>,
    /// Minimum number of approvals required from the specified team. If set to zero, the team will be added to the pull request but approval is optional.
    #[serde(rename = "minimum_approvals")]
    pub minimum_approvals: i32,
    #[serde(rename = "reviewer", skip_serializing_if = "Option::is_none")]
    pub reviewer: Option<Box<models::RepositoryRuleParamsReviewer>>,
}

impl RepositoryRuleParamsRequiredReviewerConfiguration {
    /// A reviewing team, and file patterns describing which files they must approve changes to.
    pub fn new(file_patterns: Vec<String>, minimum_approvals: i32) -> RepositoryRuleParamsRequiredReviewerConfiguration {
        RepositoryRuleParamsRequiredReviewerConfiguration {
            file_patterns,
            minimum_approvals,
            reviewer: None,
        }
    }
}

