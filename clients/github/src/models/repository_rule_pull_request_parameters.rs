/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RepositoryRulePullRequestParameters {
    /// Array of allowed merge methods. Allowed values include `merge`, `squash`, and `rebase`. At least one option must be enabled.
    #[serde(rename = "allowed_merge_methods", skip_serializing_if = "Option::is_none")]
    pub allowed_merge_methods: Option<Vec<AllowedMergeMethods>>,
    /// New, reviewable commits pushed will dismiss previous pull request review approvals.
    #[serde(rename = "dismiss_stale_reviews_on_push")]
    pub dismiss_stale_reviews_on_push: bool,
    /// Require an approving review in pull requests that modify files that have a designated code owner.
    #[serde(rename = "require_code_owner_review")]
    pub require_code_owner_review: bool,
    /// Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
    #[serde(rename = "require_last_push_approval")]
    pub require_last_push_approval: bool,
    /// The number of approving reviews that are required before a pull request can be merged.
    #[serde(rename = "required_approving_review_count")]
    pub required_approving_review_count: i32,
    /// All conversations on code must be resolved before a pull request can be merged.
    #[serde(rename = "required_review_thread_resolution")]
    pub required_review_thread_resolution: bool,
}

impl RepositoryRulePullRequestParameters {
    pub fn new(dismiss_stale_reviews_on_push: bool, require_code_owner_review: bool, require_last_push_approval: bool, required_approving_review_count: i32, required_review_thread_resolution: bool) -> RepositoryRulePullRequestParameters {
        RepositoryRulePullRequestParameters {
            allowed_merge_methods: None,
            dismiss_stale_reviews_on_push,
            require_code_owner_review,
            require_last_push_approval,
            required_approving_review_count,
            required_review_thread_resolution,
        }
    }
}
/// Array of allowed merge methods. Allowed values include `merge`, `squash`, and `rebase`. At least one option must be enabled.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AllowedMergeMethods {
    #[serde(rename = "merge")]
    Merge,
    #[serde(rename = "squash")]
    Squash,
    #[serde(rename = "rebase")]
    Rebase,
}

impl Default for AllowedMergeMethods {
    fn default() -> AllowedMergeMethods {
        Self::Merge
    }
}

