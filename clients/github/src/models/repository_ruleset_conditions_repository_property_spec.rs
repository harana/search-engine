/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// RepositoryRulesetConditionsRepositoryPropertySpec : Parameters for a targeting a repository property
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RepositoryRulesetConditionsRepositoryPropertySpec {
    /// The name of the repository property to target
    #[serde(rename = "name")]
    pub name: String,
    /// The values to match for the repository property
    #[serde(rename = "property_values")]
    pub property_values: Vec<String>,
    /// The source of the repository property. Defaults to 'custom' if not specified.
    #[serde(rename = "source", skip_serializing_if = "Option::is_none")]
    pub source: Option<Source>,
}

impl RepositoryRulesetConditionsRepositoryPropertySpec {
    /// Parameters for a targeting a repository property
    pub fn new(name: String, property_values: Vec<String>) -> RepositoryRulesetConditionsRepositoryPropertySpec {
        RepositoryRulesetConditionsRepositoryPropertySpec {
            name,
            property_values,
            source: None,
        }
    }
}
/// The source of the repository property. Defaults to 'custom' if not specified.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Source {
    #[serde(rename = "custom")]
    Custom,
    #[serde(rename = "system")]
    System,
}

impl Default for Source {
    fn default() -> Source {
        Self::Custom
    }
}

