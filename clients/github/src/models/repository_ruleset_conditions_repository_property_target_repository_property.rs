/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RepositoryRulesetConditionsRepositoryPropertyTargetRepositoryProperty {
    /// The repository properties and values to include. All of these properties must match for the condition to pass.
    #[serde(rename = "include", skip_serializing_if = "Option::is_none")]
    pub include: Option<Vec<models::RepositoryRulesetConditionsRepositoryPropertySpec>>,
    /// The repository properties and values to exclude. The condition will not pass if any of these properties match.
    #[serde(rename = "exclude", skip_serializing_if = "Option::is_none")]
    pub exclude: Option<Vec<models::RepositoryRulesetConditionsRepositoryPropertySpec>>,
}

impl RepositoryRulesetConditionsRepositoryPropertyTargetRepositoryProperty {
    pub fn new() -> RepositoryRulesetConditionsRepositoryPropertyTargetRepositoryProperty {
        RepositoryRulesetConditionsRepositoryPropertyTargetRepositoryProperty {
            include: None,
            exclude: None,
        }
    }
}

