/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// RepositorySubscription : Repository invitations let you manage who you collaborate with.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RepositorySubscription {
    /// Determines if notifications should be received from this repository.
    #[serde(rename = "subscribed")]
    pub subscribed: bool,
    /// Determines if all notifications should be blocked from this repository.
    #[serde(rename = "ignored")]
    pub ignored: bool,
    #[serde(rename = "reason", deserialize_with = "Option::deserialize")]
    pub reason: Option<String>,
    #[serde(rename = "created_at")]
    pub created_at: String,
    #[serde(rename = "url")]
    pub url: String,
    #[serde(rename = "repository_url")]
    pub repository_url: String,
}

impl RepositorySubscription {
    /// Repository invitations let you manage who you collaborate with.
    pub fn new(subscribed: bool, ignored: bool, reason: Option<String>, created_at: String, url: String, repository_url: String) -> RepositorySubscription {
        RepositorySubscription {
            subscribed,
            ignored,
            reason,
            created_at,
            url,
            repository_url,
        }
    }
}

