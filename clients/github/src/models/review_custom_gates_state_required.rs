/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReviewCustomGatesStateRequired {
    /// The name of the environment to approve or reject.
    #[serde(rename = "environment_name")]
    pub environment_name: String,
    /// Whether to approve or reject deployment to the specified environments.
    #[serde(rename = "state")]
    pub state: State,
    /// Optional comment to include with the review.
    #[serde(rename = "comment", skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
}

impl ReviewCustomGatesStateRequired {
    pub fn new(environment_name: String, state: State) -> ReviewCustomGatesStateRequired {
        ReviewCustomGatesStateRequired {
            environment_name,
            state,
            comment: None,
        }
    }
}
/// Whether to approve or reject deployment to the specified environments.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum State {
    #[serde(rename = "approved")]
    Approved,
    #[serde(rename = "rejected")]
    Rejected,
}

impl Default for State {
    fn default() -> State {
        Self::Approved
    }
}

