/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RuleSuiteRuleEvaluationsInner {
    #[serde(rename = "rule_source", skip_serializing_if = "Option::is_none")]
    pub rule_source: Option<Box<models::RuleSuiteRuleEvaluationsInnerRuleSource>>,
    /// The enforcement level of this rule source.
    #[serde(rename = "enforcement", skip_serializing_if = "Option::is_none")]
    pub enforcement: Option<Enforcement>,
    /// The result of the evaluation of the individual rule.
    #[serde(rename = "result", skip_serializing_if = "Option::is_none")]
    pub result: Option<Result>,
    /// The type of rule.
    #[serde(rename = "rule_type", skip_serializing_if = "Option::is_none")]
    pub rule_type: Option<String>,
    /// The detailed failure message for the rule. Null if the rule passed.
    #[serde(rename = "details", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub details: Option<Option<String>>,
}

impl RuleSuiteRuleEvaluationsInner {
    pub fn new() -> RuleSuiteRuleEvaluationsInner {
        RuleSuiteRuleEvaluationsInner {
            rule_source: None,
            enforcement: None,
            result: None,
            rule_type: None,
            details: None,
        }
    }
}
/// The enforcement level of this rule source.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Enforcement {
    #[serde(rename = "active")]
    Active,
    #[serde(rename = "evaluate")]
    Evaluate,
    #[serde(rename = "deleted ruleset")]
    DeletedRuleset,
}

impl Default for Enforcement {
    fn default() -> Enforcement {
        Self::Active
    }
}
/// The result of the evaluation of the individual rule.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Result {
    #[serde(rename = "pass")]
    Pass,
    #[serde(rename = "fail")]
    Fail,
}

impl Default for Result {
    fn default() -> Result {
        Self::Pass
    }
}

