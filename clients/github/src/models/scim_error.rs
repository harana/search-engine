/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ScimError : Scim Error
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ScimError {
    #[serde(rename = "message", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub message: Option<Option<String>>,
    #[serde(rename = "documentation_url", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub documentation_url: Option<Option<String>>,
    #[serde(rename = "detail", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub detail: Option<Option<String>>,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<i32>,
    #[serde(rename = "scimType", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub scim_type: Option<Option<String>>,
    #[serde(rename = "schemas", skip_serializing_if = "Option::is_none")]
    pub schemas: Option<Vec<String>>,
}

impl ScimError {
    /// Scim Error
    pub fn new() -> ScimError {
        ScimError {
            message: None,
            documentation_url: None,
            detail: None,
            status: None,
            scim_type: None,
            schemas: None,
        }
    }
}

