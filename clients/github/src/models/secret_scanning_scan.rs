/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// SecretScanningScan : Information on a single scan performed by secret scanning on the repository
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SecretScanningScan {
    /// The type of scan
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<String>,
    /// The state of the scan. Either \"completed\", \"running\", or \"pending\"
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    /// The time that the scan was completed. Empty if the scan is running
    #[serde(rename = "completed_at", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub completed_at: Option<Option<String>>,
    /// The time that the scan was started. Empty if the scan is pending
    #[serde(rename = "started_at", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub started_at: Option<Option<String>>,
}

impl SecretScanningScan {
    /// Information on a single scan performed by secret scanning on the repository
    pub fn new() -> SecretScanningScan {
        SecretScanningScan {
            r#type: None,
            status: None,
            completed_at: None,
            started_at: None,
        }
    }
}

