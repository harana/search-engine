/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// Team1 : Groups of organization members that gives permissions on specified repositories.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Team1 {
    #[serde(rename = "deleted", skip_serializing_if = "Option::is_none")]
    pub deleted: Option<bool>,
    /// Description of the team
    #[serde(rename = "description", deserialize_with = "Option::deserialize")]
    pub description: Option<String>,
    #[serde(rename = "html_url")]
    pub html_url: String,
    /// Unique identifier of the team
    #[serde(rename = "id")]
    pub id: i32,
    #[serde(rename = "members_url")]
    pub members_url: String,
    /// Name of the team
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "node_id")]
    pub node_id: String,
    #[serde(rename = "parent", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub parent: Option<Option<Box<models::TeamParent>>>,
    /// Permission that the team will have for its repositories
    #[serde(rename = "permission")]
    pub permission: String,
    #[serde(rename = "privacy")]
    pub privacy: Privacy,
    #[serde(rename = "repositories_url")]
    pub repositories_url: String,
    #[serde(rename = "slug")]
    pub slug: String,
    /// URL for the team
    #[serde(rename = "url")]
    pub url: String,
}

impl Team1 {
    /// Groups of organization members that gives permissions on specified repositories.
    pub fn new(description: Option<String>, html_url: String, id: i32, members_url: String, name: String, node_id: String, permission: String, privacy: Privacy, repositories_url: String, slug: String, url: String) -> Team1 {
        Team1 {
            deleted: None,
            description,
            html_url,
            id,
            members_url,
            name,
            node_id,
            parent: None,
            permission,
            privacy,
            repositories_url,
            slug,
            url,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Privacy {
    #[serde(rename = "open")]
    Open,
    #[serde(rename = "closed")]
    Closed,
    #[serde(rename = "secret")]
    Secret,
}

impl Default for Privacy {
    fn default() -> Privacy {
        Self::Open
    }
}

