/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// TeamDiscussion : A team discussion is a persistent record of a free-form conversation within a team.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TeamDiscussion {
    #[serde(rename = "author", deserialize_with = "Option::deserialize")]
    pub author: Option<Box<models::NullableSimpleUser>>,
    /// The main text of the discussion.
    #[serde(rename = "body")]
    pub body: String,
    #[serde(rename = "body_html")]
    pub body_html: String,
    /// The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
    #[serde(rename = "body_version")]
    pub body_version: String,
    #[serde(rename = "comments_count")]
    pub comments_count: i32,
    #[serde(rename = "comments_url")]
    pub comments_url: String,
    #[serde(rename = "created_at")]
    pub created_at: String,
    #[serde(rename = "last_edited_at", deserialize_with = "Option::deserialize")]
    pub last_edited_at: Option<String>,
    #[serde(rename = "html_url")]
    pub html_url: String,
    #[serde(rename = "node_id")]
    pub node_id: String,
    /// The unique sequence number of a team discussion.
    #[serde(rename = "number")]
    pub number: i32,
    /// Whether or not this discussion should be pinned for easy retrieval.
    #[serde(rename = "pinned")]
    pub pinned: bool,
    /// Whether or not this discussion should be restricted to team members and organization owners.
    #[serde(rename = "private")]
    pub private: bool,
    #[serde(rename = "team_url")]
    pub team_url: String,
    /// The title of the discussion.
    #[serde(rename = "title")]
    pub title: String,
    #[serde(rename = "updated_at")]
    pub updated_at: String,
    #[serde(rename = "url")]
    pub url: String,
    #[serde(rename = "reactions", skip_serializing_if = "Option::is_none")]
    pub reactions: Option<Box<models::ReactionRollup>>,
}

impl TeamDiscussion {
    /// A team discussion is a persistent record of a free-form conversation within a team.
    pub fn new(author: Option<models::NullableSimpleUser>, body: String, body_html: String, body_version: String, comments_count: i32, comments_url: String, created_at: String, last_edited_at: Option<String>, html_url: String, node_id: String, number: i32, pinned: bool, private: bool, team_url: String, title: String, updated_at: String, url: String) -> TeamDiscussion {
        TeamDiscussion {
            author: if let Some(x) = author {Some(Box::new(x))} else {None},
            body,
            body_html,
            body_version,
            comments_count,
            comments_url,
            created_at,
            last_edited_at,
            html_url,
            node_id,
            number,
            pinned,
            private,
            team_url,
            title,
            updated_at,
            url,
            reactions: None,
        }
    }
}

