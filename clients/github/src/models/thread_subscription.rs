/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ThreadSubscription : Thread Subscription
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ThreadSubscription {
    #[serde(rename = "subscribed")]
    pub subscribed: bool,
    #[serde(rename = "ignored")]
    pub ignored: bool,
    #[serde(rename = "reason", deserialize_with = "Option::deserialize")]
    pub reason: Option<String>,
    #[serde(rename = "created_at", deserialize_with = "Option::deserialize")]
    pub created_at: Option<String>,
    #[serde(rename = "url")]
    pub url: String,
    #[serde(rename = "thread_url", skip_serializing_if = "Option::is_none")]
    pub thread_url: Option<String>,
    #[serde(rename = "repository_url", skip_serializing_if = "Option::is_none")]
    pub repository_url: Option<String>,
}

impl ThreadSubscription {
    /// Thread Subscription
    pub fn new(subscribed: bool, ignored: bool, reason: Option<String>, created_at: Option<String>, url: String) -> ThreadSubscription {
        ThreadSubscription {
            subscribed,
            ignored,
            reason,
            created_at,
            url,
            thread_url: None,
            repository_url: None,
        }
    }
}

