/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// TimelineCommentEvent : Timeline Comment Event
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TimelineCommentEvent {
    #[serde(rename = "event")]
    pub event: String,
    #[serde(rename = "actor")]
    pub actor: Box<models::SimpleUser>,
    /// Unique identifier of the issue comment
    #[serde(rename = "id")]
    pub id: i32,
    #[serde(rename = "node_id")]
    pub node_id: String,
    /// URL for the issue comment
    #[serde(rename = "url")]
    pub url: String,
    /// Contents of the issue comment
    #[serde(rename = "body", skip_serializing_if = "Option::is_none")]
    pub body: Option<String>,
    #[serde(rename = "body_text", skip_serializing_if = "Option::is_none")]
    pub body_text: Option<String>,
    #[serde(rename = "body_html", skip_serializing_if = "Option::is_none")]
    pub body_html: Option<String>,
    #[serde(rename = "html_url")]
    pub html_url: String,
    #[serde(rename = "user")]
    pub user: Box<models::SimpleUser>,
    #[serde(rename = "created_at")]
    pub created_at: String,
    #[serde(rename = "updated_at")]
    pub updated_at: String,
    #[serde(rename = "issue_url")]
    pub issue_url: String,
    #[serde(rename = "author_association")]
    pub author_association: models::AuthorAssociation,
    #[serde(rename = "performed_via_github_app", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub performed_via_github_app: Option<Option<Box<models::NullableIntegration>>>,
    #[serde(rename = "reactions", skip_serializing_if = "Option::is_none")]
    pub reactions: Option<Box<models::ReactionRollup>>,
}

impl TimelineCommentEvent {
    /// Timeline Comment Event
    pub fn new(event: String, actor: models::SimpleUser, id: i32, node_id: String, url: String, html_url: String, user: models::SimpleUser, created_at: String, updated_at: String, issue_url: String, author_association: models::AuthorAssociation) -> TimelineCommentEvent {
        TimelineCommentEvent {
            event,
            actor: Box::new(actor),
            id,
            node_id,
            url,
            body: None,
            body_text: None,
            body_html: None,
            html_url,
            user: Box::new(user),
            created_at,
            updated_at,
            issue_url,
            author_association,
            performed_via_github_app: None,
            reactions: None,
        }
    }
}

