/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// TimelineCommitCommentedEvent : Timeline Commit Commented Event
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TimelineCommitCommentedEvent {
    #[serde(rename = "event", skip_serializing_if = "Option::is_none")]
    pub event: Option<String>,
    #[serde(rename = "node_id", skip_serializing_if = "Option::is_none")]
    pub node_id: Option<String>,
    #[serde(rename = "commit_id", skip_serializing_if = "Option::is_none")]
    pub commit_id: Option<String>,
    #[serde(rename = "comments", skip_serializing_if = "Option::is_none")]
    pub comments: Option<Vec<models::CommitComment>>,
}

impl TimelineCommitCommentedEvent {
    /// Timeline Commit Commented Event
    pub fn new() -> TimelineCommitCommentedEvent {
        TimelineCommitCommentedEvent {
            event: None,
            node_id: None,
            commit_id: None,
            comments: None,
        }
    }
}

