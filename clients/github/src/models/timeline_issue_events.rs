/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// TimelineIssueEvents : Timeline Event
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TimelineIssueEvents {
    #[serde(rename = "id")]
    pub id: i32,
    #[serde(rename = "node_id")]
    pub node_id: String,
    #[serde(rename = "url")]
    pub url: String,
    #[serde(rename = "actor")]
    pub actor: Box<models::SimpleUser>,
    #[serde(rename = "event")]
    pub event: String,
    #[serde(rename = "commit_id", deserialize_with = "Option::deserialize")]
    pub commit_id: Option<String>,
    #[serde(rename = "commit_url", deserialize_with = "Option::deserialize")]
    pub commit_url: Option<String>,
    #[serde(rename = "created_at")]
    pub created_at: String,
    #[serde(rename = "performed_via_github_app", deserialize_with = "Option::deserialize")]
    pub performed_via_github_app: Option<Box<models::NullableIntegration>>,
    #[serde(rename = "label")]
    pub label: Box<models::LabeledIssueEventLabel>,
    #[serde(rename = "milestone")]
    pub milestone: Box<models::MilestonedIssueEventMilestone>,
    #[serde(rename = "rename")]
    pub rename: Box<models::RenamedIssueEventRename>,
    #[serde(rename = "review_requester")]
    pub review_requester: Box<models::SimpleUser>,
    #[serde(rename = "requested_team", skip_serializing_if = "Option::is_none")]
    pub requested_team: Option<Box<models::Team>>,
    #[serde(rename = "requested_reviewer", skip_serializing_if = "Option::is_none")]
    pub requested_reviewer: Option<Box<models::SimpleUser>>,
    #[serde(rename = "dismissed_review")]
    pub dismissed_review: Box<models::ReviewDismissedIssueEventDismissedReview>,
    #[serde(rename = "lock_reason", deserialize_with = "Option::deserialize")]
    pub lock_reason: Option<String>,
    #[serde(rename = "project_card", skip_serializing_if = "Option::is_none")]
    pub project_card: Option<Box<models::AddedToProjectIssueEventProjectCard>>,
    /// The text of the review.
    #[serde(rename = "body", deserialize_with = "Option::deserialize")]
    pub body: Option<String>,
    #[serde(rename = "body_text", skip_serializing_if = "Option::is_none")]
    pub body_text: Option<String>,
    #[serde(rename = "body_html", skip_serializing_if = "Option::is_none")]
    pub body_html: Option<String>,
    #[serde(rename = "html_url")]
    pub html_url: String,
    #[serde(rename = "user")]
    pub user: Box<models::SimpleUser>,
    #[serde(rename = "updated_at")]
    pub updated_at: String,
    #[serde(rename = "issue_url")]
    pub issue_url: String,
    #[serde(rename = "author_association")]
    pub author_association: models::AuthorAssociation,
    #[serde(rename = "reactions", skip_serializing_if = "Option::is_none")]
    pub reactions: Option<Box<models::ReactionRollup>>,
    #[serde(rename = "source")]
    pub source: Box<models::TimelineCrossReferencedEventSource>,
    /// SHA for the commit
    #[serde(rename = "sha")]
    pub sha: String,
    #[serde(rename = "author")]
    pub author: Box<models::GitCommitAuthor>,
    #[serde(rename = "committer")]
    pub committer: Box<models::GitCommitAuthor>,
    /// Message describing the purpose of the commit
    #[serde(rename = "message")]
    pub message: String,
    #[serde(rename = "tree")]
    pub tree: Box<models::GitCommitTree>,
    #[serde(rename = "parents")]
    pub parents: Vec<models::GitCommitParentsInner>,
    #[serde(rename = "verification")]
    pub verification: Box<models::GitCommitVerification>,
    #[serde(rename = "state")]
    pub state: String,
    #[serde(rename = "pull_request_url")]
    pub pull_request_url: String,
    #[serde(rename = "_links")]
    pub _links: Box<models::TimelineReviewedEventLinks>,
    #[serde(rename = "submitted_at", skip_serializing_if = "Option::is_none")]
    pub submitted_at: Option<String>,
    #[serde(rename = "comments", skip_serializing_if = "Option::is_none")]
    pub comments: Option<Vec<models::CommitComment>>,
    #[serde(rename = "assignee")]
    pub assignee: Box<models::SimpleUser>,
    #[serde(rename = "state_reason", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub state_reason: Option<Option<String>>,
}

impl TimelineIssueEvents {
    /// Timeline Event
    pub fn new(id: i32, node_id: String, url: String, actor: models::SimpleUser, event: String, commit_id: Option<String>, commit_url: Option<String>, created_at: String, performed_via_github_app: Option<models::NullableIntegration>, label: models::LabeledIssueEventLabel, milestone: models::MilestonedIssueEventMilestone, rename: models::RenamedIssueEventRename, review_requester: models::SimpleUser, dismissed_review: models::ReviewDismissedIssueEventDismissedReview, lock_reason: Option<String>, body: Option<String>, html_url: String, user: models::SimpleUser, updated_at: String, issue_url: String, author_association: models::AuthorAssociation, source: models::TimelineCrossReferencedEventSource, sha: String, author: models::GitCommitAuthor, committer: models::GitCommitAuthor, message: String, tree: models::GitCommitTree, parents: Vec<models::GitCommitParentsInner>, verification: models::GitCommitVerification, state: String, pull_request_url: String, _links: models::TimelineReviewedEventLinks, assignee: models::SimpleUser) -> TimelineIssueEvents {
        TimelineIssueEvents {
            id,
            node_id,
            url,
            actor: Box::new(actor),
            event,
            commit_id,
            commit_url,
            created_at,
            performed_via_github_app: if let Some(x) = performed_via_github_app {Some(Box::new(x))} else {None},
            label: Box::new(label),
            milestone: Box::new(milestone),
            rename: Box::new(rename),
            review_requester: Box::new(review_requester),
            requested_team: None,
            requested_reviewer: None,
            dismissed_review: Box::new(dismissed_review),
            lock_reason,
            project_card: None,
            body,
            body_text: None,
            body_html: None,
            html_url,
            user: Box::new(user),
            updated_at,
            issue_url,
            author_association,
            reactions: None,
            source: Box::new(source),
            sha,
            author: Box::new(author),
            committer: Box::new(committer),
            message,
            tree: Box::new(tree),
            parents,
            verification: Box::new(verification),
            state,
            pull_request_url,
            _links: Box::new(_links),
            submitted_at: None,
            comments: None,
            assignee: Box::new(assignee),
            state_reason: None,
        }
    }
}

