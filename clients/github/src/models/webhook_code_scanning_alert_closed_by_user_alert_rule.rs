/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct WebhookCodeScanningAlertClosedByUserAlertRule {
    /// A short description of the rule used to detect the alert.
    #[serde(rename = "description")]
    pub description: String,
    #[serde(rename = "full_description", skip_serializing_if = "Option::is_none")]
    pub full_description: Option<String>,
    #[serde(rename = "help", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub help: Option<Option<String>>,
    /// A link to the documentation for the rule used to detect the alert.
    #[serde(rename = "help_uri", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub help_uri: Option<Option<String>>,
    /// A unique identifier for the rule used to detect the alert.
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The severity of the alert.
    #[serde(rename = "severity", deserialize_with = "Option::deserialize")]
    pub severity: Option<Severity>,
    #[serde(rename = "tags", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Option<Vec<String>>>,
}

impl WebhookCodeScanningAlertClosedByUserAlertRule {
    pub fn new(description: String, id: String, severity: Option<Severity>) -> WebhookCodeScanningAlertClosedByUserAlertRule {
        WebhookCodeScanningAlertClosedByUserAlertRule {
            description,
            full_description: None,
            help: None,
            help_uri: None,
            id,
            name: None,
            severity,
            tags: None,
        }
    }
}
/// The severity of the alert.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Severity {
    #[serde(rename = "none")]
    None,
    #[serde(rename = "note")]
    Note,
    #[serde(rename = "warning")]
    Warning,
    #[serde(rename = "error")]
    Error,
}

impl Default for Severity {
    fn default() -> Severity {
        Self::None
    }
}

