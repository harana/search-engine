/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct WebhookInstallationTargetRenamedAccount {
    #[serde(rename = "archived_at", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub archived_at: Option<Option<String>>,
    #[serde(rename = "avatar_url")]
    pub avatar_url: String,
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    #[serde(rename = "description", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub description: Option<Option<serde_json::Value>>,
    #[serde(rename = "events_url", skip_serializing_if = "Option::is_none")]
    pub events_url: Option<String>,
    #[serde(rename = "followers", skip_serializing_if = "Option::is_none")]
    pub followers: Option<i32>,
    #[serde(rename = "followers_url", skip_serializing_if = "Option::is_none")]
    pub followers_url: Option<String>,
    #[serde(rename = "following", skip_serializing_if = "Option::is_none")]
    pub following: Option<i32>,
    #[serde(rename = "following_url", skip_serializing_if = "Option::is_none")]
    pub following_url: Option<String>,
    #[serde(rename = "gists_url", skip_serializing_if = "Option::is_none")]
    pub gists_url: Option<String>,
    #[serde(rename = "gravatar_id", skip_serializing_if = "Option::is_none")]
    pub gravatar_id: Option<String>,
    #[serde(rename = "has_organization_projects", skip_serializing_if = "Option::is_none")]
    pub has_organization_projects: Option<bool>,
    #[serde(rename = "has_repository_projects", skip_serializing_if = "Option::is_none")]
    pub has_repository_projects: Option<bool>,
    #[serde(rename = "hooks_url", skip_serializing_if = "Option::is_none")]
    pub hooks_url: Option<String>,
    #[serde(rename = "html_url")]
    pub html_url: String,
    #[serde(rename = "id")]
    pub id: i32,
    #[serde(rename = "is_verified", skip_serializing_if = "Option::is_none")]
    pub is_verified: Option<bool>,
    #[serde(rename = "issues_url", skip_serializing_if = "Option::is_none")]
    pub issues_url: Option<String>,
    #[serde(rename = "login", skip_serializing_if = "Option::is_none")]
    pub login: Option<String>,
    #[serde(rename = "members_url", skip_serializing_if = "Option::is_none")]
    pub members_url: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "node_id")]
    pub node_id: String,
    #[serde(rename = "organizations_url", skip_serializing_if = "Option::is_none")]
    pub organizations_url: Option<String>,
    #[serde(rename = "public_gists", skip_serializing_if = "Option::is_none")]
    pub public_gists: Option<i32>,
    #[serde(rename = "public_members_url", skip_serializing_if = "Option::is_none")]
    pub public_members_url: Option<String>,
    #[serde(rename = "public_repos", skip_serializing_if = "Option::is_none")]
    pub public_repos: Option<i32>,
    #[serde(rename = "received_events_url", skip_serializing_if = "Option::is_none")]
    pub received_events_url: Option<String>,
    #[serde(rename = "repos_url", skip_serializing_if = "Option::is_none")]
    pub repos_url: Option<String>,
    #[serde(rename = "site_admin", skip_serializing_if = "Option::is_none")]
    pub site_admin: Option<bool>,
    #[serde(rename = "slug", skip_serializing_if = "Option::is_none")]
    pub slug: Option<String>,
    #[serde(rename = "starred_url", skip_serializing_if = "Option::is_none")]
    pub starred_url: Option<String>,
    #[serde(rename = "subscriptions_url", skip_serializing_if = "Option::is_none")]
    pub subscriptions_url: Option<String>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<String>,
    #[serde(rename = "updated_at", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(rename = "website_url", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub website_url: Option<Option<serde_json::Value>>,
    #[serde(rename = "user_view_type", skip_serializing_if = "Option::is_none")]
    pub user_view_type: Option<String>,
}

impl WebhookInstallationTargetRenamedAccount {
    pub fn new(avatar_url: String, html_url: String, id: i32, node_id: String) -> WebhookInstallationTargetRenamedAccount {
        WebhookInstallationTargetRenamedAccount {
            archived_at: None,
            avatar_url,
            created_at: None,
            description: None,
            events_url: None,
            followers: None,
            followers_url: None,
            following: None,
            following_url: None,
            gists_url: None,
            gravatar_id: None,
            has_organization_projects: None,
            has_repository_projects: None,
            hooks_url: None,
            html_url,
            id,
            is_verified: None,
            issues_url: None,
            login: None,
            members_url: None,
            name: None,
            node_id,
            organizations_url: None,
            public_gists: None,
            public_members_url: None,
            public_repos: None,
            received_events_url: None,
            repos_url: None,
            site_admin: None,
            slug: None,
            starred_url: None,
            subscriptions_url: None,
            r#type: None,
            updated_at: None,
            url: None,
            website_url: None,
            user_view_type: None,
        }
    }
}

