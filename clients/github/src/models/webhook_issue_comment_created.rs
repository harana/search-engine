/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct WebhookIssueCommentCreated {
    #[serde(rename = "action")]
    pub action: Action,
    #[serde(rename = "comment")]
    pub comment: Box<models::IssueComment>,
    #[serde(rename = "enterprise", skip_serializing_if = "Option::is_none")]
    pub enterprise: Option<Box<models::EnterpriseWebhooks>>,
    #[serde(rename = "installation", skip_serializing_if = "Option::is_none")]
    pub installation: Option<Box<models::SimpleInstallation>>,
    #[serde(rename = "issue")]
    pub issue: Box<models::WebhookIssueCommentCreatedIssue>,
    #[serde(rename = "organization", skip_serializing_if = "Option::is_none")]
    pub organization: Option<Box<models::OrganizationSimpleWebhooks>>,
    #[serde(rename = "repository")]
    pub repository: Box<models::RepositoryWebhooks>,
    #[serde(rename = "sender")]
    pub sender: Box<models::SimpleUser>,
}

impl WebhookIssueCommentCreated {
    pub fn new(action: Action, comment: models::IssueComment, issue: models::WebhookIssueCommentCreatedIssue, repository: models::RepositoryWebhooks, sender: models::SimpleUser) -> WebhookIssueCommentCreated {
        WebhookIssueCommentCreated {
            action,
            comment: Box::new(comment),
            enterprise: None,
            installation: None,
            issue: Box::new(issue),
            organization: None,
            repository: Box::new(repository),
            sender: Box::new(sender),
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Action {
    #[serde(rename = "created")]
    Created,
}

impl Default for Action {
    fn default() -> Action {
        Self::Created
    }
}

