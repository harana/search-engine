/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct WebhookIssuesOpenedChanges {
    #[serde(rename = "old_issue", deserialize_with = "Option::deserialize")]
    pub old_issue: Option<Box<models::Issue6>>,
    #[serde(rename = "old_repository")]
    pub old_repository: Box<models::Repository1>,
}

impl WebhookIssuesOpenedChanges {
    pub fn new(old_issue: Option<models::Issue6>, old_repository: models::Repository1) -> WebhookIssuesOpenedChanges {
        WebhookIssuesOpenedChanges {
            old_issue: if let Some(x) = old_issue {Some(Box::new(x))} else {None},
            old_repository: Box::new(old_repository),
        }
    }
}

