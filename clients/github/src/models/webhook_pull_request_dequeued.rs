/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct WebhookPullRequestDequeued {
    #[serde(rename = "action")]
    pub action: Action,
    #[serde(rename = "enterprise", skip_serializing_if = "Option::is_none")]
    pub enterprise: Option<Box<models::EnterpriseWebhooks>>,
    #[serde(rename = "installation", skip_serializing_if = "Option::is_none")]
    pub installation: Option<Box<models::SimpleInstallation>>,
    #[serde(rename = "number")]
    pub number: i32,
    #[serde(rename = "organization", skip_serializing_if = "Option::is_none")]
    pub organization: Option<Box<models::OrganizationSimpleWebhooks>>,
    #[serde(rename = "pull_request")]
    pub pull_request: Box<models::PullRequest3>,
    #[serde(rename = "reason")]
    pub reason: Reason,
    #[serde(rename = "repository")]
    pub repository: Box<models::RepositoryWebhooks>,
    #[serde(rename = "sender")]
    pub sender: Box<models::SimpleUser>,
}

impl WebhookPullRequestDequeued {
    pub fn new(action: Action, number: i32, pull_request: models::PullRequest3, reason: Reason, repository: models::RepositoryWebhooks, sender: models::SimpleUser) -> WebhookPullRequestDequeued {
        WebhookPullRequestDequeued {
            action,
            enterprise: None,
            installation: None,
            number,
            organization: None,
            pull_request: Box::new(pull_request),
            reason,
            repository: Box::new(repository),
            sender: Box::new(sender),
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Action {
    #[serde(rename = "dequeued")]
    Dequeued,
}

impl Default for Action {
    fn default() -> Action {
        Self::Dequeued
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Reason {
    #[serde(rename = "UNKNOWN_REMOVAL_REASON")]
    UnknownRemovalReason,
    #[serde(rename = "MANUAL")]
    Manual,
    #[serde(rename = "MERGE")]
    Merge,
    #[serde(rename = "MERGE_CONFLICT")]
    MergeConflict,
    #[serde(rename = "CI_FAILURE")]
    CiFailure,
    #[serde(rename = "CI_TIMEOUT")]
    CiTimeout,
    #[serde(rename = "ALREADY_MERGED")]
    AlreadyMerged,
    #[serde(rename = "QUEUE_CLEARED")]
    QueueCleared,
    #[serde(rename = "ROLL_BACK")]
    RollBack,
    #[serde(rename = "BRANCH_PROTECTIONS")]
    BranchProtections,
    #[serde(rename = "GIT_TREE_INVALID")]
    GitTreeInvalid,
    #[serde(rename = "INVALID_MERGE_COMMIT")]
    InvalidMergeCommit,
}

impl Default for Reason {
    fn default() -> Reason {
        Self::UnknownRemovalReason
    }
}

