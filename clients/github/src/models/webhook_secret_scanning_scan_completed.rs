/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct WebhookSecretScanningScanCompleted {
    #[serde(rename = "action")]
    pub action: Action,
    /// What type of scan was completed
    #[serde(rename = "type")]
    pub r#type: Type,
    /// What type of content was scanned
    #[serde(rename = "source")]
    pub source: Source,
    /// The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
    #[serde(rename = "started_at")]
    pub started_at: String,
    /// The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
    #[serde(rename = "completed_at")]
    pub completed_at: String,
    /// List of patterns that were updated. This will be empty for normal backfill scans or custom pattern updates
    #[serde(rename = "secret_types", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub secret_types: Option<Option<Vec<String>>>,
    /// If the scan was triggered by a custom pattern update, this will be the name of the pattern that was updated
    #[serde(rename = "custom_pattern_name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub custom_pattern_name: Option<Option<String>>,
    /// If the scan was triggered by a custom pattern update, this will be the scope of the pattern that was updated
    #[serde(rename = "custom_pattern_scope", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub custom_pattern_scope: Option<Option<CustomPatternScope>>,
    #[serde(rename = "repository", skip_serializing_if = "Option::is_none")]
    pub repository: Option<Box<models::RepositoryWebhooks>>,
    #[serde(rename = "enterprise", skip_serializing_if = "Option::is_none")]
    pub enterprise: Option<Box<models::EnterpriseWebhooks>>,
    #[serde(rename = "installation", skip_serializing_if = "Option::is_none")]
    pub installation: Option<Box<models::SimpleInstallation>>,
    #[serde(rename = "organization", skip_serializing_if = "Option::is_none")]
    pub organization: Option<Box<models::OrganizationSimpleWebhooks>>,
    #[serde(rename = "sender", skip_serializing_if = "Option::is_none")]
    pub sender: Option<Box<models::SimpleUser>>,
}

impl WebhookSecretScanningScanCompleted {
    pub fn new(action: Action, r#type: Type, source: Source, started_at: String, completed_at: String) -> WebhookSecretScanningScanCompleted {
        WebhookSecretScanningScanCompleted {
            action,
            r#type,
            source,
            started_at,
            completed_at,
            secret_types: None,
            custom_pattern_name: None,
            custom_pattern_scope: None,
            repository: None,
            enterprise: None,
            installation: None,
            organization: None,
            sender: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Action {
    #[serde(rename = "completed")]
    Completed,
}

impl Default for Action {
    fn default() -> Action {
        Self::Completed
    }
}
/// What type of scan was completed
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "backfill")]
    Backfill,
    #[serde(rename = "custom-pattern-backfill")]
    CustomPatternBackfill,
    #[serde(rename = "pattern-version-backfill")]
    PatternVersionBackfill,
}

impl Default for Type {
    fn default() -> Type {
        Self::Backfill
    }
}
/// What type of content was scanned
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Source {
    #[serde(rename = "git")]
    Git,
    #[serde(rename = "issues")]
    Issues,
    #[serde(rename = "pull-requests")]
    PullRequests,
    #[serde(rename = "discussions")]
    Discussions,
    #[serde(rename = "wiki")]
    Wiki,
}

impl Default for Source {
    fn default() -> Source {
        Self::Git
    }
}
/// If the scan was triggered by a custom pattern update, this will be the scope of the pattern that was updated
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum CustomPatternScope {
    #[serde(rename = "repository")]
    Repository,
    #[serde(rename = "organization")]
    Organization,
    #[serde(rename = "enterprise")]
    Enterprise,
}

impl Default for CustomPatternScope {
    fn default() -> CustomPatternScope {
        Self::Repository
    }
}

