/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct WebhookSecurityAndAnalysis {
    #[serde(rename = "changes")]
    pub changes: Box<models::WebhookSecurityAndAnalysisChanges>,
    #[serde(rename = "enterprise", skip_serializing_if = "Option::is_none")]
    pub enterprise: Option<Box<models::EnterpriseWebhooks>>,
    #[serde(rename = "installation", skip_serializing_if = "Option::is_none")]
    pub installation: Option<Box<models::SimpleInstallation>>,
    #[serde(rename = "organization", skip_serializing_if = "Option::is_none")]
    pub organization: Option<Box<models::OrganizationSimpleWebhooks>>,
    #[serde(rename = "repository")]
    pub repository: Box<models::FullRepository>,
    #[serde(rename = "sender", skip_serializing_if = "Option::is_none")]
    pub sender: Option<Box<models::SimpleUser>>,
}

impl WebhookSecurityAndAnalysis {
    pub fn new(changes: models::WebhookSecurityAndAnalysisChanges, repository: models::FullRepository) -> WebhookSecurityAndAnalysis {
        WebhookSecurityAndAnalysis {
            changes: Box::new(changes),
            enterprise: None,
            installation: None,
            organization: None,
            repository: Box::new(repository),
            sender: None,
        }
    }
}

