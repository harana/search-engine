/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// WebhooksAlert : The security alert of the vulnerable dependency.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct WebhooksAlert {
    #[serde(rename = "affected_package_name")]
    pub affected_package_name: String,
    #[serde(rename = "affected_range")]
    pub affected_range: String,
    #[serde(rename = "created_at")]
    pub created_at: String,
    #[serde(rename = "dismiss_reason", skip_serializing_if = "Option::is_none")]
    pub dismiss_reason: Option<String>,
    #[serde(rename = "dismissed_at", skip_serializing_if = "Option::is_none")]
    pub dismissed_at: Option<String>,
    #[serde(rename = "dismisser", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub dismisser: Option<Option<Box<models::User>>>,
    #[serde(rename = "external_identifier")]
    pub external_identifier: String,
    #[serde(rename = "external_reference", deserialize_with = "Option::deserialize")]
    pub external_reference: Option<String>,
    #[serde(rename = "fix_reason", skip_serializing_if = "Option::is_none")]
    pub fix_reason: Option<String>,
    #[serde(rename = "fixed_at", skip_serializing_if = "Option::is_none")]
    pub fixed_at: Option<String>,
    #[serde(rename = "fixed_in", skip_serializing_if = "Option::is_none")]
    pub fixed_in: Option<String>,
    #[serde(rename = "ghsa_id")]
    pub ghsa_id: String,
    #[serde(rename = "id")]
    pub id: i32,
    #[serde(rename = "node_id")]
    pub node_id: String,
    #[serde(rename = "number")]
    pub number: i32,
    #[serde(rename = "severity")]
    pub severity: String,
    #[serde(rename = "state")]
    pub state: State,
}

impl WebhooksAlert {
    /// The security alert of the vulnerable dependency.
    pub fn new(affected_package_name: String, affected_range: String, created_at: String, external_identifier: String, external_reference: Option<String>, ghsa_id: String, id: i32, node_id: String, number: i32, severity: String, state: State) -> WebhooksAlert {
        WebhooksAlert {
            affected_package_name,
            affected_range,
            created_at,
            dismiss_reason: None,
            dismissed_at: None,
            dismisser: None,
            external_identifier,
            external_reference,
            fix_reason: None,
            fixed_at: None,
            fixed_in: None,
            ghsa_id,
            id,
            node_id,
            number,
            severity,
            state,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum State {
    #[serde(rename = "open")]
    Open,
}

impl Default for State {
    fn default() -> State {
        Self::Open
    }
}

