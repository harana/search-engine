/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct WebhooksProject {
    /// Body of the project
    #[serde(rename = "body", deserialize_with = "Option::deserialize")]
    pub body: Option<String>,
    #[serde(rename = "columns_url")]
    pub columns_url: String,
    #[serde(rename = "created_at")]
    pub created_at: String,
    #[serde(rename = "creator", deserialize_with = "Option::deserialize")]
    pub creator: Option<Box<models::User2>>,
    #[serde(rename = "html_url")]
    pub html_url: String,
    #[serde(rename = "id")]
    pub id: i32,
    /// Name of the project
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "node_id")]
    pub node_id: String,
    #[serde(rename = "number")]
    pub number: i32,
    #[serde(rename = "owner_url")]
    pub owner_url: String,
    /// State of the project; either 'open' or 'closed'
    #[serde(rename = "state")]
    pub state: State,
    #[serde(rename = "updated_at")]
    pub updated_at: String,
    #[serde(rename = "url")]
    pub url: String,
}

impl WebhooksProject {
    pub fn new(body: Option<String>, columns_url: String, created_at: String, creator: Option<models::User2>, html_url: String, id: i32, name: String, node_id: String, number: i32, owner_url: String, state: State, updated_at: String, url: String) -> WebhooksProject {
        WebhooksProject {
            body,
            columns_url,
            created_at,
            creator: if let Some(x) = creator {Some(Box::new(x))} else {None},
            html_url,
            id,
            name,
            node_id,
            number,
            owner_url,
            state,
            updated_at,
            url,
        }
    }
}
/// State of the project; either 'open' or 'closed'
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum State {
    #[serde(rename = "open")]
    Open,
    #[serde(rename = "closed")]
    Closed,
}

impl Default for State {
    fn default() -> State {
        Self::Open
    }
}

